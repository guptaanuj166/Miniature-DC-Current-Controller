
digi_pot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a344  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800a458  0800a458  0001a458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a930  0800a930  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a930  0800a930  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a930  0800a930  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d4  0800ab0c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800ab0c  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb09  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025bd  00000000  00000000  0002fd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00032308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9f  00000000  00000000  00033338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019901  00000000  00000000  00033fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b8b  00000000  00000000  0004d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092ecb  00000000  00000000  00060463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a3c  00000000  00000000  000f3330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f8d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a43c 	.word	0x0800a43c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a43c 	.word	0x0800a43c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2uiz>:
 8001124:	0042      	lsls	r2, r0, #1
 8001126:	d20e      	bcs.n	8001146 <__aeabi_f2uiz+0x22>
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30b      	bcc.n	8001146 <__aeabi_f2uiz+0x22>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d409      	bmi.n	800114c <__aeabi_f2uiz+0x28>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	fa23 f002 	lsr.w	r0, r3, r2
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr
 800114c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001150:	d101      	bne.n	8001156 <__aeabi_f2uiz+0x32>
 8001152:	0242      	lsls	r2, r0, #9
 8001154:	d102      	bne.n	800115c <__aeabi_f2uiz+0x38>
 8001156:	f04f 30ff 	mov.w	r0, #4294967295
 800115a:	4770      	bx	lr
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_d2lz>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	4605      	mov	r5, r0
 8001168:	460c      	mov	r4, r1
 800116a:	2200      	movs	r2, #0
 800116c:	2300      	movs	r3, #0
 800116e:	4628      	mov	r0, r5
 8001170:	4621      	mov	r1, r4
 8001172:	f7ff fc2d 	bl	80009d0 <__aeabi_dcmplt>
 8001176:	b928      	cbnz	r0, 8001184 <__aeabi_d2lz+0x20>
 8001178:	4628      	mov	r0, r5
 800117a:	4621      	mov	r1, r4
 800117c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001180:	f000 b80a 	b.w	8001198 <__aeabi_d2ulz>
 8001184:	4628      	mov	r0, r5
 8001186:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800118a:	f000 f805 	bl	8001198 <__aeabi_d2ulz>
 800118e:	4240      	negs	r0, r0
 8001190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001194:	bd38      	pop	{r3, r4, r5, pc}
 8001196:	bf00      	nop

08001198 <__aeabi_d2ulz>:
 8001198:	b5d0      	push	{r4, r6, r7, lr}
 800119a:	2200      	movs	r2, #0
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <__aeabi_d2ulz+0x34>)
 800119e:	4606      	mov	r6, r0
 80011a0:	460f      	mov	r7, r1
 80011a2:	f7ff f9a3 	bl	80004ec <__aeabi_dmul>
 80011a6:	f7ff fc79 	bl	8000a9c <__aeabi_d2uiz>
 80011aa:	4604      	mov	r4, r0
 80011ac:	f7ff f924 	bl	80003f8 <__aeabi_ui2d>
 80011b0:	2200      	movs	r2, #0
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <__aeabi_d2ulz+0x38>)
 80011b4:	f7ff f99a 	bl	80004ec <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4630      	mov	r0, r6
 80011be:	4639      	mov	r1, r7
 80011c0:	f7fe ffdc 	bl	800017c <__aeabi_dsub>
 80011c4:	f7ff fc6a 	bl	8000a9c <__aeabi_d2uiz>
 80011c8:	4621      	mov	r1, r4
 80011ca:	bdd0      	pop	{r4, r6, r7, pc}
 80011cc:	3df00000 	.word	0x3df00000
 80011d0:	41f00000 	.word	0x41f00000

080011d4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80011e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80011e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80011ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80011ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80011f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80011f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011f6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f80e 	bl	800122a <Lcd_init>

	return lcd;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	461d      	mov	r5, r3
 8001212:	f107 0410 	add.w	r4, r7, #16
 8001216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800121e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bdb0      	pop	{r4, r5, r7, pc}

0800122a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7d9b      	ldrb	r3, [r3, #22]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800123a:	2133      	movs	r1, #51	; 0x33
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f87f 	bl	8001340 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001242:	2132      	movs	r1, #50	; 0x32
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f87b 	bl	8001340 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800124a:	2128      	movs	r1, #40	; 0x28
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f877 	bl	8001340 <lcd_write_command>
 8001252:	e003      	b.n	800125c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001254:	2138      	movs	r1, #56	; 0x38
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f872 	bl	8001340 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800125c:	2101      	movs	r1, #1
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f86e 	bl	8001340 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001264:	210c      	movs	r1, #12
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f86a 	bl	8001340 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800126c:	2106      	movs	r1, #6
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f866 	bl	8001340 <lcd_write_command>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Lcd_float>:

/**
 * Write a number on the current position
 */
void Lcd_float(Lcd_HandleTypeDef * lcd, float number)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%.2f", number);
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7ff f8d8 	bl	800043c <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	f107 000c 	add.w	r0, r7, #12
 8001294:	4906      	ldr	r1, [pc, #24]	; (80012b0 <Lcd_float+0x34>)
 8001296:	f005 fc49 	bl	8006b2c <siprintf>

	Lcd_string(lcd, buffer);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f807 	bl	80012b4 <Lcd_string>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800a45c 	.word	0x0800a45c

080012b4 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e00a      	b.n	80012da <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f864 	bl	800139c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	7bfc      	ldrb	r4, [r7, #15]
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7fe ff41 	bl	8000164 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	429c      	cmp	r4, r3
 80012e6:	d3ed      	bcc.n	80012c4 <Lcd_string+0x10>
	}
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd90      	pop	{r4, r7, pc}
	...

080012f4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
 8001300:	4613      	mov	r3, r2
 8001302:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <Lcd_cursor+0x30>)
 8001308:	5cd2      	ldrb	r2, [r2, r3]
 800130a:	78bb      	ldrb	r3, [r7, #2]
 800130c:	4413      	add	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	3b80      	subs	r3, #128	; 0x80
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f812 	bl	8001340 <lcd_write_command>
	#endif
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	0800a4c4 	.word	0x0800a4c4

08001328 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8001330:	2101      	movs	r1, #1
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f804 	bl	8001340 <lcd_write_command>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6898      	ldr	r0, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	899b      	ldrh	r3, [r3, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	f002 fc0b 	bl	8003b72 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7d9b      	ldrb	r3, [r3, #22]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d111      	bne.n	8001388 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2204      	movs	r2, #4
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f842 	bl	80013f8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2204      	movs	r2, #4
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f839 	bl	80013f8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001386:	e005      	b.n	8001394 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2208      	movs	r2, #8
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f832 	bl	80013f8 <lcd_write>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6898      	ldr	r0, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	899b      	ldrh	r3, [r3, #12]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	f002 fbdd 	bl	8003b72 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7d9b      	ldrb	r3, [r3, #22]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2204      	movs	r2, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f814 	bl	80013f8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2204      	movs	r2, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f80b 	bl	80013f8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80013e2:	e005      	b.n	80013f0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2208      	movs	r2, #8
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f804 	bl	80013f8 <lcd_write>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
 8001404:	4613      	mov	r3, r2
 8001406:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e019      	b.n	8001442 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	8819      	ldrh	r1, [r3, #0]
 8001426:	78fa      	ldrb	r2, [r7, #3]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	fa42 f303 	asr.w	r3, r2, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	f002 fb9b 	bl	8003b72 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3301      	adds	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	78bb      	ldrb	r3, [r7, #2]
 8001446:	429a      	cmp	r2, r3
 8001448:	d3e1      	bcc.n	800140e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6918      	ldr	r0, [r3, #16]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	8a9b      	ldrh	r3, [r3, #20]
 8001452:	2201      	movs	r2, #1
 8001454:	4619      	mov	r1, r3
 8001456:	f002 fb8c 	bl	8003b72 <HAL_GPIO_WritePin>
	DELAY(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f001 fbb2 	bl	8002bc4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6918      	ldr	r0, [r3, #16]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	8a9b      	ldrh	r3, [r3, #20]
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	f002 fb81 	bl	8003b72 <HAL_GPIO_WritePin>
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b0a8      	sub	sp, #160	; 0xa0
 800147c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800147e:	f001 fb3f 	bl	8002b00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001482:	f000 fe0f 	bl	80020a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001486:	f000 ff95 	bl	80023b4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800148a:	f000 fe63 	bl	8002154 <MX_ADC1_Init>
	MX_SPI1_Init();
 800148e:	f000 fedd 	bl	800224c <MX_SPI1_Init>
	MX_TIM3_Init();
 8001492:	f000 ff11 	bl	80022b8 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8001496:	f000 ff63 	bl	8002360 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 800149a:	f000 fe99 	bl	80021d0 <MX_ADC2_Init>

	Lcd_PortType ports[] = { GPIOA, GPIOB, GPIOA, GPIOA };
 800149e:	4bd6      	ldr	r3, [pc, #856]	; (80017f8 <main+0x380>)
 80014a0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80014a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[] = {GPIO_PIN_1, GPIO_PIN_6, GPIO_PIN_8, GPIO_PIN_6};
 80014aa:	4ad4      	ldr	r2, [pc, #848]	; (80017fc <main+0x384>)
 80014ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b4:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;

	lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80014b8:	4638      	mov	r0, r7
 80014ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014be:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80014c2:	2300      	movs	r3, #0
 80014c4:	9303      	str	r3, [sp, #12]
 80014c6:	2310      	movs	r3, #16
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	4bcd      	ldr	r3, [pc, #820]	; (8001800 <main+0x388>)
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2320      	movs	r3, #32
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4bcb      	ldr	r3, [pc, #812]	; (8001800 <main+0x388>)
 80014d4:	f7ff fe7e 	bl	80011d4 <Lcd_create>
 80014d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80014dc:	463d      	mov	r5, r7
 80014de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014e6:	e884 0003 	stmia.w	r4, {r0, r1}
	Lcd_clear(&lcd);
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff1a 	bl	8001328 <Lcd_clear>
	Lcd_cursor(&lcd, 0,0);
 80014f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fef9 	bl	80012f4 <Lcd_cursor>


	uint8_t var1=0x33, var2=0xFF; // Two 8 bit variables to send SPI for DAC, Initial 4 bits are always fixed, make sure to look at datasheet
 8001502:	2333      	movs	r3, #51	; 0x33
 8001504:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001508:	23ff      	movs	r3, #255	; 0xff
 800150a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint16_t current_v=0,adc_val=0,counter=0, voltage=0;
 800150e:	2300      	movs	r3, #0
 8001510:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001514:	2300      	movs	r3, #0
 8001516:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800151a:	2300      	movs	r3, #0
 800151c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001520:	2300      	movs	r3, #0
 8001522:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint32_t Samples=0;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float current_reading, current_set=0, p_err=0, current_avg=0, c=0, current_sum=0;
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	; 0x7c
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	677b      	str	r3, [r7, #116]	; 0x74
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t var[2]={var1,var2}, count2=0, f=0, cv_flag=0, kp=21;
 800154c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001550:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001554:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001558:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800155c:	2300      	movs	r3, #0
 800155e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001562:	2300      	movs	r3, #0
 8001564:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001568:	2300      	movs	r3, #0
 800156a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800156e:	2315      	movs	r3, #21
 8001570:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // Initialize LED to OFF
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	48a1      	ldr	r0, [pc, #644]	; (8001800 <main+0x388>)
 800157c:	f002 faf9 	bl	8003b72 <HAL_GPIO_WritePin>

	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001580:	213c      	movs	r1, #60	; 0x3c
 8001582:	48a0      	ldr	r0, [pc, #640]	; (8001804 <main+0x38c>)
 8001584:	f003 fb9a 	bl	8004cbc <HAL_TIM_Encoder_Start_IT>
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	499f      	ldr	r1, [pc, #636]	; (8001808 <main+0x390>)
 800158c:	489f      	ldr	r0, [pc, #636]	; (800180c <main+0x394>)
 800158e:	f003 fdfa 	bl	8005186 <HAL_UART_Receive_IT>


	while (1)
	{

		Lcd_cursor(&lcd, 0,0);
 8001592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff feaa 	bl	80012f4 <Lcd_cursor>
		Lcd_string(&lcd, "RC:");
 80015a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a4:	499a      	ldr	r1, [pc, #616]	; (8001810 <main+0x398>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fe84 	bl	80012b4 <Lcd_string>
		// Rotary turn
		counter=TIM3->CNT; // Rotary encoder is just counter in encoder mode for turns, check rotary data sheet for better understanding
 80015ac:	4b99      	ldr	r3, [pc, #612]	; (8001814 <main+0x39c>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

		Lcd_cursor(&lcd, 0,3);
 80015b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b8:	2203      	movs	r2, #3
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fe99 	bl	80012f4 <Lcd_cursor>
		Lcd_float(&lcd, 1.0*counter/100);
 80015c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff26 	bl	8000418 <__aeabi_i2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b91      	ldr	r3, [pc, #580]	; (8001818 <main+0x3a0>)
 80015d2:	f7ff f8b5 	bl	8000740 <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fa7d 	bl	8000adc <__aeabi_d2f>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe46 	bl	800127c <Lcd_float>

		// Detect rotary press
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET){
 80015f0:	2101      	movs	r1, #1
 80015f2:	4883      	ldr	r0, [pc, #524]	; (8001800 <main+0x388>)
 80015f4:	f002 faa6 	bl	8003b44 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d15f      	bne.n	80016be <main+0x246>
			current_set=0.01*counter;
 80015fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff08 	bl	8000418 <__aeabi_i2d>
 8001608:	a36d      	add	r3, pc, #436	; (adr r3, 80017c0 <main+0x348>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe ff6d 	bl	80004ec <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa5f 	bl	8000adc <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			//Average resistance is different for each current range
			if (current_set<1.1)
 8001624:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001628:	f7fe ff08 	bl	800043c <__aeabi_f2d>
 800162c:	a366      	add	r3, pc, #408	; (adr r3, 80017c8 <main+0x350>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f9cd 	bl	80009d0 <__aeabi_dcmplt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d011      	beq.n	8001660 <main+0x1e8>
				current_v=4095*12*current_set/500;
 800163c:	4977      	ldr	r1, [pc, #476]	; (800181c <main+0x3a4>)
 800163e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001642:	f7ff fba9 	bl	8000d98 <__aeabi_fmul>
 8001646:	4603      	mov	r3, r0
 8001648:	4975      	ldr	r1, [pc, #468]	; (8001820 <main+0x3a8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fc58 	bl	8000f00 <__aeabi_fdiv>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fd66 	bl	8001124 <__aeabi_f2uiz>
 8001658:	4603      	mov	r3, r0
 800165a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800165e:	e02e      	b.n	80016be <main+0x246>
			else if (current_set<2.1)
 8001660:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001664:	f7fe feea 	bl	800043c <__aeabi_f2d>
 8001668:	a359      	add	r3, pc, #356	; (adr r3, 80017d0 <main+0x358>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7ff f9af 	bl	80009d0 <__aeabi_dcmplt>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d011      	beq.n	800169c <main+0x224>
				current_v=4095*11*current_set/500;
 8001678:	496a      	ldr	r1, [pc, #424]	; (8001824 <main+0x3ac>)
 800167a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800167e:	f7ff fb8b 	bl	8000d98 <__aeabi_fmul>
 8001682:	4603      	mov	r3, r0
 8001684:	4966      	ldr	r1, [pc, #408]	; (8001820 <main+0x3a8>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fc3a 	bl	8000f00 <__aeabi_fdiv>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd48 	bl	8001124 <__aeabi_f2uiz>
 8001694:	4603      	mov	r3, r0
 8001696:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800169a:	e010      	b.n	80016be <main+0x246>
			else
				current_v=4095*10*current_set/500;
 800169c:	4962      	ldr	r1, [pc, #392]	; (8001828 <main+0x3b0>)
 800169e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80016a2:	f7ff fb79 	bl	8000d98 <__aeabi_fmul>
 80016a6:	4603      	mov	r3, r0
 80016a8:	495d      	ldr	r1, [pc, #372]	; (8001820 <main+0x3a8>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fc28 	bl	8000f00 <__aeabi_fdiv>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fd36 	bl	8001124 <__aeabi_f2uiz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		}


		Lcd_cursor(&lcd, 0,8);
 80016be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c2:	2208      	movs	r2, #8
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe14 	bl	80012f4 <Lcd_cursor>
		Lcd_string(&lcd, "SC:");
 80016cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d0:	4956      	ldr	r1, [pc, #344]	; (800182c <main+0x3b4>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fdee 	bl	80012b4 <Lcd_string>
		Lcd_cursor(&lcd, 0,11);
 80016d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016dc:	220b      	movs	r2, #11
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe07 	bl	80012f4 <Lcd_cursor>
		Lcd_float(&lcd, current_set);
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fdc4 	bl	800127c <Lcd_float>

		// Reading of potential for current from Hall Based sensor
		Samples=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		for (int x = 0; x < 150; x++){ //Get 150 samples
 80016fa:	2300      	movs	r3, #0
 80016fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80016fe:	e019      	b.n	8001734 <main+0x2bc>
			HAL_ADC_Start(&hadc1);
 8001700:	484b      	ldr	r0, [pc, #300]	; (8001830 <main+0x3b8>)
 8001702:	f001 fb5b 	bl	8002dbc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1,20);
 8001706:	2114      	movs	r1, #20
 8001708:	4849      	ldr	r0, [pc, #292]	; (8001830 <main+0x3b8>)
 800170a:	f001 fc31 	bl	8002f70 <HAL_ADC_PollForConversion>
			adc_val = HAL_ADC_GetValue(&hadc1);    //Read current sensor values
 800170e:	4848      	ldr	r0, [pc, #288]	; (8001830 <main+0x3b8>)
 8001710:	f001 fd34 	bl	800317c <HAL_ADC_GetValue>
 8001714:	4603      	mov	r3, r0
 8001716:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_ADC_Stop(&hadc1);
 800171a:	4845      	ldr	r0, [pc, #276]	; (8001830 <main+0x3b8>)
 800171c:	f001 fbfc 	bl	8002f18 <HAL_ADC_Stop>
			Samples = Samples + adc_val;  //Add samples together
 8001720:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001724:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001728:	4413      	add	r3, r2
 800172a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		for (int x = 0; x < 150; x++){ //Get 150 samples
 800172e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001730:	3301      	adds	r3, #1
 8001732:	66bb      	str	r3, [r7, #104]	; 0x68
 8001734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001736:	2b95      	cmp	r3, #149	; 0x95
 8001738:	dde2      	ble.n	8001700 <main+0x288>
		}
		adc_val=Samples/150;//Taking Average of Samples
 800173a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800173e:	4a3d      	ldr	r2, [pc, #244]	; (8001834 <main+0x3bc>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		if (current_set<1.5)
 800174a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800174e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001752:	f7ff fcbf 	bl	80010d4 <__aeabi_fcmplt>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d06d      	beq.n	8001838 <main+0x3c0>
			current_reading=(-adc_val*3.42/4036+1.669)/0.084; // Equation is based on sensitivity and trial & error
 800175c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001760:	425b      	negs	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe58 	bl	8000418 <__aeabi_i2d>
 8001768:	a31b      	add	r3, pc, #108	; (adr r3, 80017d8 <main+0x360>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe febd 	bl	80004ec <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	a319      	add	r3, pc, #100	; (adr r3, 80017e0 <main+0x368>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ffde 	bl	8000740 <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	a316      	add	r3, pc, #88	; (adr r3, 80017e8 <main+0x370>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe fcf5 	bl	8000180 <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	a314      	add	r3, pc, #80	; (adr r3, 80017f0 <main+0x378>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe ffcc 	bl	8000740 <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f994 	bl	8000adc <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017ba:	e06c      	b.n	8001896 <main+0x41e>
 80017bc:	f3af 8000 	nop.w
 80017c0:	47ae147b 	.word	0x47ae147b
 80017c4:	3f847ae1 	.word	0x3f847ae1
 80017c8:	9999999a 	.word	0x9999999a
 80017cc:	3ff19999 	.word	0x3ff19999
 80017d0:	cccccccd 	.word	0xcccccccd
 80017d4:	4000cccc 	.word	0x4000cccc
 80017d8:	f5c28f5c 	.word	0xf5c28f5c
 80017dc:	400b5c28 	.word	0x400b5c28
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40af8800 	.word	0x40af8800
 80017e8:	5810624e 	.word	0x5810624e
 80017ec:	3ffab439 	.word	0x3ffab439
 80017f0:	24dd2f1b 	.word	0x24dd2f1b
 80017f4:	3fb58106 	.word	0x3fb58106
 80017f8:	0800a478 	.word	0x0800a478
 80017fc:	0800a488 	.word	0x0800a488
 8001800:	40010c00 	.word	0x40010c00
 8001804:	200002a8 	.word	0x200002a8
 8001808:	2000033c 	.word	0x2000033c
 800180c:	200002f0 	.word	0x200002f0
 8001810:	0800a464 	.word	0x0800a464
 8001814:	40000400 	.word	0x40000400
 8001818:	40590000 	.word	0x40590000
 800181c:	473ff400 	.word	0x473ff400
 8001820:	43fa0000 	.word	0x43fa0000
 8001824:	472ff500 	.word	0x472ff500
 8001828:	471ff600 	.word	0x471ff600
 800182c:	0800a468 	.word	0x0800a468
 8001830:	200001f0 	.word	0x200001f0
 8001834:	1b4e81b5 	.word	0x1b4e81b5
		else
			current_reading=(-adc_val*3.0/4095+1.442)/0.084;
 8001838:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800183c:	425b      	negs	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fdea 	bl	8000418 <__aeabi_i2d>
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4bbf      	ldr	r3, [pc, #764]	; (8001b48 <main+0x6d0>)
 800184a:	f7fe fe4f 	bl	80004ec <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	a3ae      	add	r3, pc, #696	; (adr r3, 8001b10 <main+0x698>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe ff70 	bl	8000740 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a3ab      	add	r3, pc, #684	; (adr r3, 8001b18 <main+0x6a0>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fc87 	bl	8000180 <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001b20 <main+0x6a8>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe ff5e 	bl	8000740 <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f926 	bl	8000adc <__aeabi_d2f>
 8001890:	4603      	mov	r3, r0
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		if (current_reading<0){
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800189e:	f7ff fc19 	bl	80010d4 <__aeabi_fcmplt>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <main+0x438>
			current_reading=0;
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		}


		// PD controller for both CC and CV
		if (cv_flag==1){
 80018b0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d138      	bne.n	800192a <main+0x4b2>
			if ((voltage>1700)|| (voltage<1600))
 80018b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018bc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d804      	bhi.n	80018ce <main+0x456>
 80018c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80018cc:	d203      	bcs.n	80018d6 <main+0x45e>
				kp=10;
 80018ce:	230a      	movs	r3, #10
 80018d0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 80018d4:	e002      	b.n	80018dc <main+0x464>
			else
				kp=1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

			if ((voltage>1645))
 80018dc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018e0:	f240 626d 	movw	r2, #1645	; 0x66d
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d908      	bls.n	80018fa <main+0x482>
				current_v=current_v+kp;
 80018e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018f2:	4413      	add	r3, r2
 80018f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80018f8:	e090      	b.n	8001a1c <main+0x5a4>

			else if ((voltage<1645)){
 80018fa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018fe:	f240 626c 	movw	r2, #1644	; 0x66c
 8001902:	4293      	cmp	r3, r2
 8001904:	f200 808a 	bhi.w	8001a1c <main+0x5a4>
				if (current_v > kp)
 8001908:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800190c:	b29b      	uxth	r3, r3
 800190e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001912:	429a      	cmp	r2, r3
 8001914:	f240 8082 	bls.w	8001a1c <main+0x5a4>
					current_v=current_v-kp;
 8001918:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800191c:	b29b      	uxth	r3, r3
 800191e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001928:	e078      	b.n	8001a1c <main+0x5a4>
			}
		}
		else{
			if (current_reading-current_set > 0.05){
 800192a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800192e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001932:	f7ff f927 	bl	8000b84 <__aeabi_fsub>
 8001936:	4603      	mov	r3, r0
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fd7f 	bl	800043c <__aeabi_f2d>
 800193e:	a37a      	add	r3, pc, #488	; (adr r3, 8001b28 <main+0x6b0>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7ff f862 	bl	8000a0c <__aeabi_dcmpgt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d028      	beq.n	80019a0 <main+0x528>
				if (current_v > 3)
 800194e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001952:	2b03      	cmp	r3, #3
 8001954:	d95a      	bls.n	8001a0c <main+0x594>
					current_v=current_v-3+0*(current_reading-current_set -p_err);
 8001956:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800195a:	3b03      	subs	r3, #3
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f9c7 	bl	8000cf0 <__aeabi_i2f>
 8001962:	4604      	mov	r4, r0
 8001964:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001968:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800196c:	f7ff f90a 	bl	8000b84 <__aeabi_fsub>
 8001970:	4603      	mov	r3, r0
 8001972:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f905 	bl	8000b84 <__aeabi_fsub>
 800197a:	4603      	mov	r3, r0
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fa09 	bl	8000d98 <__aeabi_fmul>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff f8fc 	bl	8000b88 <__addsf3>
 8001990:	4603      	mov	r3, r0
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fbc6 	bl	8001124 <__aeabi_f2uiz>
 8001998:	4603      	mov	r3, r0
 800199a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800199e:	e035      	b.n	8001a0c <main+0x594>
			}
			else if(current_reading-current_set < 0.05){
 80019a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80019a4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80019a8:	f7ff f8ec 	bl	8000b84 <__aeabi_fsub>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd44 	bl	800043c <__aeabi_f2d>
 80019b4:	a35c      	add	r3, pc, #368	; (adr r3, 8001b28 <main+0x6b0>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7ff f809 	bl	80009d0 <__aeabi_dcmplt>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d023      	beq.n	8001a0c <main+0x594>

				current_v=current_v+3+0*(current_reading-current_set -p_err);
 80019c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80019c8:	3303      	adds	r3, #3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f990 	bl	8000cf0 <__aeabi_i2f>
 80019d0:	4604      	mov	r4, r0
 80019d2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80019d6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80019da:	f7ff f8d3 	bl	8000b84 <__aeabi_fsub>
 80019de:	4603      	mov	r3, r0
 80019e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f8ce 	bl	8000b84 <__aeabi_fsub>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9d2 	bl	8000d98 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4620      	mov	r0, r4
 80019fa:	f7ff f8c5 	bl	8000b88 <__addsf3>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fb8f 	bl	8001124 <__aeabi_f2uiz>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			}
			p_err=current_reading-current_set;
 8001a0c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001a10:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a14:	f7ff f8b6 	bl	8000b84 <__aeabi_fsub>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		// Transition condition (0.1 A is the accuracy)
		Lcd_cursor(&lcd, 1,10);
 8001a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a20:	220a      	movs	r2, #10
 8001a22:	2101      	movs	r1, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fc65 	bl	80012f4 <Lcd_cursor>
		if (((current_reading+0.1>current_set) && ((voltage>1750) || ((voltage<10) ||current_set<0.08))) || ((f==0) && (count2<41)) )
 8001a2a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a2e:	f7fe fd05 	bl	800043c <__aeabi_f2d>
 8001a32:	a33f      	add	r3, pc, #252	; (adr r3, 8001b30 <main+0x6b8>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fba2 	bl	8000180 <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4614      	mov	r4, r2
 8001a42:	461d      	mov	r5, r3
 8001a44:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a48:	f7fe fcf8 	bl	800043c <__aeabi_f2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe ffda 	bl	8000a0c <__aeabi_dcmpgt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d015      	beq.n	8001a8a <main+0x612>
 8001a5e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001a62:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d819      	bhi.n	8001a9e <main+0x626>
 8001a6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	d915      	bls.n	8001a9e <main+0x626>
 8001a72:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a76:	f7fe fce1 	bl	800043c <__aeabi_f2d>
 8001a7a:	a32f      	add	r3, pc, #188	; (adr r3, 8001b38 <main+0x6c0>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe ffa6 	bl	80009d0 <__aeabi_dcmplt>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <main+0x626>
 8001a8a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f040 8097 	bne.w	8001bc2 <main+0x74a>
 8001a94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a98:	2b28      	cmp	r3, #40	; 0x28
 8001a9a:	f200 8092 	bhi.w	8001bc2 <main+0x74a>
		{ //CC
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa4:	4829      	ldr	r0, [pc, #164]	; (8001b4c <main+0x6d4>)
 8001aa6:	f002 f864 	bl	8003b72 <HAL_GPIO_WritePin>

			Lcd_string(&lcd, "CC");
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	4928      	ldr	r1, [pc, #160]	; (8001b50 <main+0x6d8>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fbff 	bl	80012b4 <Lcd_string>
			count2++;
 8001ab6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aba:	3301      	adds	r3, #1
 8001abc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			f=0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			if (cv_flag==1){
 8001ac6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	f040 8096 	bne.w	8001bfc <main+0x784>
				if (current_set<1.1)
 8001ad0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001ad4:	f7fe fcb2 	bl	800043c <__aeabi_f2d>
 8001ad8:	a319      	add	r3, pc, #100	; (adr r3, 8001b40 <main+0x6c8>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe ff77 	bl	80009d0 <__aeabi_dcmplt>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d039      	beq.n	8001b5c <main+0x6e4>
					current_v=4095*12*current_set/500;
 8001ae8:	491a      	ldr	r1, [pc, #104]	; (8001b54 <main+0x6dc>)
 8001aea:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001aee:	f7ff f953 	bl	8000d98 <__aeabi_fmul>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4918      	ldr	r1, [pc, #96]	; (8001b58 <main+0x6e0>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fa02 	bl	8000f00 <__aeabi_fdiv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fb10 	bl	8001124 <__aeabi_f2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001b0a:	e056      	b.n	8001bba <main+0x742>
 8001b0c:	f3af 8000 	nop.w
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40affe00 	.word	0x40affe00
 8001b18:	978d4fdf 	.word	0x978d4fdf
 8001b1c:	3ff7126e 	.word	0x3ff7126e
 8001b20:	24dd2f1b 	.word	0x24dd2f1b
 8001b24:	3fb58106 	.word	0x3fb58106
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fa99999 	.word	0x3fa99999
 8001b30:	9999999a 	.word	0x9999999a
 8001b34:	3fb99999 	.word	0x3fb99999
 8001b38:	47ae147b 	.word	0x47ae147b
 8001b3c:	3fb47ae1 	.word	0x3fb47ae1
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3ff19999 	.word	0x3ff19999
 8001b48:	40080000 	.word	0x40080000
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	0800a46c 	.word	0x0800a46c
 8001b54:	473ff400 	.word	0x473ff400
 8001b58:	43fa0000 	.word	0x43fa0000
				else if (current_set<2.1)
 8001b5c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001b60:	f7fe fc6c 	bl	800043c <__aeabi_f2d>
 8001b64:	a398      	add	r3, pc, #608	; (adr r3, 8001dc8 <main+0x950>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe ff31 	bl	80009d0 <__aeabi_dcmplt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d011      	beq.n	8001b98 <main+0x720>
					current_v=4095*11*current_set/500;
 8001b74:	4998      	ldr	r1, [pc, #608]	; (8001dd8 <main+0x960>)
 8001b76:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001b7a:	f7ff f90d 	bl	8000d98 <__aeabi_fmul>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4996      	ldr	r1, [pc, #600]	; (8001ddc <main+0x964>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f9bc 	bl	8000f00 <__aeabi_fdiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff faca 	bl	8001124 <__aeabi_f2uiz>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001b96:	e010      	b.n	8001bba <main+0x742>
				else
					current_v=4095*10*current_set/500;
 8001b98:	4991      	ldr	r1, [pc, #580]	; (8001de0 <main+0x968>)
 8001b9a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001b9e:	f7ff f8fb 	bl	8000d98 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	498d      	ldr	r1, [pc, #564]	; (8001ddc <main+0x964>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f9aa 	bl	8000f00 <__aeabi_fdiv>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fab8 	bl	8001124 <__aeabi_f2uiz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				cv_flag=0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			if (cv_flag==1){
 8001bc0:	e01c      	b.n	8001bfc <main+0x784>
			}

		}
		else if(count2==0 || count2>40)
 8001bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <main+0x75a>
 8001bca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bce:	2b28      	cmp	r3, #40	; 0x28
 8001bd0:	d914      	bls.n	8001bfc <main+0x784>
		{//CV

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd8:	4882      	ldr	r0, [pc, #520]	; (8001de4 <main+0x96c>)
 8001bda:	f001 ffca 	bl	8003b72 <HAL_GPIO_WritePin>

			Lcd_string(&lcd, "CV");
 8001bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be2:	4981      	ldr	r1, [pc, #516]	; (8001de8 <main+0x970>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fb65 	bl	80012b4 <Lcd_string>
			count2=0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			f=1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			cv_flag=1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		}

		//Measuring potential of lower end of load scaled to 3.3V for ADC, upper end is always 9V
		Samples=0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		for (int x = 0; x < 150; x++){ //Get 150 samples
 8001c02:	2300      	movs	r3, #0
 8001c04:	667b      	str	r3, [r7, #100]	; 0x64
 8001c06:	e019      	b.n	8001c3c <main+0x7c4>
			HAL_ADC_Start(&hadc2);
 8001c08:	4878      	ldr	r0, [pc, #480]	; (8001dec <main+0x974>)
 8001c0a:	f001 f8d7 	bl	8002dbc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2,20);
 8001c0e:	2114      	movs	r1, #20
 8001c10:	4876      	ldr	r0, [pc, #472]	; (8001dec <main+0x974>)
 8001c12:	f001 f9ad 	bl	8002f70 <HAL_ADC_PollForConversion>
			adc_val = HAL_ADC_GetValue(&hadc2);    //Read potential values
 8001c16:	4875      	ldr	r0, [pc, #468]	; (8001dec <main+0x974>)
 8001c18:	f001 fab0 	bl	800317c <HAL_ADC_GetValue>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_ADC_Stop(&hadc2);
 8001c22:	4872      	ldr	r0, [pc, #456]	; (8001dec <main+0x974>)
 8001c24:	f001 f978 	bl	8002f18 <HAL_ADC_Stop>
			Samples = Samples + adc_val;  //Add samples together
 8001c28:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001c2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001c30:	4413      	add	r3, r2
 8001c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		for (int x = 0; x < 150; x++){ //Get 150 samples
 8001c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c38:	3301      	adds	r3, #1
 8001c3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c3e:	2b95      	cmp	r3, #149	; 0x95
 8001c40:	dde2      	ble.n	8001c08 <main+0x790>
		}
		adc_val=Samples/150;//Taking Average of Samples
 8001c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c46:	4a6a      	ldr	r2, [pc, #424]	; (8001df0 <main+0x978>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		voltage=adc_val;
 8001c52:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001c56:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		if (current_set==0.00)
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c62:	f7ff fa2d 	bl	80010c0 <__aeabi_fcmpeq>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <main+0x7fa>
			current_v=0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		if (current_v > 320) // Value of potential (in digital) above which no value would ever be required for any kind of load, thus limiting it to prevent any garbage value
 8001c72:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001c76:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c7a:	d903      	bls.n	8001c84 <main+0x80c>
			current_v=320;
 8001c7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

		// Transmission to DAC using SPI
		var2=current_v&0xFF;
 8001c84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001c88:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
		var1=current_v/256;
 8001c8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		var1=var1&0x0F;
 8001c98:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		var1=var1|0x30;
 8001ca4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001ca8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cac:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		var[0]=var1;
 8001cb0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001cb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		var[1]=var2;
 8001cb8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001cbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		Lcd_cursor(&lcd, 1,0);
 8001cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fb13 	bl	80012f4 <Lcd_cursor>
		Lcd_string(&lcd, "AC:");
 8001cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd2:	4948      	ldr	r1, [pc, #288]	; (8001df4 <main+0x97c>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff faed 	bl	80012b4 <Lcd_string>
		Lcd_cursor(&lcd, 1,4);
 8001cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cde:	2204      	movs	r2, #4
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fb06 	bl	80012f4 <Lcd_cursor>

		// Displaying avg current in some cases to prevent fluctuations
		current_sum=current_reading+current_sum;
 8001ce8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001cec:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001cee:	f7fe ff4b 	bl	8000b88 <__addsf3>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	673b      	str	r3, [r7, #112]	; 0x70
		if (c==9){
 8001cf6:	4940      	ldr	r1, [pc, #256]	; (8001df8 <main+0x980>)
 8001cf8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001cfa:	f7ff f9e1 	bl	80010c0 <__aeabi_fcmpeq>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <main+0x8a4>
			current_avg=current_sum/10;
 8001d04:	493d      	ldr	r1, [pc, #244]	; (8001dfc <main+0x984>)
 8001d06:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001d08:	f7ff f8fa 	bl	8000f00 <__aeabi_fdiv>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	67bb      	str	r3, [r7, #120]	; 0x78
			c=0;
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	677b      	str	r3, [r7, #116]	; 0x74
			current_sum=0;
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	673b      	str	r3, [r7, #112]	; 0x70
		}
		if (current_avg==0)
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d22:	f7ff f9cd 	bl	80010c0 <__aeabi_fcmpeq>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <main+0x8ba>
			current_avg=current_reading;
 8001d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d30:	67bb      	str	r3, [r7, #120]	; 0x78
		c++;
 8001d32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d36:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d38:	f7fe ff26 	bl	8000b88 <__addsf3>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	677b      	str	r3, [r7, #116]	; 0x74

		if ((current_avg>current_set+0.1) || (current_avg+0.1<current_set) || (!current_reading))
 8001d40:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d42:	f7fe fb7b 	bl	800043c <__aeabi_f2d>
 8001d46:	4604      	mov	r4, r0
 8001d48:	460d      	mov	r5, r1
 8001d4a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d4e:	f7fe fb75 	bl	800043c <__aeabi_f2d>
 8001d52:	a31f      	add	r3, pc, #124	; (adr r3, 8001dd0 <main+0x958>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fa12 	bl	8000180 <__adddf3>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fe52 	bl	8000a0c <__aeabi_dcmpgt>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d121      	bne.n	8001db2 <main+0x93a>
 8001d6e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d70:	f7fe fb64 	bl	800043c <__aeabi_f2d>
 8001d74:	a316      	add	r3, pc, #88	; (adr r3, 8001dd0 <main+0x958>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fa01 	bl	8000180 <__adddf3>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4614      	mov	r4, r2
 8001d84:	461d      	mov	r5, r3
 8001d86:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d8a:	f7fe fb57 	bl	800043c <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fe1b 	bl	80009d0 <__aeabi_dcmplt>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d108      	bne.n	8001db2 <main+0x93a>
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001da8:	f7ff f98a 	bl	80010c0 <__aeabi_fcmpeq>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d026      	beq.n	8001e00 <main+0x988>
			Lcd_float(&lcd, current_reading);
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fa5e 	bl	800127c <Lcd_float>
 8001dc0:	e024      	b.n	8001e0c <main+0x994>
 8001dc2:	bf00      	nop
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	cccccccd 	.word	0xcccccccd
 8001dcc:	4000cccc 	.word	0x4000cccc
 8001dd0:	9999999a 	.word	0x9999999a
 8001dd4:	3fb99999 	.word	0x3fb99999
 8001dd8:	472ff500 	.word	0x472ff500
 8001ddc:	43fa0000 	.word	0x43fa0000
 8001de0:	471ff600 	.word	0x471ff600
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	0800a470 	.word	0x0800a470
 8001dec:	20000220 	.word	0x20000220
 8001df0:	1b4e81b5 	.word	0x1b4e81b5
 8001df4:	0800a474 	.word	0x0800a474
 8001df8:	41100000 	.word	0x41100000
 8001dfc:	41200000 	.word	0x41200000
		else
			Lcd_float(&lcd, current_avg);
 8001e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e04:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fa38 	bl	800127c <Lcd_float>

		// Transmiting to DAC
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //LDAC_bar is set while transmission
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e12:	4893      	ldr	r0, [pc, #588]	; (8002060 <main+0xbe8>)
 8001e14:	f001 fead 	bl	8003b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //CS_bar is transitioned to 0 just before transmission starts (falling edge)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e1e:	4891      	ldr	r0, [pc, #580]	; (8002064 <main+0xbec>)
 8001e20:	f001 fea7 	bl	8003b72 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, var, 2, 100); //Higher byte with 1st nibble as the config bits, 2nd one is the data
 8001e24:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001e28:	2364      	movs	r3, #100	; 0x64
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	488e      	ldr	r0, [pc, #568]	; (8002068 <main+0xbf0>)
 8001e2e:	f002 fcb9 	bl	80047a4 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); //CS_bar rising edge to signify end of transmission of data
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e38:	488a      	ldr	r0, [pc, #552]	; (8002064 <main+0xbec>)
 8001e3a:	f001 fe9a 	bl	8003b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // LDAC_bar falling edge when not transmitting
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	4886      	ldr	r0, [pc, #536]	; (8002060 <main+0xbe8>)
 8001e46:	f001 fe94 	bl	8003b72 <HAL_GPIO_WritePin>


		// UART (There is a function near the end of the, RxCplt check that out for more details)
		uint8_t Test[]={48,46,48,48, '\n', '\r'}; //Data to send
 8001e4a:	4a88      	ldr	r2, [pc, #544]	; (800206c <main+0xbf4>)
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e54:	6018      	str	r0, [r3, #0]
 8001e56:	3304      	adds	r3, #4
 8001e58:	8019      	strh	r1, [r3, #0]
		if (val_f==1){
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <main+0xbf8>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d150      	bne.n	8001f04 <main+0xa8c>
			// Converting numbers to ASCII
			Test[0]=48+current_reading/10*10;
 8001e62:	4984      	ldr	r1, [pc, #528]	; (8002074 <main+0xbfc>)
 8001e64:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e68:	f7ff f84a 	bl	8000f00 <__aeabi_fdiv>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4981      	ldr	r1, [pc, #516]	; (8002074 <main+0xbfc>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe ff91 	bl	8000d98 <__aeabi_fmul>
 8001e76:	4603      	mov	r3, r0
 8001e78:	497f      	ldr	r1, [pc, #508]	; (8002078 <main+0xc00>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fe84 	bl	8000b88 <__addsf3>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f94e 	bl	8001124 <__aeabi_f2uiz>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	773b      	strb	r3, [r7, #28]
			Test[2]=(10*current_reading);
 8001e8e:	4979      	ldr	r1, [pc, #484]	; (8002074 <main+0xbfc>)
 8001e90:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e94:	f7fe ff80 	bl	8000d98 <__aeabi_fmul>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f942 	bl	8001124 <__aeabi_f2uiz>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	77bb      	strb	r3, [r7, #30]
			Test[2]=48+Test[2]%10;
 8001ea6:	7fba      	ldrb	r2, [r7, #30]
 8001ea8:	4b74      	ldr	r3, [pc, #464]	; (800207c <main+0xc04>)
 8001eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001eae:	08d9      	lsrs	r1, r3, #3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3330      	adds	r3, #48	; 0x30
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	77bb      	strb	r3, [r7, #30]
			Test[3]=100*current_reading;
 8001ec2:	496f      	ldr	r1, [pc, #444]	; (8002080 <main+0xc08>)
 8001ec4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001ec8:	f7fe ff66 	bl	8000d98 <__aeabi_fmul>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f928 	bl	8001124 <__aeabi_f2uiz>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	77fb      	strb	r3, [r7, #31]
			Test[3]=48+Test[3]%10;
 8001eda:	7ffa      	ldrb	r2, [r7, #31]
 8001edc:	4b67      	ldr	r3, [pc, #412]	; (800207c <main+0xc04>)
 8001ede:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee2:	08d9      	lsrs	r1, r3, #3
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3330      	adds	r3, #48	; 0x30
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	77fb      	strb	r3, [r7, #31]
			HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);
 8001ef6:	f107 011c 	add.w	r1, r7, #28
 8001efa:	230a      	movs	r3, #10
 8001efc:	2206      	movs	r2, #6
 8001efe:	4861      	ldr	r0, [pc, #388]	; (8002084 <main+0xc0c>)
 8001f00:	f003 f8be 	bl	8005080 <HAL_UART_Transmit>
		}

		if ((wr_f==1) && (transfer_cplt==1)){
 8001f04:	4b60      	ldr	r3, [pc, #384]	; (8002088 <main+0xc10>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f47f ab42 	bne.w	8001592 <main+0x11a>
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <main+0xc14>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	f47f ab3d 	bne.w	8001592 <main+0x11a>
			// ASCII to numbers
			float c_set_dummy;
			c_set_dummy=(rx_buffer[0]-48)*100+(rx_buffer[2]-48)*10+(rx_buffer[3]-48);
 8001f18:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <main+0xc18>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	3b30      	subs	r3, #48	; 0x30
 8001f1e:	2264      	movs	r2, #100	; 0x64
 8001f20:	fb02 f103 	mul.w	r1, r2, r3
 8001f24:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <main+0xc18>)
 8001f26:	789b      	ldrb	r3, [r3, #2]
 8001f28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	18ca      	adds	r2, r1, r3
 8001f36:	4b56      	ldr	r3, [pc, #344]	; (8002090 <main+0xc18>)
 8001f38:	78db      	ldrb	r3, [r3, #3]
 8001f3a:	3b30      	subs	r3, #48	; 0x30
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fed6 	bl	8000cf0 <__aeabi_i2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	65bb      	str	r3, [r7, #88]	; 0x58
			transfer_cplt=0;
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <main+0xc14>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
			if ((rx_buffer[0]<52) && (rx_buffer[0]>47) && (rx_buffer[2]>47) && (rx_buffer[3]>47)){
 8001f4e:	4b50      	ldr	r3, [pc, #320]	; (8002090 <main+0xc18>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b33      	cmp	r3, #51	; 0x33
 8001f54:	f63f ab1d 	bhi.w	8001592 <main+0x11a>
 8001f58:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <main+0xc18>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8001f5e:	f67f ab18 	bls.w	8001592 <main+0x11a>
 8001f62:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <main+0xc18>)
 8001f64:	789b      	ldrb	r3, [r3, #2]
 8001f66:	2b2f      	cmp	r3, #47	; 0x2f
 8001f68:	f67f ab13 	bls.w	8001592 <main+0x11a>
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <main+0xc18>)
 8001f6e:	78db      	ldrb	r3, [r3, #3]
 8001f70:	2b2f      	cmp	r3, #47	; 0x2f
 8001f72:	f67f ab0e 	bls.w	8001592 <main+0x11a>
				current_set=c_set_dummy;
 8001f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				current_set=0.01*(current_set);
 8001f7c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f80:	f7fe fa5c 	bl	800043c <__aeabi_f2d>
 8001f84:	a330      	add	r3, pc, #192	; (adr r3, 8002048 <main+0xbd0>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe faaf 	bl	80004ec <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fda1 	bl	8000adc <__aeabi_d2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				if (current_set<1.1)
 8001fa0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fa4:	f7fe fa4a 	bl	800043c <__aeabi_f2d>
 8001fa8:	a329      	add	r3, pc, #164	; (adr r3, 8002050 <main+0xbd8>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fd0f 	bl	80009d0 <__aeabi_dcmplt>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <main+0xb66>
					current_v=4095*12*current_set/500;
 8001fb8:	4936      	ldr	r1, [pc, #216]	; (8002094 <main+0xc1c>)
 8001fba:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fbe:	f7fe feeb 	bl	8000d98 <__aeabi_fmul>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4934      	ldr	r1, [pc, #208]	; (8002098 <main+0xc20>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ff9a 	bl	8000f00 <__aeabi_fdiv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f8a8 	bl	8001124 <__aeabi_f2uiz>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001fda:	f7ff bada 	b.w	8001592 <main+0x11a>
				else if (current_set<2.1)
 8001fde:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fe2:	f7fe fa2b 	bl	800043c <__aeabi_f2d>
 8001fe6:	a31c      	add	r3, pc, #112	; (adr r3, 8002058 <main+0xbe0>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fcf0 	bl	80009d0 <__aeabi_dcmplt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <main+0xba4>
					current_v=4095*11*current_set/500;
 8001ff6:	4929      	ldr	r1, [pc, #164]	; (800209c <main+0xc24>)
 8001ff8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001ffc:	f7fe fecc 	bl	8000d98 <__aeabi_fmul>
 8002000:	4603      	mov	r3, r0
 8002002:	4925      	ldr	r1, [pc, #148]	; (8002098 <main+0xc20>)
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe ff7b 	bl	8000f00 <__aeabi_fdiv>
 800200a:	4603      	mov	r3, r0
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f889 	bl	8001124 <__aeabi_f2uiz>
 8002012:	4603      	mov	r3, r0
 8002014:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002018:	f7ff babb 	b.w	8001592 <main+0x11a>
				else
					current_v=4095*10*current_set/500;
 800201c:	4920      	ldr	r1, [pc, #128]	; (80020a0 <main+0xc28>)
 800201e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002022:	f7fe feb9 	bl	8000d98 <__aeabi_fmul>
 8002026:	4603      	mov	r3, r0
 8002028:	491b      	ldr	r1, [pc, #108]	; (8002098 <main+0xc20>)
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff68 	bl	8000f00 <__aeabi_fdiv>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f876 	bl	8001124 <__aeabi_f2uiz>
 8002038:	4603      	mov	r3, r0
 800203a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	{
 800203e:	f7ff baa8 	b.w	8001592 <main+0x11a>
 8002042:	bf00      	nop
 8002044:	f3af 8000 	nop.w
 8002048:	47ae147b 	.word	0x47ae147b
 800204c:	3f847ae1 	.word	0x3f847ae1
 8002050:	9999999a 	.word	0x9999999a
 8002054:	3ff19999 	.word	0x3ff19999
 8002058:	cccccccd 	.word	0xcccccccd
 800205c:	4000cccc 	.word	0x4000cccc
 8002060:	40010800 	.word	0x40010800
 8002064:	40010c00 	.word	0x40010c00
 8002068:	20000250 	.word	0x20000250
 800206c:	0800a490 	.word	0x0800a490
 8002070:	200003a9 	.word	0x200003a9
 8002074:	41200000 	.word	0x41200000
 8002078:	42400000 	.word	0x42400000
 800207c:	cccccccd 	.word	0xcccccccd
 8002080:	42c80000 	.word	0x42c80000
 8002084:	200002f0 	.word	0x200002f0
 8002088:	200003aa 	.word	0x200003aa
 800208c:	200003a8 	.word	0x200003a8
 8002090:	20000344 	.word	0x20000344
 8002094:	473ff400 	.word	0x473ff400
 8002098:	43fa0000 	.word	0x43fa0000
 800209c:	472ff500 	.word	0x472ff500
 80020a0:	471ff600 	.word	0x471ff600

080020a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b094      	sub	sp, #80	; 0x50
 80020a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ae:	2228      	movs	r2, #40	; 0x28
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f004 fd9d 	bl	8006bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020d4:	2302      	movs	r3, #2
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d8:	2301      	movs	r3, #1
 80020da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020dc:	2310      	movs	r3, #16
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e0:	2302      	movs	r3, #2
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80020e4:	2300      	movs	r3, #0
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fd56 	bl	8003ba4 <HAL_RCC_OscConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80020fe:	f000 fa61 	bl	80025c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002102:	230f      	movs	r3, #15
 8002104:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800210e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002112:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f001 ffc2 	bl	80040a8 <HAL_RCC_ClockConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800212a:	f000 fa4b 	bl	80025c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800212e:	2302      	movs	r3, #2
 8002130:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002136:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	4618      	mov	r0, r3
 800213c:	f002 f942 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002146:	f000 fa3d 	bl	80025c4 <Error_Handler>
  }
}
 800214a:	bf00      	nop
 800214c:	3750      	adds	r7, #80	; 0x50
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002164:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <MX_ADC1_Init+0x74>)
 8002166:	4a19      	ldr	r2, [pc, #100]	; (80021cc <MX_ADC1_Init+0x78>)
 8002168:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <MX_ADC1_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <MX_ADC1_Init+0x74>)
 8002172:	2201      	movs	r2, #1
 8002174:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <MX_ADC1_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_ADC1_Init+0x74>)
 800217e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <MX_ADC1_Init+0x74>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_ADC1_Init+0x74>)
 800218c:	2201      	movs	r2, #1
 800218e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <MX_ADC1_Init+0x74>)
 8002192:	f000 fd3b 	bl	8002c0c <HAL_ADC_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800219c:	f000 fa12 	bl	80025c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80021a0:	2304      	movs	r3, #4
 80021a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_ADC1_Init+0x74>)
 80021b2:	f000 ffef 	bl	8003194 <HAL_ADC_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80021bc:	f000 fa02 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200001f0 	.word	0x200001f0
 80021cc:	40012400 	.word	0x40012400

080021d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <MX_ADC2_Init+0x74>)
 80021e2:	4a19      	ldr	r2, [pc, #100]	; (8002248 <MX_ADC2_Init+0x78>)
 80021e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_ADC2_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_ADC2_Init+0x74>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_ADC2_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_ADC2_Init+0x74>)
 80021fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80021fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_ADC2_Init+0x74>)
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_ADC2_Init+0x74>)
 8002208:	2201      	movs	r2, #1
 800220a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <MX_ADC2_Init+0x74>)
 800220e:	f000 fcfd 	bl	8002c0c <HAL_ADC_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002218:	f000 f9d4 	bl	80025c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800221c:	2300      	movs	r3, #0
 800221e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002220:	2301      	movs	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_ADC2_Init+0x74>)
 800222e:	f000 ffb1 	bl	8003194 <HAL_ADC_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002238:	f000 f9c4 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000220 	.word	0x20000220
 8002248:	40012800 	.word	0x40012800

0800224c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <MX_SPI1_Init+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800225c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_SPI1_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_SPI1_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002298:	220a      	movs	r2, #10
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <MX_SPI1_Init+0x64>)
 800229e:	f002 f9fd 	bl	800469c <HAL_SPI_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022a8:	f000 f98c 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000250 	.word	0x20000250
 80022b4:	40013000 	.word	0x40013000

080022b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 fc93 	bl	8006bf2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <MX_TIM3_Init+0xa0>)
 80022d6:	4a21      	ldr	r2, [pc, #132]	; (800235c <MX_TIM3_Init+0xa4>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <MX_TIM3_Init+0xa0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_TIM3_Init+0xa0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 301;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <MX_TIM3_Init+0xa0>)
 80022e8:	f240 122d 	movw	r2, #301	; 0x12d
 80022ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_TIM3_Init+0xa0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <MX_TIM3_Init+0xa0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002312:	2301      	movs	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	4619      	mov	r1, r3
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <MX_TIM3_Init+0xa0>)
 8002326:	f002 fc27 	bl	8004b78 <HAL_TIM_Encoder_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002330:	f000 f948 	bl	80025c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_TIM3_Init+0xa0>)
 8002342:	f002 fdef 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800234c:	f000 f93a 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	3730      	adds	r7, #48	; 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200002a8 	.word	0x200002a8
 800235c:	40000400 	.word	0x40000400

08002360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <MX_USART2_UART_Init+0x50>)
 8002368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002398:	f002 fe22 	bl	8004fe0 <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023a2:	f000 f90f 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200002f0 	.word	0x200002f0
 80023b0:	40004400 	.word	0x40004400

080023b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a27      	ldr	r2, [pc, #156]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a21      	ldr	r2, [pc, #132]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023fe:	f043 0310 	orr.w	r3, r3, #16
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_GPIO_Init+0xd0>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	f240 5142 	movw	r1, #1346	; 0x542
 8002416:	481c      	ldr	r0, [pc, #112]	; (8002488 <MX_GPIO_Init+0xd4>)
 8002418:	f001 fbab 	bl	8003b72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8002422:	481a      	ldr	r0, [pc, #104]	; (800248c <MX_GPIO_Init+0xd8>)
 8002424:	f001 fba5 	bl	8003b72 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA6 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10;
 8002428:	f240 5342 	movw	r3, #1346	; 0x542
 800242c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2302      	movs	r3, #2
 8002438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	4619      	mov	r1, r3
 8002440:	4811      	ldr	r0, [pc, #68]	; (8002488 <MX_GPIO_Init+0xd4>)
 8002442:	f001 f9fb 	bl	800383c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002446:	2301      	movs	r3, #1
 8002448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4619      	mov	r1, r3
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <MX_GPIO_Init+0xd8>)
 800245a:	f001 f9ef 	bl	800383c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
 800245e:	f44f 735c 	mov.w	r3, #880	; 0x370
 8002462:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2302      	movs	r3, #2
 800246e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4619      	mov	r1, r3
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_GPIO_Init+0xd8>)
 8002478:	f001 f9e0 	bl	800383c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	40010800 	.word	0x40010800
 800248c:	40010c00 	.word	0x40010c00

08002490 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8002498:	2201      	movs	r2, #1
 800249a:	493e      	ldr	r1, [pc, #248]	; (8002594 <HAL_UART_RxCpltCallback+0x104>)
 800249c:	483e      	ldr	r0, [pc, #248]	; (8002598 <HAL_UART_RxCpltCallback+0x108>)
 800249e:	f002 fe72 	bl	8005186 <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart2, rx_data, 6, 100);
	if (rx_indx==0){
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_UART_RxCpltCallback+0x10c>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_UART_RxCpltCallback+0x38>
		uint8_t i=0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
		for (i=0; i<100; i++){
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e006      	b.n	80024c2 <HAL_UART_RxCpltCallback+0x32>
			rx_buffer[i]=0;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 80024b8:	2100      	movs	r1, #0
 80024ba:	54d1      	strb	r1, [r2, r3]
		for (i=0; i<100; i++){
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	3301      	adds	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b63      	cmp	r3, #99	; 0x63
 80024c6:	d9f5      	bls.n	80024b4 <HAL_UART_RxCpltCallback+0x24>
		}
	}

	if (rx_data[0] != 13){ // 13 is newline character (\r)
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_UART_RxCpltCallback+0x104>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b0d      	cmp	r3, #13
 80024ce:	d00b      	beq.n	80024e8 <HAL_UART_RxCpltCallback+0x58>
		rx_buffer[rx_indx++]= rx_data[0];
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_UART_RxCpltCallback+0x10c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	b2d1      	uxtb	r1, r2
 80024d8:	4a30      	ldr	r2, [pc, #192]	; (800259c <HAL_UART_RxCpltCallback+0x10c>)
 80024da:	7011      	strb	r1, [r2, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_UART_RxCpltCallback+0x104>)
 80024e0:	7819      	ldrb	r1, [r3, #0]
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 80024e4:	5499      	strb	r1, [r3, r2]
		}
	}



}
 80024e6:	e051      	b.n	800258c <HAL_UART_RxCpltCallback+0xfc>
		rx_indx=0;
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_UART_RxCpltCallback+0x10c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
		transfer_cplt=1;
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_UART_RxCpltCallback+0x114>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 80024f4:	2364      	movs	r3, #100	; 0x64
 80024f6:	2202      	movs	r2, #2
 80024f8:	492b      	ldr	r1, [pc, #172]	; (80025a8 <HAL_UART_RxCpltCallback+0x118>)
 80024fa:	4827      	ldr	r0, [pc, #156]	; (8002598 <HAL_UART_RxCpltCallback+0x108>)
 80024fc:	f002 fdc0 	bl	8005080 <HAL_UART_Transmit>
		if (!strcmp(rx_buffer, "read")){
 8002500:	492a      	ldr	r1, [pc, #168]	; (80025ac <HAL_UART_RxCpltCallback+0x11c>)
 8002502:	4827      	ldr	r0, [pc, #156]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 8002504:	f7fd fe24 	bl	8000150 <strcmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <HAL_UART_RxCpltCallback+0x86>
			val_f=1;
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_UART_RxCpltCallback+0x120>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
}
 8002514:	e03a      	b.n	800258c <HAL_UART_RxCpltCallback+0xfc>
		else if (!strcmp(rx_buffer, "stop read")){
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_UART_RxCpltCallback+0x124>)
 8002518:	4821      	ldr	r0, [pc, #132]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 800251a:	f7fd fe19 	bl	8000150 <strcmp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <HAL_UART_RxCpltCallback+0x9c>
			val_f=0;
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_UART_RxCpltCallback+0x120>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
}
 800252a:	e02f      	b.n	800258c <HAL_UART_RxCpltCallback+0xfc>
		else if (!strcmp(rx_buffer, "write")){
 800252c:	4922      	ldr	r1, [pc, #136]	; (80025b8 <HAL_UART_RxCpltCallback+0x128>)
 800252e:	481c      	ldr	r0, [pc, #112]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 8002530:	f7fd fe0e 	bl	8000150 <strcmp>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11e      	bne.n	8002578 <HAL_UART_RxCpltCallback+0xe8>
			wr_f=1;
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_UART_RxCpltCallback+0x12c>)
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
			uint8_t i=0;
 8002540:	2300      	movs	r3, #0
 8002542:	73bb      	strb	r3, [r7, #14]
			for (i=0; i<100; i++){
 8002544:	2300      	movs	r3, #0
 8002546:	73bb      	strb	r3, [r7, #14]
 8002548:	e006      	b.n	8002558 <HAL_UART_RxCpltCallback+0xc8>
				rx_buffer[i]=0;
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 800254e:	2100      	movs	r1, #0
 8002550:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<100; i++){
 8002552:	7bbb      	ldrb	r3, [r7, #14]
 8002554:	3301      	adds	r3, #1
 8002556:	73bb      	strb	r3, [r7, #14]
 8002558:	7bbb      	ldrb	r3, [r7, #14]
 800255a:	2b63      	cmp	r3, #99	; 0x63
 800255c:	d9f5      	bls.n	800254a <HAL_UART_RxCpltCallback+0xba>
			rx_buffer[0]=48;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 8002560:	2230      	movs	r2, #48	; 0x30
 8002562:	701a      	strb	r2, [r3, #0]
			rx_buffer[1]=46;
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 8002566:	222e      	movs	r2, #46	; 0x2e
 8002568:	705a      	strb	r2, [r3, #1]
			rx_buffer[2]=48;
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 800256c:	2230      	movs	r2, #48	; 0x30
 800256e:	709a      	strb	r2, [r3, #2]
			rx_buffer[3]=48;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 8002572:	2230      	movs	r2, #48	; 0x30
 8002574:	70da      	strb	r2, [r3, #3]
}
 8002576:	e009      	b.n	800258c <HAL_UART_RxCpltCallback+0xfc>
		else if (!strcmp(rx_buffer, "stop write")){
 8002578:	4911      	ldr	r1, [pc, #68]	; (80025c0 <HAL_UART_RxCpltCallback+0x130>)
 800257a:	4809      	ldr	r0, [pc, #36]	; (80025a0 <HAL_UART_RxCpltCallback+0x110>)
 800257c:	f7fd fde8 	bl	8000150 <strcmp>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_UART_RxCpltCallback+0xfc>
			wr_f=0;
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_UART_RxCpltCallback+0x12c>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	2000033c 	.word	0x2000033c
 8002598:	200002f0 	.word	0x200002f0
 800259c:	20000338 	.word	0x20000338
 80025a0:	20000344 	.word	0x20000344
 80025a4:	200003a8 	.word	0x200003a8
 80025a8:	0800a498 	.word	0x0800a498
 80025ac:	0800a49c 	.word	0x0800a49c
 80025b0:	200003a9 	.word	0x200003a9
 80025b4:	0800a4a4 	.word	0x0800a4a4
 80025b8:	0800a4b0 	.word	0x0800a4b0
 80025bc:	200003aa 	.word	0x200003aa
 80025c0:	0800a4b8 	.word	0x0800a4b8

080025c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c8:	b672      	cpsid	i
}
 80025ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025cc:	e7fe      	b.n	80025cc <Error_Handler+0x8>
	...

080025d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_MspInit+0x5c>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <HAL_MspInit+0x5c>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6193      	str	r3, [r2, #24]
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_MspInit+0x5c>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_MspInit+0x5c>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_MspInit+0x5c>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	61d3      	str	r3, [r2, #28]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_MspInit+0x5c>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_MspInit+0x60>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_MspInit+0x60>)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40021000 	.word	0x40021000
 8002630:	40010000 	.word	0x40010000

08002634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <HAL_ADC_MspInit+0xbc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d122      	bne.n	800269a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265e:	6193      	str	r3, [r2, #24]
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002684:	2310      	movs	r3, #16
 8002686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	2303      	movs	r3, #3
 800268a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 0318 	add.w	r3, r7, #24
 8002690:	4619      	mov	r1, r3
 8002692:	4819      	ldr	r0, [pc, #100]	; (80026f8 <HAL_ADC_MspInit+0xc4>)
 8002694:	f001 f8d2 	bl	800383c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002698:	e026      	b.n	80026e8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_ADC_MspInit+0xc8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d121      	bne.n	80026e8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_ADC_MspInit+0xc0>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d4:	2301      	movs	r3, #1
 80026d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d8:	2303      	movs	r3, #3
 80026da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	4619      	mov	r1, r3
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <HAL_ADC_MspInit+0xc4>)
 80026e4:	f001 f8aa 	bl	800383c <HAL_GPIO_Init>
}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40012400 	.word	0x40012400
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010800 	.word	0x40010800
 80026fc:	40012800 	.word	0x40012800

08002700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_SPI_MspInit+0x70>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d123      	bne.n	8002768 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_SPI_MspInit+0x74>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a13      	ldr	r2, [pc, #76]	; (8002774 <HAL_SPI_MspInit+0x74>)
 8002726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_SPI_MspInit+0x74>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_SPI_MspInit+0x74>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_SPI_MspInit+0x74>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_SPI_MspInit+0x74>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002750:	23a0      	movs	r3, #160	; 0xa0
 8002752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <HAL_SPI_MspInit+0x78>)
 8002764:	f001 f86a 	bl	800383c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40013000 	.word	0x40013000
 8002774:	40021000 	.word	0x40021000
 8002778:	40010800 	.word	0x40010800

0800277c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <HAL_TIM_Encoder_MspInit+0x94>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d135      	bne.n	8002808 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_TIM_Encoder_MspInit+0x98>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_TIM_Encoder_MspInit+0x98>)
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	61d3      	str	r3, [r2, #28]
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_TIM_Encoder_MspInit+0x98>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_TIM_Encoder_MspInit+0x98>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_TIM_Encoder_MspInit+0x98>)
 80027ba:	f043 0310 	orr.w	r3, r3, #16
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_TIM_Encoder_MspInit+0x98>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027cc:	23c0      	movs	r3, #192	; 0xc0
 80027ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	480e      	ldr	r0, [pc, #56]	; (8002818 <HAL_TIM_Encoder_MspInit+0x9c>)
 80027e0:	f001 f82c 	bl	800383c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_TIM_Encoder_MspInit+0xa0>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	4a06      	ldr	r2, [pc, #24]	; (800281c <HAL_TIM_Encoder_MspInit+0xa0>)
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	; 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40000400 	.word	0x40000400
 8002814:	40021000 	.word	0x40021000
 8002818:	40011000 	.word	0x40011000
 800281c:	40010000 	.word	0x40010000

08002820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_UART_MspInit+0x98>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d137      	bne.n	80028b0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_UART_MspInit+0x9c>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_UART_MspInit+0x9c>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284a:	61d3      	str	r3, [r2, #28]
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_UART_MspInit+0x9c>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_UART_MspInit+0x9c>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_UART_MspInit+0x9c>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_UART_MspInit+0x9c>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002870:	2304      	movs	r3, #4
 8002872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4619      	mov	r1, r3
 8002882:	480f      	ldr	r0, [pc, #60]	; (80028c0 <HAL_UART_MspInit+0xa0>)
 8002884:	f000 ffda 	bl	800383c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002888:	2308      	movs	r3, #8
 800288a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	4619      	mov	r1, r3
 800289a:	4809      	ldr	r0, [pc, #36]	; (80028c0 <HAL_UART_MspInit+0xa0>)
 800289c:	f000 ffce 	bl	800383c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	2026      	movs	r0, #38	; 0x26
 80028a6:	f000 fee0 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028aa:	2026      	movs	r0, #38	; 0x26
 80028ac:	f000 fef9 	bl	80036a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40004400 	.word	0x40004400
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010800 	.word	0x40010800

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c8:	e7fe      	b.n	80028c8 <NMI_Handler+0x4>

080028ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler+0x4>

080028d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800290a:	f000 f93f 	bl	8002b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <USART2_IRQHandler+0x10>)
 800291a:	f002 fc59 	bl	80051d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200002f0 	.word	0x200002f0

08002928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return 1;
 800292c:	2301      	movs	r3, #1
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <_kill>:

int _kill(int pid, int sig)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002940:	f004 f9aa 	bl	8006c98 <__errno>
 8002944:	4603      	mov	r3, r0
 8002946:	2216      	movs	r2, #22
 8002948:	601a      	str	r2, [r3, #0]
  return -1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <_exit>:

void _exit (int status)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800295e:	f04f 31ff 	mov.w	r1, #4294967295
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffe7 	bl	8002936 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002968:	e7fe      	b.n	8002968 <_exit+0x12>

0800296a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e00a      	b.n	8002992 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800297c:	f3af 8000 	nop.w
 8002980:	4601      	mov	r1, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	60ba      	str	r2, [r7, #8]
 8002988:	b2ca      	uxtb	r2, r1
 800298a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3301      	adds	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	429a      	cmp	r2, r3
 8002998:	dbf0      	blt.n	800297c <_read+0x12>
  }

  return len;
 800299a:	687b      	ldr	r3, [r7, #4]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e009      	b.n	80029ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	60ba      	str	r2, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	dbf1      	blt.n	80029b6 <_write+0x12>
  }
  return len;
 80029d2:	687b      	ldr	r3, [r7, #4]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_close>:

int _close(int file)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a02:	605a      	str	r2, [r3, #4]
  return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <_isatty>:

int _isatty(int file)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <_sbrk+0x5c>)
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <_sbrk+0x60>)
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <_sbrk+0x64>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <_sbrk+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d207      	bcs.n	8002a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a6c:	f004 f914 	bl	8006c98 <__errno>
 8002a70:	4603      	mov	r3, r0
 8002a72:	220c      	movs	r2, #12
 8002a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	e009      	b.n	8002a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <_sbrk+0x64>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <_sbrk+0x64>)
 8002a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20005000 	.word	0x20005000
 8002a9c:	00000400 	.word	0x00000400
 8002aa0:	200003ac 	.word	0x200003ac
 8002aa4:	20000500 	.word	0x20000500

08002aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ab4:	f7ff fff8 	bl	8002aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab8:	480b      	ldr	r0, [pc, #44]	; (8002ae8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002aba:	490c      	ldr	r1, [pc, #48]	; (8002aec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002abc:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac0:	e002      	b.n	8002ac8 <LoopCopyDataInit>

08002ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac6:	3304      	adds	r3, #4

08002ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002acc:	d3f9      	bcc.n	8002ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ad0:	4c09      	ldr	r4, [pc, #36]	; (8002af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad4:	e001      	b.n	8002ada <LoopFillZerobss>

08002ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad8:	3204      	adds	r2, #4

08002ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002adc:	d3fb      	bcc.n	8002ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ade:	f004 f8e1 	bl	8006ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ae2:	f7fe fcc9 	bl	8001478 <main>
  bx lr
 8002ae6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002af0:	0800a938 	.word	0x0800a938
  ldr r2, =_sbss
 8002af4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002af8:	20000500 	.word	0x20000500

08002afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC1_2_IRQHandler>
	...

08002b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_Init+0x28>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_Init+0x28>)
 8002b0a:	f043 0310 	orr.w	r3, r3, #16
 8002b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b10:	2003      	movs	r0, #3
 8002b12:	f000 fd9f 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f000 f808 	bl	8002b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1c:	f7ff fd58 	bl	80025d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40022000 	.word	0x40022000

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_InitTick+0x54>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_InitTick+0x58>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fdb7 	bl	80036be <HAL_SYSTICK_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00e      	b.n	8002b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b0f      	cmp	r3, #15
 8002b5e:	d80a      	bhi.n	8002b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b60:	2200      	movs	r2, #0
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f000 fd7f 	bl	800366a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <HAL_InitTick+0x5c>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000008 	.word	0x20000008
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_IncTick+0x1c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_IncTick+0x20>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a03      	ldr	r2, [pc, #12]	; (8002bac <HAL_IncTick+0x20>)
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	20000008 	.word	0x20000008
 8002bac:	200003b0 	.word	0x200003b0

08002bb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <HAL_GetTick+0x10>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	200003b0 	.word	0x200003b0

08002bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff fff0 	bl	8002bb0 <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d005      	beq.n	8002bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_Delay+0x44>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bea:	bf00      	nop
 8002bec:	f7ff ffe0 	bl	8002bb0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d8f7      	bhi.n	8002bec <HAL_Delay+0x28>
  {
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000008 	.word	0x20000008

08002c0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0be      	b.n	8002dac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fcf2 	bl	8002634 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fbf1 	bl	8003438 <ADC_ConversionStop_Disable>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 8099 	bne.w	8002d9a <HAL_ADC_Init+0x18e>
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8095 	bne.w	8002d9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c78:	f023 0302 	bic.w	r3, r3, #2
 8002c7c:	f043 0202 	orr.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7b1b      	ldrb	r3, [r3, #12]
 8002c92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca4:	d003      	beq.n	8002cae <HAL_ADC_Init+0xa2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d102      	bne.n	8002cb4 <HAL_ADC_Init+0xa8>
 8002cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb2:	e000      	b.n	8002cb6 <HAL_ADC_Init+0xaa>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7d1b      	ldrb	r3, [r3, #20]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d119      	bne.n	8002cf8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7b1b      	ldrb	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	035a      	lsls	r2, r3, #13
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e00b      	b.n	8002cf8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_ADC_Init+0x1a8>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d28:	d003      	beq.n	8002d32 <HAL_ADC_Init+0x126>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d104      	bne.n	8002d3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	051b      	lsls	r3, r3, #20
 8002d3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <HAL_ADC_Init+0x1ac>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d76:	e018      	b.n	8002daa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f023 0312 	bic.w	r3, r3, #18
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d98:	e007      	b.n	8002daa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	ffe1f7fd 	.word	0xffe1f7fd
 8002db8:	ff1f0efe 	.word	0xff1f0efe

08002dbc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_Start+0x1a>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e098      	b.n	8002f08 <HAL_ADC_Start+0x14c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fad0 	bl	8003384 <ADC_Enable>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 8087 	bne.w	8002efe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a41      	ldr	r2, [pc, #260]	; (8002f10 <HAL_ADC_Start+0x154>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d105      	bne.n	8002e1a <HAL_ADC_Start+0x5e>
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_ADC_Start+0x158>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d115      	bne.n	8002e46 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d026      	beq.n	8002e82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e44:	e01d      	b.n	8002e82 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2f      	ldr	r2, [pc, #188]	; (8002f14 <HAL_ADC_Start+0x158>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_Start+0xaa>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <HAL_ADC_Start+0x154>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10d      	bne.n	8002e82 <HAL_ADC_Start+0xc6>
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_ADC_Start+0x158>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f023 0206 	bic.w	r2, r3, #6
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e9a:	e002      	b.n	8002ea2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f06f 0202 	mvn.w	r2, #2
 8002eb2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ebe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ec2:	d113      	bne.n	8002eec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_ADC_Start+0x154>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d105      	bne.n	8002eda <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_ADC_Start+0x158>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	e00c      	b.n	8002f06 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	e003      	b.n	8002f06 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40012800 	.word	0x40012800
 8002f14:	40012400 	.word	0x40012400

08002f18 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_Stop+0x1a>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e01a      	b.n	8002f68 <HAL_ADC_Stop+0x50>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa7c 	bl	8003438 <ADC_ConversionStop_Disable>
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f86:	f7ff fe13 	bl	8002bb0 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0d3      	b.n	800315a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d131      	bne.n	8003024 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d12a      	bne.n	8003024 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fce:	e021      	b.n	8003014 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d01d      	beq.n	8003014 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_ADC_PollForConversion+0x7e>
 8002fde:	f7ff fde7 	bl	8002bb0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d212      	bcs.n	8003014 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0a2      	b.n	800315a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0d6      	beq.n	8002fd0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003022:	e070      	b.n	8003106 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003024:	4b4f      	ldr	r3, [pc, #316]	; (8003164 <HAL_ADC_PollForConversion+0x1f4>)
 8003026:	681c      	ldr	r4, [r3, #0]
 8003028:	2002      	movs	r0, #2
 800302a:	f001 fa81 	bl	8004530 <HAL_RCCEx_GetPeriphCLKFreq>
 800302e:	4603      	mov	r3, r0
 8003030:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <HAL_ADC_PollForConversion+0x1f8>)
 800303c:	400b      	ands	r3, r1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_ADC_PollForConversion+0x104>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	4b48      	ldr	r3, [pc, #288]	; (800316c <HAL_ADC_PollForConversion+0x1fc>)
 800304a:	400b      	ands	r3, r1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_ADC_PollForConversion+0x104>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_ADC_PollForConversion+0x200>)
 8003058:	400b      	ands	r3, r1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_ADC_PollForConversion+0x100>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68d9      	ldr	r1, [r3, #12]
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_ADC_PollForConversion+0x204>)
 8003066:	400b      	ands	r3, r1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_PollForConversion+0x100>
 800306c:	2314      	movs	r3, #20
 800306e:	e020      	b.n	80030b2 <HAL_ADC_PollForConversion+0x142>
 8003070:	2329      	movs	r3, #41	; 0x29
 8003072:	e01e      	b.n	80030b2 <HAL_ADC_PollForConversion+0x142>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6919      	ldr	r1, [r3, #16]
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_ADC_PollForConversion+0x200>)
 800307c:	400b      	ands	r3, r1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_ADC_PollForConversion+0x120>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68d9      	ldr	r1, [r3, #12]
 8003088:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <HAL_ADC_PollForConversion+0x204>)
 800308a:	400b      	ands	r3, r1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <HAL_ADC_PollForConversion+0x13c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6919      	ldr	r1, [r3, #16]
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_ADC_PollForConversion+0x208>)
 8003098:	400b      	ands	r3, r1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x140>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_ADC_PollForConversion+0x208>)
 80030a6:	400b      	ands	r3, r1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x140>
 80030ac:	2354      	movs	r3, #84	; 0x54
 80030ae:	e000      	b.n	80030b2 <HAL_ADC_PollForConversion+0x142>
 80030b0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030b8:	e021      	b.n	80030fe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d01a      	beq.n	80030f8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_ADC_PollForConversion+0x168>
 80030c8:	f7ff fd72 	bl	8002bb0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d20f      	bcs.n	80030f8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d90b      	bls.n	80030f8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e030      	b.n	800315a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d8d9      	bhi.n	80030ba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0212 	mvn.w	r2, #18
 800310e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003126:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800312a:	d115      	bne.n	8003158 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd90      	pop	{r4, r7, pc}
 8003162:	bf00      	nop
 8003164:	20000000 	.word	0x20000000
 8003168:	24924924 	.word	0x24924924
 800316c:	00924924 	.word	0x00924924
 8003170:	12492492 	.word	0x12492492
 8003174:	00492492 	.word	0x00492492
 8003178:	00249249 	.word	0x00249249

0800317c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x20>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0dc      	b.n	800336e <HAL_ADC_ConfigChannel+0x1da>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b06      	cmp	r3, #6
 80031c2:	d81c      	bhi.n	80031fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b05      	subs	r3, #5
 80031d6:	221f      	movs	r2, #31
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4019      	ands	r1, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b05      	subs	r3, #5
 80031f0:	fa00 f203 	lsl.w	r2, r0, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34
 80031fc:	e03c      	b.n	8003278 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d81c      	bhi.n	8003240 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	3b23      	subs	r3, #35	; 0x23
 8003218:	221f      	movs	r2, #31
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	4019      	ands	r1, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b23      	subs	r3, #35	; 0x23
 8003232:	fa00 f203 	lsl.w	r2, r0, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
 800323e:	e01b      	b.n	8003278 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	3b41      	subs	r3, #65	; 0x41
 8003252:	221f      	movs	r2, #31
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	4019      	ands	r1, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	3b41      	subs	r3, #65	; 0x41
 800326c:	fa00 f203 	lsl.w	r2, r0, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b09      	cmp	r3, #9
 800327e:	d91c      	bls.n	80032ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68d9      	ldr	r1, [r3, #12]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	3b1e      	subs	r3, #30
 8003292:	2207      	movs	r2, #7
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	4019      	ands	r1, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6898      	ldr	r0, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	3b1e      	subs	r3, #30
 80032ac:	fa00 f203 	lsl.w	r2, r0, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	e019      	b.n	80032ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6919      	ldr	r1, [r3, #16]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	2207      	movs	r2, #7
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	4019      	ands	r1, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6898      	ldr	r0, [r3, #8]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d003      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032fa:	2b11      	cmp	r3, #17
 80032fc:	d132      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_ADC_ConfigChannel+0x1e4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d125      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d126      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003324:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b10      	cmp	r3, #16
 800332c:	d11a      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_ADC_ConfigChannel+0x1e8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a13      	ldr	r2, [pc, #76]	; (8003380 <HAL_ADC_ConfigChannel+0x1ec>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9a      	lsrs	r2, r3, #18
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003344:	e002      	b.n	800334c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3b01      	subs	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f9      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x1b2>
 8003352:	e007      	b.n	8003364 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	40012400 	.word	0x40012400
 800337c:	20000000 	.word	0x20000000
 8003380:	431bde83 	.word	0x431bde83

08003384 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d040      	beq.n	8003424 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033b2:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <ADC_Enable+0xac>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <ADC_Enable+0xb0>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0c9b      	lsrs	r3, r3, #18
 80033be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033c0:	e002      	b.n	80033c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f9      	bne.n	80033c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ce:	f7ff fbef 	bl	8002bb0 <HAL_GetTick>
 80033d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033d4:	e01f      	b.n	8003416 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d6:	f7ff fbeb 	bl	8002bb0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d918      	bls.n	8003416 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d011      	beq.n	8003416 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e007      	b.n	8003426 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d1d8      	bne.n	80033d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000
 8003434:	431bde83 	.word	0x431bde83

08003438 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d12e      	bne.n	80034b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003462:	f7ff fba5 	bl	8002bb0 <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003468:	e01b      	b.n	80034a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800346a:	f7ff fba1 	bl	8002bb0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d914      	bls.n	80034a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10d      	bne.n	80034a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e007      	b.n	80034b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d0dc      	beq.n	800346a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4906      	ldr	r1, [pc, #24]	; (8003554 <__NVIC_EnableIRQ+0x34>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	; (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
         );
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003620:	d301      	bcc.n	8003626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003622:	2301      	movs	r3, #1
 8003624:	e00f      	b.n	8003646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <SysTick_Config+0x40>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362e:	210f      	movs	r1, #15
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f7ff ff90 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <SysTick_Config+0x40>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <SysTick_Config+0x40>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000e010 	.word	0xe000e010

08003654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff2d 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800367c:	f7ff ff42 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f7ff ff90 	bl	80035ac <NVIC_EncodePriority>
 800368c:	4602      	mov	r2, r0
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff5f 	bl	8003558 <__NVIC_SetPriority>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff35 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ffa2 	bl	8003610 <SysTick_Config>
 80036cc:	4603      	mov	r3, r0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d008      	beq.n	8003700 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2204      	movs	r2, #4
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e020      	b.n	8003742 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 020e 	bic.w	r2, r2, #14
 800370e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d005      	beq.n	8003770 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e051      	b.n	8003814 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 020e 	bic.w	r2, r2, #14
 800377e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_DMA_Abort_IT+0xd4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d029      	beq.n	80037ee <HAL_DMA_Abort_IT+0xa2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_DMA_Abort_IT+0xd8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_Abort_IT+0x9e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <HAL_DMA_Abort_IT+0xdc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01a      	beq.n	80037e4 <HAL_DMA_Abort_IT+0x98>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_DMA_Abort_IT+0xe0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d012      	beq.n	80037de <HAL_DMA_Abort_IT+0x92>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <HAL_DMA_Abort_IT+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00a      	beq.n	80037d8 <HAL_DMA_Abort_IT+0x8c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_DMA_Abort_IT+0xe8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d102      	bne.n	80037d2 <HAL_DMA_Abort_IT+0x86>
 80037cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037d0:	e00e      	b.n	80037f0 <HAL_DMA_Abort_IT+0xa4>
 80037d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d6:	e00b      	b.n	80037f0 <HAL_DMA_Abort_IT+0xa4>
 80037d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037dc:	e008      	b.n	80037f0 <HAL_DMA_Abort_IT+0xa4>
 80037de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e2:	e005      	b.n	80037f0 <HAL_DMA_Abort_IT+0xa4>
 80037e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e8:	e002      	b.n	80037f0 <HAL_DMA_Abort_IT+0xa4>
 80037ea:	2310      	movs	r3, #16
 80037ec:	e000      	b.n	80037f0 <HAL_DMA_Abort_IT+0xa4>
 80037ee:	2301      	movs	r3, #1
 80037f0:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_DMA_Abort_IT+0xec>)
 80037f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
    } 
  }
  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40020008 	.word	0x40020008
 8003824:	4002001c 	.word	0x4002001c
 8003828:	40020030 	.word	0x40020030
 800382c:	40020044 	.word	0x40020044
 8003830:	40020058 	.word	0x40020058
 8003834:	4002006c 	.word	0x4002006c
 8003838:	40020000 	.word	0x40020000

0800383c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800383c:	b480      	push	{r7}
 800383e:	b08b      	sub	sp, #44	; 0x2c
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800384a:	2300      	movs	r3, #0
 800384c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384e:	e169      	b.n	8003b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003850:	2201      	movs	r2, #1
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	429a      	cmp	r2, r3
 800386a:	f040 8158 	bne.w	8003b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a9a      	ldr	r2, [pc, #616]	; (8003adc <HAL_GPIO_Init+0x2a0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d05e      	beq.n	8003936 <HAL_GPIO_Init+0xfa>
 8003878:	4a98      	ldr	r2, [pc, #608]	; (8003adc <HAL_GPIO_Init+0x2a0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d875      	bhi.n	800396a <HAL_GPIO_Init+0x12e>
 800387e:	4a98      	ldr	r2, [pc, #608]	; (8003ae0 <HAL_GPIO_Init+0x2a4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d058      	beq.n	8003936 <HAL_GPIO_Init+0xfa>
 8003884:	4a96      	ldr	r2, [pc, #600]	; (8003ae0 <HAL_GPIO_Init+0x2a4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d86f      	bhi.n	800396a <HAL_GPIO_Init+0x12e>
 800388a:	4a96      	ldr	r2, [pc, #600]	; (8003ae4 <HAL_GPIO_Init+0x2a8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d052      	beq.n	8003936 <HAL_GPIO_Init+0xfa>
 8003890:	4a94      	ldr	r2, [pc, #592]	; (8003ae4 <HAL_GPIO_Init+0x2a8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d869      	bhi.n	800396a <HAL_GPIO_Init+0x12e>
 8003896:	4a94      	ldr	r2, [pc, #592]	; (8003ae8 <HAL_GPIO_Init+0x2ac>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d04c      	beq.n	8003936 <HAL_GPIO_Init+0xfa>
 800389c:	4a92      	ldr	r2, [pc, #584]	; (8003ae8 <HAL_GPIO_Init+0x2ac>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d863      	bhi.n	800396a <HAL_GPIO_Init+0x12e>
 80038a2:	4a92      	ldr	r2, [pc, #584]	; (8003aec <HAL_GPIO_Init+0x2b0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d046      	beq.n	8003936 <HAL_GPIO_Init+0xfa>
 80038a8:	4a90      	ldr	r2, [pc, #576]	; (8003aec <HAL_GPIO_Init+0x2b0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d85d      	bhi.n	800396a <HAL_GPIO_Init+0x12e>
 80038ae:	2b12      	cmp	r3, #18
 80038b0:	d82a      	bhi.n	8003908 <HAL_GPIO_Init+0xcc>
 80038b2:	2b12      	cmp	r3, #18
 80038b4:	d859      	bhi.n	800396a <HAL_GPIO_Init+0x12e>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <HAL_GPIO_Init+0x80>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	08003937 	.word	0x08003937
 80038c0:	08003911 	.word	0x08003911
 80038c4:	08003923 	.word	0x08003923
 80038c8:	08003965 	.word	0x08003965
 80038cc:	0800396b 	.word	0x0800396b
 80038d0:	0800396b 	.word	0x0800396b
 80038d4:	0800396b 	.word	0x0800396b
 80038d8:	0800396b 	.word	0x0800396b
 80038dc:	0800396b 	.word	0x0800396b
 80038e0:	0800396b 	.word	0x0800396b
 80038e4:	0800396b 	.word	0x0800396b
 80038e8:	0800396b 	.word	0x0800396b
 80038ec:	0800396b 	.word	0x0800396b
 80038f0:	0800396b 	.word	0x0800396b
 80038f4:	0800396b 	.word	0x0800396b
 80038f8:	0800396b 	.word	0x0800396b
 80038fc:	0800396b 	.word	0x0800396b
 8003900:	08003919 	.word	0x08003919
 8003904:	0800392d 	.word	0x0800392d
 8003908:	4a79      	ldr	r2, [pc, #484]	; (8003af0 <HAL_GPIO_Init+0x2b4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800390e:	e02c      	b.n	800396a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	623b      	str	r3, [r7, #32]
          break;
 8003916:	e029      	b.n	800396c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	3304      	adds	r3, #4
 800391e:	623b      	str	r3, [r7, #32]
          break;
 8003920:	e024      	b.n	800396c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	3308      	adds	r3, #8
 8003928:	623b      	str	r3, [r7, #32]
          break;
 800392a:	e01f      	b.n	800396c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	330c      	adds	r3, #12
 8003932:	623b      	str	r3, [r7, #32]
          break;
 8003934:	e01a      	b.n	800396c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800393e:	2304      	movs	r3, #4
 8003940:	623b      	str	r3, [r7, #32]
          break;
 8003942:	e013      	b.n	800396c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800394c:	2308      	movs	r3, #8
 800394e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	611a      	str	r2, [r3, #16]
          break;
 8003956:	e009      	b.n	800396c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003958:	2308      	movs	r3, #8
 800395a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	615a      	str	r2, [r3, #20]
          break;
 8003962:	e003      	b.n	800396c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003964:	2300      	movs	r3, #0
 8003966:	623b      	str	r3, [r7, #32]
          break;
 8003968:	e000      	b.n	800396c <HAL_GPIO_Init+0x130>
          break;
 800396a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2bff      	cmp	r3, #255	; 0xff
 8003970:	d801      	bhi.n	8003976 <HAL_GPIO_Init+0x13a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	e001      	b.n	800397a <HAL_GPIO_Init+0x13e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2bff      	cmp	r3, #255	; 0xff
 8003980:	d802      	bhi.n	8003988 <HAL_GPIO_Init+0x14c>
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	e002      	b.n	800398e <HAL_GPIO_Init+0x152>
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	3b08      	subs	r3, #8
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	210f      	movs	r1, #15
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	6a39      	ldr	r1, [r7, #32]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	431a      	orrs	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80b1 	beq.w	8003b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039bc:	4b4d      	ldr	r3, [pc, #308]	; (8003af4 <HAL_GPIO_Init+0x2b8>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <HAL_GPIO_Init+0x2b8>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6193      	str	r3, [r2, #24]
 80039c8:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <HAL_GPIO_Init+0x2b8>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039d4:	4a48      	ldr	r2, [pc, #288]	; (8003af8 <HAL_GPIO_Init+0x2bc>)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	3302      	adds	r3, #2
 80039dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	220f      	movs	r2, #15
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a40      	ldr	r2, [pc, #256]	; (8003afc <HAL_GPIO_Init+0x2c0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_GPIO_Init+0x1ec>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a3f      	ldr	r2, [pc, #252]	; (8003b00 <HAL_GPIO_Init+0x2c4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00d      	beq.n	8003a24 <HAL_GPIO_Init+0x1e8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a3e      	ldr	r2, [pc, #248]	; (8003b04 <HAL_GPIO_Init+0x2c8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <HAL_GPIO_Init+0x1e4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3d      	ldr	r2, [pc, #244]	; (8003b08 <HAL_GPIO_Init+0x2cc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_GPIO_Init+0x1e0>
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e006      	b.n	8003a2a <HAL_GPIO_Init+0x1ee>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e004      	b.n	8003a2a <HAL_GPIO_Init+0x1ee>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e002      	b.n	8003a2a <HAL_GPIO_Init+0x1ee>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_GPIO_Init+0x1ee>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	f002 0203 	and.w	r2, r2, #3
 8003a30:	0092      	lsls	r2, r2, #2
 8003a32:	4093      	lsls	r3, r2
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a3a:	492f      	ldr	r1, [pc, #188]	; (8003af8 <HAL_GPIO_Init+0x2bc>)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a54:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	492c      	ldr	r1, [pc, #176]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]
 8003a60:	e006      	b.n	8003a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	4928      	ldr	r1, [pc, #160]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d006      	beq.n	8003a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	491e      	ldr	r1, [pc, #120]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	4918      	ldr	r1, [pc, #96]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4914      	ldr	r1, [pc, #80]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d021      	beq.n	8003b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	490e      	ldr	r1, [pc, #56]	; (8003b0c <HAL_GPIO_Init+0x2d0>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]
 8003ad8:	e021      	b.n	8003b1e <HAL_GPIO_Init+0x2e2>
 8003ada:	bf00      	nop
 8003adc:	10320000 	.word	0x10320000
 8003ae0:	10310000 	.word	0x10310000
 8003ae4:	10220000 	.word	0x10220000
 8003ae8:	10210000 	.word	0x10210000
 8003aec:	10120000 	.word	0x10120000
 8003af0:	10110000 	.word	0x10110000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40010800 	.word	0x40010800
 8003b00:	40010c00 	.word	0x40010c00
 8003b04:	40011000 	.word	0x40011000
 8003b08:	40011400 	.word	0x40011400
 8003b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_GPIO_Init+0x304>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	4909      	ldr	r1, [pc, #36]	; (8003b40 <HAL_GPIO_Init+0x304>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	3301      	adds	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f47f ae8e 	bne.w	8003850 <HAL_GPIO_Init+0x14>
  }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	372c      	adds	r7, #44	; 0x2c
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40010400 	.word	0x40010400

08003b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e001      	b.n	8003b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	807b      	strh	r3, [r7, #2]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b82:	787b      	ldrb	r3, [r7, #1]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b88:	887a      	ldrh	r2, [r7, #2]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b8e:	e003      	b.n	8003b98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b90:	887b      	ldrh	r3, [r7, #2]
 8003b92:	041a      	lsls	r2, r3, #16
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	611a      	str	r2, [r3, #16]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e272      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8087 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc4:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d00c      	beq.n	8003bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bd0:	4b8f      	ldr	r3, [pc, #572]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d112      	bne.n	8003c02 <HAL_RCC_OscConfig+0x5e>
 8003bdc:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d06c      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x12c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d168      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e24c      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x76>
 8003c0c:	4b80      	ldr	r3, [pc, #512]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7f      	ldr	r2, [pc, #508]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e02e      	b.n	8003c78 <HAL_RCC_OscConfig+0xd4>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x98>
 8003c22:	4b7b      	ldr	r3, [pc, #492]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7a      	ldr	r2, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b78      	ldr	r3, [pc, #480]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a77      	ldr	r2, [pc, #476]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e01d      	b.n	8003c78 <HAL_RCC_OscConfig+0xd4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0xbc>
 8003c46:	4b72      	ldr	r3, [pc, #456]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a71      	ldr	r2, [pc, #452]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6e      	ldr	r2, [pc, #440]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0xd4>
 8003c60:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6a      	ldr	r2, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe ff96 	bl	8002bb0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe ff92 	bl	8002bb0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e200      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0xe4>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fe ff82 	bl	8002bb0 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe ff7e 	bl	8002bb0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1ec      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x10c>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d063      	beq.n	8003da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cde:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d11c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x18c>
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4b43      	ldr	r3, [pc, #268]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x176>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1c0      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4939      	ldr	r1, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	e03a      	b.n	8003da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d38:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7fe ff37 	bl	8002bb0 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fe ff33 	bl	8002bb0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1a1      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4927      	ldr	r1, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fe ff16 	bl	8002bb0 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fe ff12 	bl	8002bb0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e180      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d03a      	beq.n	8003e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fe fef6 	bl	8002bb0 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fe fef2 	bl	8002bb0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e160      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003de6:	2001      	movs	r0, #1
 8003de8:	f000 face 	bl	8004388 <RCC_Delay>
 8003dec:	e01c      	b.n	8003e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df4:	f7fe fedc 	bl	8002bb0 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfa:	e00f      	b.n	8003e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fe fed8 	bl	8002bb0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d908      	bls.n	8003e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e146      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	42420000 	.word	0x42420000
 8003e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b92      	ldr	r3, [pc, #584]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e9      	bne.n	8003dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a6 	beq.w	8003f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b8b      	ldr	r3, [pc, #556]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	4b88      	ldr	r3, [pc, #544]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4a87      	ldr	r2, [pc, #540]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e50:	61d3      	str	r3, [r2, #28]
 8003e52:	4b85      	ldr	r3, [pc, #532]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b82      	ldr	r3, [pc, #520]	; (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d118      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6e:	4b7f      	ldr	r3, [pc, #508]	; (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7e      	ldr	r2, [pc, #504]	; (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7a:	f7fe fe99 	bl	8002bb0 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e82:	f7fe fe95 	bl	8002bb0 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	; 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e103      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	4b75      	ldr	r3, [pc, #468]	; (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x312>
 8003ea8:	4b6f      	ldr	r3, [pc, #444]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a6e      	ldr	r2, [pc, #440]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	e02d      	b.n	8003f12 <HAL_RCC_OscConfig+0x36e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x334>
 8003ebe:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a69      	ldr	r2, [pc, #420]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6213      	str	r3, [r2, #32]
 8003eca:	4b67      	ldr	r3, [pc, #412]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4a66      	ldr	r2, [pc, #408]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	6213      	str	r3, [r2, #32]
 8003ed6:	e01c      	b.n	8003f12 <HAL_RCC_OscConfig+0x36e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d10c      	bne.n	8003efa <HAL_RCC_OscConfig+0x356>
 8003ee0:	4b61      	ldr	r3, [pc, #388]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4a60      	ldr	r2, [pc, #384]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6213      	str	r3, [r2, #32]
 8003eec:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4a5d      	ldr	r2, [pc, #372]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6213      	str	r3, [r2, #32]
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0x36e>
 8003efa:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4a5a      	ldr	r2, [pc, #360]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6213      	str	r3, [r2, #32]
 8003f06:	4b58      	ldr	r3, [pc, #352]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4a57      	ldr	r2, [pc, #348]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d015      	beq.n	8003f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fe fe49 	bl	8002bb0 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fe fe45 	bl	8002bb0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0b1      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b4b      	ldr	r3, [pc, #300]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCC_OscConfig+0x37e>
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fe fe33 	bl	8002bb0 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fe fe2f 	bl	8002bb0 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e09b      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	4b40      	ldr	r3, [pc, #256]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ee      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b3c      	ldr	r3, [pc, #240]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	4a3b      	ldr	r2, [pc, #236]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8087 	beq.w	800409a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f8c:	4b36      	ldr	r3, [pc, #216]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d061      	beq.n	800405c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d146      	bne.n	800402e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fe03 	bl	8002bb0 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fe fdff 	bl	8002bb0 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e06d      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc0:	4b29      	ldr	r3, [pc, #164]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d108      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4921      	ldr	r1, [pc, #132]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a19      	ldr	r1, [r3, #32]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	491b      	ldr	r1, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fe fdd3 	bl	8002bb0 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400e:	f7fe fdcf 	bl	8002bb0 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e03d      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x46a>
 800402c:	e035      	b.n	800409a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_RCC_OscConfig+0x4cc>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fe fdbc 	bl	8002bb0 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe fdb8 	bl	8002bb0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e026      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x498>
 800405a:	e01e      	b.n	800409a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e019      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
 8004070:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x500>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	429a      	cmp	r2, r3
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0d0      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b67      	ldr	r3, [pc, #412]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 0207 	bic.w	r2, r3, #7
 80040d2:	4965      	ldr	r1, [pc, #404]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b8      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d020      	beq.n	800413a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800410e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800411c:	4b53      	ldr	r3, [pc, #332]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b50      	ldr	r3, [pc, #320]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	494d      	ldr	r1, [pc, #308]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d040      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d115      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07f      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e073      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	4b3d      	ldr	r3, [pc, #244]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4936      	ldr	r1, [pc, #216]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004198:	f7fe fd0a 	bl	8002bb0 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fe fd06 	bl	8002bb0 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e053      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d210      	bcs.n	80041f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	4922      	ldr	r1, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e032      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	490e      	ldr	r1, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004236:	f000 f821 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800423a:	4602      	mov	r2, r0
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	490a      	ldr	r1, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	5ccb      	ldrb	r3, [r1, r3]
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1cc>)
 8004250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x1d0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fc68 	bl	8002b2c <HAL_InitTick>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40022000 	.word	0x40022000
 800426c:	40021000 	.word	0x40021000
 8004270:	0800a4c8 	.word	0x0800a4c8
 8004274:	20000000 	.word	0x20000000
 8004278:	20000004 	.word	0x20000004

0800427c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_RCC_GetSysClockFreq+0x94>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d002      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x30>
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x36>
 80042aa:	e027      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ae:	613b      	str	r3, [r7, #16]
      break;
 80042b0:	e027      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0c9b      	lsrs	r3, r3, #18
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042bc:	5cd3      	ldrb	r3, [r2, r3]
 80042be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_GetSysClockFreq+0x94>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	0c5b      	lsrs	r3, r3, #17
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	4a11      	ldr	r2, [pc, #68]	; (800431c <HAL_RCC_GetSysClockFreq+0xa0>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a0d      	ldr	r2, [pc, #52]	; (8004314 <HAL_RCC_GetSysClockFreq+0x98>)
 80042de:	fb03 f202 	mul.w	r2, r3, r2
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e004      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	613b      	str	r3, [r7, #16]
      break;
 80042fa:	e002      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetSysClockFreq+0x98>)
 80042fe:	613b      	str	r3, [r7, #16]
      break;
 8004300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004302:	693b      	ldr	r3, [r7, #16]
}
 8004304:	4618      	mov	r0, r3
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	007a1200 	.word	0x007a1200
 8004318:	0800a4e0 	.word	0x0800a4e0
 800431c:	0800a4f0 	.word	0x0800a4f0
 8004320:	003d0900 	.word	0x003d0900

08004324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b02      	ldr	r3, [pc, #8]	; (8004334 <HAL_RCC_GetHCLKFreq+0x10>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000000 	.word	0x20000000

08004338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800433c:	f7ff fff2 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4903      	ldr	r1, [pc, #12]	; (800435c <HAL_RCC_GetPCLK1Freq+0x24>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	0800a4d8 	.word	0x0800a4d8

08004360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004364:	f7ff ffde 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	0adb      	lsrs	r3, r3, #11
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	0800a4d8 	.word	0x0800a4d8

08004388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <RCC_Delay+0x34>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <RCC_Delay+0x38>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0a5b      	lsrs	r3, r3, #9
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043a4:	bf00      	nop
  }
  while (Delay --);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f9      	bne.n	80043a4 <RCC_Delay+0x1c>
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	20000000 	.word	0x20000000
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d07d      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e4:	4b4f      	ldr	r3, [pc, #316]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4a4b      	ldr	r2, [pc, #300]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fa:	61d3      	str	r3, [r2, #28]
 80043fc:	4b49      	ldr	r3, [pc, #292]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004408:	2301      	movs	r3, #1
 800440a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	4b46      	ldr	r3, [pc, #280]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d118      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a42      	ldr	r2, [pc, #264]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004424:	f7fe fbc4 	bl	8002bb0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fe fbc0 	bl	8002bb0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e06d      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800444a:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d02e      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	429a      	cmp	r2, r3
 8004466:	d027      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004468:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004478:	4b2c      	ldr	r3, [pc, #176]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800447e:	4a29      	ldr	r2, [pc, #164]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d014      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fe fb8f 	bl	8002bb0 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004494:	e00a      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fe fb8b 	bl	8002bb0 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e036      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ee      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4917      	ldr	r1, [pc, #92]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	490b      	ldr	r1, [pc, #44]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4904      	ldr	r1, [pc, #16]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	40007000 	.word	0x40007000
 800452c:	42420440 	.word	0x42420440

08004530 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b10      	cmp	r3, #16
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b10      	cmp	r3, #16
 8004556:	f200 808a 	bhi.w	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d045      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d075      	beq.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004566:	e082      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004568:	4b46      	ldr	r3, [pc, #280]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800456e:	4b45      	ldr	r3, [pc, #276]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d07b      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	0c9b      	lsrs	r3, r3, #18
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	4a41      	ldr	r2, [pc, #260]	; (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d015      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004592:	4b3c      	ldr	r3, [pc, #240]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	0c5b      	lsrs	r3, r3, #17
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	4a3b      	ldr	r2, [pc, #236]	; (800468c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045ac:	4a38      	ldr	r2, [pc, #224]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e004      	b.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4a34      	ldr	r2, [pc, #208]	; (8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045c8:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d4:	d102      	bne.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	61bb      	str	r3, [r7, #24]
      break;
 80045da:	e04a      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4a2d      	ldr	r2, [pc, #180]	; (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	61bb      	str	r3, [r7, #24]
      break;
 80045ea:	e042      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fc:	d108      	bne.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e01f      	b.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d109      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800461c:	4b19      	ldr	r3, [pc, #100]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004628:	f649 4340 	movw	r3, #40000	; 0x9c40
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e00f      	b.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463a:	d11c      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d016      	beq.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004648:	f24f 4324 	movw	r3, #62500	; 0xf424
 800464c:	61bb      	str	r3, [r7, #24]
      break;
 800464e:	e012      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004650:	e011      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004652:	f7ff fe85 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 8004656:	4602      	mov	r2, r0
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	0b9b      	lsrs	r3, r3, #14
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	3301      	adds	r3, #1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	61bb      	str	r3, [r7, #24]
      break;
 800466c:	e004      	b.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004676:	bf00      	nop
    }
  }
  return (frequency);
 8004678:	69bb      	ldr	r3, [r7, #24]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	0800a4f4 	.word	0x0800a4f4
 800468c:	0800a504 	.word	0x0800a504
 8004690:	007a1200 	.word	0x007a1200
 8004694:	003d0900 	.word	0x003d0900
 8004698:	aaaaaaab 	.word	0xaaaaaaab

0800469c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e076      	b.n	800479c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d108      	bne.n	80046c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046be:	d009      	beq.n	80046d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	61da      	str	r2, [r3, #28]
 80046c6:	e005      	b.n	80046d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fe f806 	bl	8002700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	ea42 0103 	orr.w	r1, r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	0c1a      	lsrs	r2, r3, #16
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f002 0204 	and.w	r2, r2, #4
 800477a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_SPI_Transmit+0x22>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e12d      	b.n	8004a22 <HAL_SPI_Transmit+0x27e>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ce:	f7fe f9ef 	bl	8002bb0 <HAL_GetTick>
 80047d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d002      	beq.n	80047ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
 80047e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047e8:	e116      	b.n	8004a18 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_Transmit+0x52>
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047fa:	e10d      	b.n	8004a18 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2203      	movs	r2, #3
 8004800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	88fa      	ldrh	r2, [r7, #6]
 800481a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d10f      	bne.n	8004864 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004862:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d007      	beq.n	8004882 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488a:	d14f      	bne.n	800492c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SPI_Transmit+0xf6>
 8004894:	8afb      	ldrh	r3, [r7, #22]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d142      	bne.n	8004920 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	881a      	ldrh	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	1c9a      	adds	r2, r3, #2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048be:	e02f      	b.n	8004920 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d112      	bne.n	80048f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	881a      	ldrh	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80048f2:	e015      	b.n	8004920 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f4:	f7fe f95c 	bl	8002bb0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d803      	bhi.n	800490c <HAL_SPI_Transmit+0x168>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d102      	bne.n	8004912 <HAL_SPI_Transmit+0x16e>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800491e:	e07b      	b.n	8004a18 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ca      	bne.n	80048c0 <HAL_SPI_Transmit+0x11c>
 800492a:	e050      	b.n	80049ce <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Transmit+0x196>
 8004934:	8afb      	ldrh	r3, [r7, #22]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d144      	bne.n	80049c4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004960:	e030      	b.n	80049c4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d113      	bne.n	8004998 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	7812      	ldrb	r2, [r2, #0]
 800497c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	86da      	strh	r2, [r3, #54]	; 0x36
 8004996:	e015      	b.n	80049c4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004998:	f7fe f90a 	bl	8002bb0 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d803      	bhi.n	80049b0 <HAL_SPI_Transmit+0x20c>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d102      	bne.n	80049b6 <HAL_SPI_Transmit+0x212>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049c2:	e029      	b.n	8004a18 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1c9      	bne.n	8004962 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f8b2 	bl	8004b3c <SPI_EndRxTxTransaction>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e003      	b.n	8004a18 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a3c:	f7fe f8b8 	bl	8002bb0 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	4413      	add	r3, r2
 8004a4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a4c:	f7fe f8b0 	bl	8002bb0 <HAL_GetTick>
 8004a50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a52:	4b39      	ldr	r3, [pc, #228]	; (8004b38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	015b      	lsls	r3, r3, #5
 8004a58:	0d1b      	lsrs	r3, r3, #20
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	fb02 f303 	mul.w	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a62:	e054      	b.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d050      	beq.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a6c:	f7fe f8a0 	bl	8002bb0 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d902      	bls.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d13d      	bne.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9a:	d111      	bne.n	8004ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa4:	d004      	beq.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d107      	bne.n	8004ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac8:	d10f      	bne.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e017      	b.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d19b      	bne.n	8004a64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000000 	.word	0x20000000

08004b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ff6a 	bl	8004a2c <SPI_WaitFlagStateUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0220 	orr.w	r2, r3, #32
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e000      	b.n	8004b70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e093      	b.n	8004cb4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fd fdeb 	bl	800277c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bbc:	f023 0307 	bic.w	r3, r3, #7
 8004bc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f000 f923 	bl	8004e18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c18:	f023 030c 	bic.w	r3, r3, #12
 8004c1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	4313      	orrs	r3, r2
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	011a      	lsls	r2, r3, #4
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	031b      	lsls	r3, r3, #12
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	4313      	orrs	r3, r2
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ccc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cdc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ce4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d110      	bne.n	8004d0e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d102      	bne.n	8004cf8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cf2:	7b7b      	ldrb	r3, [r7, #13]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e089      	b.n	8004e10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	e031      	b.n	8004d72 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d110      	bne.n	8004d36 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d14:	7bbb      	ldrb	r3, [r7, #14]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d102      	bne.n	8004d20 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d1a:	7b3b      	ldrb	r3, [r7, #12]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d001      	beq.n	8004d24 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e075      	b.n	8004e10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d34:	e01d      	b.n	8004d72 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d108      	bne.n	8004d4e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d3c:	7bbb      	ldrb	r3, [r7, #14]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d42:	7b7b      	ldrb	r3, [r7, #13]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d102      	bne.n	8004d4e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d48:	7b3b      	ldrb	r3, [r7, #12]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d001      	beq.n	8004d52 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e05e      	b.n	8004e10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d010      	beq.n	8004da0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d7e:	e01f      	b.n	8004dc0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2201      	movs	r2, #1
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f8a7 	bl	8004edc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0202 	orr.w	r2, r2, #2
 8004d9c:	60da      	str	r2, [r3, #12]
      break;
 8004d9e:	e02e      	b.n	8004dfe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2201      	movs	r2, #1
 8004da6:	2104      	movs	r1, #4
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f897 	bl	8004edc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0204 	orr.w	r2, r2, #4
 8004dbc:	60da      	str	r2, [r3, #12]
      break;
 8004dbe:	e01e      	b.n	8004dfe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f887 	bl	8004edc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f880 	bl	8004edc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0202 	orr.w	r2, r2, #2
 8004dea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0204 	orr.w	r2, r2, #4
 8004dfa:	60da      	str	r2, [r3, #12]
      break;
 8004dfc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <TIM_Base_SetConfig+0xb8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <TIM_Base_SetConfig+0x30>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d007      	beq.n	8004e48 <TIM_Base_SetConfig+0x30>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a26      	ldr	r2, [pc, #152]	; (8004ed4 <TIM_Base_SetConfig+0xbc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0x30>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a25      	ldr	r2, [pc, #148]	; (8004ed8 <TIM_Base_SetConfig+0xc0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d108      	bne.n	8004e5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <TIM_Base_SetConfig+0xb8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <TIM_Base_SetConfig+0x62>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d007      	beq.n	8004e7a <TIM_Base_SetConfig+0x62>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <TIM_Base_SetConfig+0xbc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_Base_SetConfig+0x62>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <TIM_Base_SetConfig+0xc0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d108      	bne.n	8004e8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <TIM_Base_SetConfig+0xb8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d103      	bne.n	8004ec0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	615a      	str	r2, [r3, #20]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800

08004edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	2201      	movs	r2, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1a      	ldr	r2, [r3, #32]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e046      	b.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d009      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a10      	ldr	r2, [pc, #64]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800

08004fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e042      	b.n	8005078 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd fc0a 	bl	8002820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fdc5 	bl	8005bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b20      	cmp	r3, #32
 800509e:	d16d      	bne.n	800517c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_Transmit+0x2c>
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e066      	b.n	800517e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2221      	movs	r2, #33	; 0x21
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050be:	f7fd fd77 	bl	8002bb0 <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d8:	d108      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e003      	b.n	80050f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050f4:	e02a      	b.n	800514c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fb14 	bl	800572e <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e036      	b.n	800517e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3302      	adds	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e007      	b.n	800513e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1cf      	bne.n	80050f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	2140      	movs	r1, #64	; 0x40
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fae4 	bl	800572e <UART_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e006      	b.n	800517e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b20      	cmp	r3, #32
 800519e:	d112      	bne.n	80051c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_Receive_IT+0x26>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e00b      	b.n	80051c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	461a      	mov	r2, r3
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fb24 	bl	800580a <UART_Start_Receive_IT>
 80051c2:	4603      	mov	r3, r0
 80051c4:	e000      	b.n	80051c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b0ba      	sub	sp, #232	; 0xe8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800520e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_UART_IRQHandler+0x66>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fc01 	bl	8005a36 <UART_Receive_IT>
      return;
 8005234:	e25b      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80de 	beq.w	80053fc <HAL_UART_IRQHandler+0x22c>
 8005240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80d1 	beq.w	80053fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_UART_IRQHandler+0xae>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <HAL_UART_IRQHandler+0xd2>
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f043 0202 	orr.w	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_UART_IRQHandler+0xf6>
 80052ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <HAL_UART_IRQHandler+0x126>
 80052d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	f043 0208 	orr.w	r2, r3, #8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 81f2 	beq.w	80056e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_UART_IRQHandler+0x14e>
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb8c 	bl	8005a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_UART_IRQHandler+0x17a>
 8005342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d04f      	beq.n	80053ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa96 	bl	800587c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d041      	beq.n	80053e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3314      	adds	r3, #20
 8005386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800538a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800538e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1d9      	bne.n	800535e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d013      	beq.n	80053da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	4a7e      	ldr	r2, [pc, #504]	; (80055b0 <HAL_UART_IRQHandler+0x3e0>)
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe f9c4 	bl	800374c <HAL_DMA_Abort_IT>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053d4:	4610      	mov	r0, r2
 80053d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e00e      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f993 	bl	8005706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	e00a      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f98f 	bl	8005706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	e006      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f98b 	bl	8005706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80053f6:	e175      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	bf00      	nop
    return;
 80053fa:	e173      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	2b01      	cmp	r3, #1
 8005402:	f040 814f 	bne.w	80056a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8148 	beq.w	80056a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8141 	beq.w	80056a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80b6 	beq.w	80055b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8145 	beq.w	80056e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005466:	429a      	cmp	r2, r3
 8005468:	f080 813e 	bcs.w	80056e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b20      	cmp	r3, #32
 800547c:	f000 8088 	beq.w	8005590 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800549a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1d9      	bne.n	8005480 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e1      	bne.n	80054cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800552c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800552e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005532:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800553a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e3      	bne.n	8005508 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	330c      	adds	r3, #12
 8005554:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800555e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005560:	f023 0310 	bic.w	r3, r3, #16
 8005564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005572:	65ba      	str	r2, [r7, #88]	; 0x58
 8005574:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e3      	bne.n	800554e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe f8a3 	bl	80036d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8b6 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055ac:	e09c      	b.n	80056e8 <HAL_UART_IRQHandler+0x518>
 80055ae:	bf00      	nop
 80055b0:	08005941 	.word	0x08005941
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 808e 	beq.w	80056ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8089 	beq.w	80056ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	623b      	str	r3, [r7, #32]
   return(result);
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005636:	633a      	str	r2, [r7, #48]	; 0x30
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60fb      	str	r3, [r7, #12]
   return(result);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e3      	bne.n	8005658 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f83b 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056a2:	e023      	b.n	80056ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <HAL_UART_IRQHandler+0x4f4>
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f953 	bl	8005968 <UART_Transmit_IT>
    return;
 80056c2:	e014      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <HAL_UART_IRQHandler+0x51e>
 80056d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f992 	bl	8005a06 <UART_EndTransmit_IT>
    return;
 80056e2:	e004      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
    return;
 80056e4:	bf00      	nop
 80056e6:	e002      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
      return;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
      return;
 80056ec:	bf00      	nop
  }
}
 80056ee:	37e8      	adds	r7, #232	; 0xe8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr

08005706 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b090      	sub	sp, #64	; 0x40
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573e:	e050      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d04c      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <UART_WaitOnFlagUntilTimeout+0x30>
 800574e:	f7fd fa2f 	bl	8002bb0 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575a:	429a      	cmp	r2, r3
 800575c:	d241      	bcs.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800577e:	637a      	str	r2, [r7, #52]	; 0x34
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	613b      	str	r3, [r7, #16]
   return(result);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b2:	623a      	str	r2, [r7, #32]
 80057b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	69f9      	ldr	r1, [r7, #28]
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e00f      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d09f      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3740      	adds	r7, #64	; 0x40
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2222      	movs	r2, #34	; 0x22
 8005834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800584e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0220 	orr.w	r2, r2, #32
 800586e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b095      	sub	sp, #84	; 0x54
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058a4:	643a      	str	r2, [r7, #64]	; 0x40
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3314      	adds	r3, #20
 80058be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d119      	bne.n	8005928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	60bb      	str	r3, [r7, #8]
   return(result);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	647b      	str	r3, [r7, #68]	; 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005914:	61ba      	str	r2, [r7, #24]
 8005916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6979      	ldr	r1, [r7, #20]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	613b      	str	r3, [r7, #16]
   return(result);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005936:	bf00      	nop
 8005938:	3754      	adds	r7, #84	; 0x54
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff fed3 	bl	8005706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b21      	cmp	r3, #33	; 0x21
 800597a:	d13e      	bne.n	80059fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005984:	d114      	bne.n	80059b0 <UART_Transmit_IT+0x48>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d110      	bne.n	80059b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	621a      	str	r2, [r3, #32]
 80059ae:	e008      	b.n	80059c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6211      	str	r1, [r2, #32]
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4619      	mov	r1, r3
 80059d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10f      	bne.n	80059f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr

08005a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fe64 	bl	80056f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08c      	sub	sp, #48	; 0x30
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b22      	cmp	r3, #34	; 0x22
 8005a48:	f040 80ae 	bne.w	8005ba8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a54:	d117      	bne.n	8005a86 <UART_Receive_IT+0x50>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d113      	bne.n	8005a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	1c9a      	adds	r2, r3, #2
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
 8005a84:	e026      	b.n	8005ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d007      	beq.n	8005aaa <UART_Receive_IT+0x74>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <UART_Receive_IT+0x82>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	e008      	b.n	8005aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d15d      	bne.n	8005ba4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0220 	bic.w	r2, r2, #32
 8005af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d135      	bne.n	8005b9a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	613b      	str	r3, [r7, #16]
   return(result);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f023 0310 	bic.w	r3, r3, #16
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	623a      	str	r2, [r7, #32]
 8005b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	6a3a      	ldr	r2, [r7, #32]
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e5      	bne.n	8005b34 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d10a      	bne.n	8005b8c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fdc0 	bl	8005718 <HAL_UARTEx_RxEventCallback>
 8005b98:	e002      	b.n	8005ba0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc fc78 	bl	8002490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e002      	b.n	8005baa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3730      	adds	r7, #48	; 0x30
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bee:	f023 030c 	bic.w	r3, r3, #12
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <UART_SetConfig+0x114>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7fe fba0 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	e002      	b.n	8005c2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7fe fb88 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8005c28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009a      	lsls	r2, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <UART_SetConfig+0x118>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	0119      	lsls	r1, r3, #4
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009a      	lsls	r2, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <UART_SetConfig+0x118>)
 8005c62:	fba3 0302 	umull	r0, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	2064      	movs	r0, #100	; 0x64
 8005c6a:	fb00 f303 	mul.w	r3, r0, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	3332      	adds	r3, #50	; 0x32
 8005c74:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <UART_SetConfig+0x118>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c80:	4419      	add	r1, r3
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	009a      	lsls	r2, r3, #2
 8005c8c:	441a      	add	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <UART_SetConfig+0x118>)
 8005c9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2064      	movs	r0, #100	; 0x64
 8005ca2:	fb00 f303 	mul.w	r3, r0, r3
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	3332      	adds	r3, #50	; 0x32
 8005cac:	4a07      	ldr	r2, [pc, #28]	; (8005ccc <UART_SetConfig+0x118>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40013800 	.word	0x40013800
 8005ccc:	51eb851f 	.word	0x51eb851f

08005cd0 <__cvt>:
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	bfbb      	ittet	lt
 8005cda:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005cde:	461f      	movlt	r7, r3
 8005ce0:	2300      	movge	r3, #0
 8005ce2:	232d      	movlt	r3, #45	; 0x2d
 8005ce4:	b088      	sub	sp, #32
 8005ce6:	4614      	mov	r4, r2
 8005ce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005cec:	7013      	strb	r3, [r2, #0]
 8005cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cf0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005cf4:	f023 0820 	bic.w	r8, r3, #32
 8005cf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cfc:	d005      	beq.n	8005d0a <__cvt+0x3a>
 8005cfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d02:	d100      	bne.n	8005d06 <__cvt+0x36>
 8005d04:	3501      	adds	r5, #1
 8005d06:	2302      	movs	r3, #2
 8005d08:	e000      	b.n	8005d0c <__cvt+0x3c>
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	aa07      	add	r2, sp, #28
 8005d0e:	9204      	str	r2, [sp, #16]
 8005d10:	aa06      	add	r2, sp, #24
 8005d12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d16:	e9cd 3500 	strd	r3, r5, [sp]
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	f001 f887 	bl	8006e30 <_dtoa_r>
 8005d22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d26:	4606      	mov	r6, r0
 8005d28:	d102      	bne.n	8005d30 <__cvt+0x60>
 8005d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d2c:	07db      	lsls	r3, r3, #31
 8005d2e:	d522      	bpl.n	8005d76 <__cvt+0xa6>
 8005d30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d34:	eb06 0905 	add.w	r9, r6, r5
 8005d38:	d110      	bne.n	8005d5c <__cvt+0x8c>
 8005d3a:	7833      	ldrb	r3, [r6, #0]
 8005d3c:	2b30      	cmp	r3, #48	; 0x30
 8005d3e:	d10a      	bne.n	8005d56 <__cvt+0x86>
 8005d40:	2200      	movs	r2, #0
 8005d42:	2300      	movs	r3, #0
 8005d44:	4620      	mov	r0, r4
 8005d46:	4639      	mov	r1, r7
 8005d48:	f7fa fe38 	bl	80009bc <__aeabi_dcmpeq>
 8005d4c:	b918      	cbnz	r0, 8005d56 <__cvt+0x86>
 8005d4e:	f1c5 0501 	rsb	r5, r5, #1
 8005d52:	f8ca 5000 	str.w	r5, [sl]
 8005d56:	f8da 3000 	ldr.w	r3, [sl]
 8005d5a:	4499      	add	r9, r3
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4620      	mov	r0, r4
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa fe2a 	bl	80009bc <__aeabi_dcmpeq>
 8005d68:	b108      	cbz	r0, 8005d6e <__cvt+0x9e>
 8005d6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d6e:	2230      	movs	r2, #48	; 0x30
 8005d70:	9b07      	ldr	r3, [sp, #28]
 8005d72:	454b      	cmp	r3, r9
 8005d74:	d307      	bcc.n	8005d86 <__cvt+0xb6>
 8005d76:	4630      	mov	r0, r6
 8005d78:	9b07      	ldr	r3, [sp, #28]
 8005d7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d7c:	1b9b      	subs	r3, r3, r6
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	b008      	add	sp, #32
 8005d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	9107      	str	r1, [sp, #28]
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e7f0      	b.n	8005d70 <__cvt+0xa0>

08005d8e <__exponent>:
 8005d8e:	4603      	mov	r3, r0
 8005d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d92:	2900      	cmp	r1, #0
 8005d94:	f803 2b02 	strb.w	r2, [r3], #2
 8005d98:	bfb6      	itet	lt
 8005d9a:	222d      	movlt	r2, #45	; 0x2d
 8005d9c:	222b      	movge	r2, #43	; 0x2b
 8005d9e:	4249      	neglt	r1, r1
 8005da0:	2909      	cmp	r1, #9
 8005da2:	7042      	strb	r2, [r0, #1]
 8005da4:	dd2a      	ble.n	8005dfc <__exponent+0x6e>
 8005da6:	f10d 0207 	add.w	r2, sp, #7
 8005daa:	4617      	mov	r7, r2
 8005dac:	260a      	movs	r6, #10
 8005dae:	fb91 f5f6 	sdiv	r5, r1, r6
 8005db2:	4694      	mov	ip, r2
 8005db4:	fb06 1415 	mls	r4, r6, r5, r1
 8005db8:	3430      	adds	r4, #48	; 0x30
 8005dba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	2c63      	cmp	r4, #99	; 0x63
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f102 32ff 	add.w	r2, r2, #4294967295
 8005dc8:	dcf1      	bgt.n	8005dae <__exponent+0x20>
 8005dca:	3130      	adds	r1, #48	; 0x30
 8005dcc:	f1ac 0402 	sub.w	r4, ip, #2
 8005dd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	1c41      	adds	r1, r0, #1
 8005dd8:	42ba      	cmp	r2, r7
 8005dda:	d30a      	bcc.n	8005df2 <__exponent+0x64>
 8005ddc:	f10d 0209 	add.w	r2, sp, #9
 8005de0:	eba2 020c 	sub.w	r2, r2, ip
 8005de4:	42bc      	cmp	r4, r7
 8005de6:	bf88      	it	hi
 8005de8:	2200      	movhi	r2, #0
 8005dea:	4413      	add	r3, r2
 8005dec:	1a18      	subs	r0, r3, r0
 8005dee:	b003      	add	sp, #12
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005df6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005dfa:	e7ed      	b.n	8005dd8 <__exponent+0x4a>
 8005dfc:	2330      	movs	r3, #48	; 0x30
 8005dfe:	3130      	adds	r1, #48	; 0x30
 8005e00:	7083      	strb	r3, [r0, #2]
 8005e02:	70c1      	strb	r1, [r0, #3]
 8005e04:	1d03      	adds	r3, r0, #4
 8005e06:	e7f1      	b.n	8005dec <__exponent+0x5e>

08005e08 <_printf_float>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	b091      	sub	sp, #68	; 0x44
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005e14:	4616      	mov	r6, r2
 8005e16:	461f      	mov	r7, r3
 8005e18:	4605      	mov	r5, r0
 8005e1a:	f000 fef3 	bl	8006c04 <_localeconv_r>
 8005e1e:	6803      	ldr	r3, [r0, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
 8005e24:	f7fa f99e 	bl	8000164 <strlen>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8005e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e30:	900a      	str	r0, [sp, #40]	; 0x28
 8005e32:	3307      	adds	r3, #7
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	f103 0208 	add.w	r2, r3, #8
 8005e3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e40:	f8d4 b000 	ldr.w	fp, [r4]
 8005e44:	f8c8 2000 	str.w	r2, [r8]
 8005e48:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005e4c:	4652      	mov	r2, sl
 8005e4e:	4643      	mov	r3, r8
 8005e50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e54:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	4650      	mov	r0, sl
 8005e60:	4b9c      	ldr	r3, [pc, #624]	; (80060d4 <_printf_float+0x2cc>)
 8005e62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e64:	f7fa fddc 	bl	8000a20 <__aeabi_dcmpun>
 8005e68:	bb70      	cbnz	r0, 8005ec8 <_printf_float+0xc0>
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6e:	4650      	mov	r0, sl
 8005e70:	4b98      	ldr	r3, [pc, #608]	; (80060d4 <_printf_float+0x2cc>)
 8005e72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e74:	f7fa fdb6 	bl	80009e4 <__aeabi_dcmple>
 8005e78:	bb30      	cbnz	r0, 8005ec8 <_printf_float+0xc0>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4650      	mov	r0, sl
 8005e80:	4641      	mov	r1, r8
 8005e82:	f7fa fda5 	bl	80009d0 <__aeabi_dcmplt>
 8005e86:	b110      	cbz	r0, 8005e8e <_printf_float+0x86>
 8005e88:	232d      	movs	r3, #45	; 0x2d
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8e:	4a92      	ldr	r2, [pc, #584]	; (80060d8 <_printf_float+0x2d0>)
 8005e90:	4b92      	ldr	r3, [pc, #584]	; (80060dc <_printf_float+0x2d4>)
 8005e92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e96:	bf94      	ite	ls
 8005e98:	4690      	movls	r8, r2
 8005e9a:	4698      	movhi	r8, r3
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	f04f 0a00 	mov.w	sl, #0
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	f02b 0304 	bic.w	r3, fp, #4
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	4633      	mov	r3, r6
 8005eac:	4621      	mov	r1, r4
 8005eae:	4628      	mov	r0, r5
 8005eb0:	9700      	str	r7, [sp, #0]
 8005eb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005eb4:	f000 f9d6 	bl	8006264 <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f040 8090 	bne.w	8005fde <_printf_float+0x1d6>
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	b011      	add	sp, #68	; 0x44
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	4652      	mov	r2, sl
 8005eca:	4643      	mov	r3, r8
 8005ecc:	4650      	mov	r0, sl
 8005ece:	4641      	mov	r1, r8
 8005ed0:	f7fa fda6 	bl	8000a20 <__aeabi_dcmpun>
 8005ed4:	b148      	cbz	r0, 8005eea <_printf_float+0xe2>
 8005ed6:	f1b8 0f00 	cmp.w	r8, #0
 8005eda:	bfb8      	it	lt
 8005edc:	232d      	movlt	r3, #45	; 0x2d
 8005ede:	4a80      	ldr	r2, [pc, #512]	; (80060e0 <_printf_float+0x2d8>)
 8005ee0:	bfb8      	it	lt
 8005ee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ee6:	4b7f      	ldr	r3, [pc, #508]	; (80060e4 <_printf_float+0x2dc>)
 8005ee8:	e7d3      	b.n	8005e92 <_printf_float+0x8a>
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	d142      	bne.n	8005f7a <_printf_float+0x172>
 8005ef4:	2306      	movs	r3, #6
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	9206      	str	r2, [sp, #24]
 8005efc:	aa0e      	add	r2, sp, #56	; 0x38
 8005efe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005f02:	aa0d      	add	r2, sp, #52	; 0x34
 8005f04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005f08:	9203      	str	r2, [sp, #12]
 8005f0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005f0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	4652      	mov	r2, sl
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f20:	f7ff fed6 	bl	8005cd0 <__cvt>
 8005f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f26:	4680      	mov	r8, r0
 8005f28:	2947      	cmp	r1, #71	; 0x47
 8005f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f2c:	d108      	bne.n	8005f40 <_printf_float+0x138>
 8005f2e:	1cc8      	adds	r0, r1, #3
 8005f30:	db02      	blt.n	8005f38 <_printf_float+0x130>
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	dd40      	ble.n	8005fba <_printf_float+0x1b2>
 8005f38:	f1a9 0902 	sub.w	r9, r9, #2
 8005f3c:	fa5f f989 	uxtb.w	r9, r9
 8005f40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f44:	d81f      	bhi.n	8005f86 <_printf_float+0x17e>
 8005f46:	464a      	mov	r2, r9
 8005f48:	3901      	subs	r1, #1
 8005f4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f4e:	910d      	str	r1, [sp, #52]	; 0x34
 8005f50:	f7ff ff1d 	bl	8005d8e <__exponent>
 8005f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f56:	4682      	mov	sl, r0
 8005f58:	1813      	adds	r3, r2, r0
 8005f5a:	2a01      	cmp	r2, #1
 8005f5c:	6123      	str	r3, [r4, #16]
 8005f5e:	dc02      	bgt.n	8005f66 <_printf_float+0x15e>
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	07d2      	lsls	r2, r2, #31
 8005f64:	d501      	bpl.n	8005f6a <_printf_float+0x162>
 8005f66:	3301      	adds	r3, #1
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d09b      	beq.n	8005eaa <_printf_float+0xa2>
 8005f72:	232d      	movs	r3, #45	; 0x2d
 8005f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f78:	e797      	b.n	8005eaa <_printf_float+0xa2>
 8005f7a:	2947      	cmp	r1, #71	; 0x47
 8005f7c:	d1bc      	bne.n	8005ef8 <_printf_float+0xf0>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1ba      	bne.n	8005ef8 <_printf_float+0xf0>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7b7      	b.n	8005ef6 <_printf_float+0xee>
 8005f86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f8a:	d118      	bne.n	8005fbe <_printf_float+0x1b6>
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	dd0b      	ble.n	8005faa <_printf_float+0x1a2>
 8005f92:	6121      	str	r1, [r4, #16]
 8005f94:	b913      	cbnz	r3, 8005f9c <_printf_float+0x194>
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	07d0      	lsls	r0, r2, #31
 8005f9a:	d502      	bpl.n	8005fa2 <_printf_float+0x19a>
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	440b      	add	r3, r1
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	f04f 0a00 	mov.w	sl, #0
 8005fa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fa8:	e7df      	b.n	8005f6a <_printf_float+0x162>
 8005faa:	b913      	cbnz	r3, 8005fb2 <_printf_float+0x1aa>
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	07d2      	lsls	r2, r2, #31
 8005fb0:	d501      	bpl.n	8005fb6 <_printf_float+0x1ae>
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	e7f4      	b.n	8005fa0 <_printf_float+0x198>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7f2      	b.n	8005fa0 <_printf_float+0x198>
 8005fba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	db05      	blt.n	8005fd0 <_printf_float+0x1c8>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	6121      	str	r1, [r4, #16]
 8005fc8:	07d8      	lsls	r0, r3, #31
 8005fca:	d5ea      	bpl.n	8005fa2 <_printf_float+0x19a>
 8005fcc:	1c4b      	adds	r3, r1, #1
 8005fce:	e7e7      	b.n	8005fa0 <_printf_float+0x198>
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	bfcc      	ite	gt
 8005fd4:	2201      	movgt	r2, #1
 8005fd6:	f1c1 0202 	rsble	r2, r1, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	e7e0      	b.n	8005fa0 <_printf_float+0x198>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	055a      	lsls	r2, r3, #21
 8005fe2:	d407      	bmi.n	8005ff4 <_printf_float+0x1ec>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d12b      	bne.n	800604a <_printf_float+0x242>
 8005ff2:	e764      	b.n	8005ebe <_printf_float+0xb6>
 8005ff4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ff8:	f240 80dd 	bls.w	80061b6 <_printf_float+0x3ae>
 8005ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	f7fa fcda 	bl	80009bc <__aeabi_dcmpeq>
 8006008:	2800      	cmp	r0, #0
 800600a:	d033      	beq.n	8006074 <_printf_float+0x26c>
 800600c:	2301      	movs	r3, #1
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	4a35      	ldr	r2, [pc, #212]	; (80060e8 <_printf_float+0x2e0>)
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f af51 	beq.w	8005ebe <_printf_float+0xb6>
 800601c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006020:	429a      	cmp	r2, r3
 8006022:	db02      	blt.n	800602a <_printf_float+0x222>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07d8      	lsls	r0, r3, #31
 8006028:	d50f      	bpl.n	800604a <_printf_float+0x242>
 800602a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	f43f af42 	beq.w	8005ebe <_printf_float+0xb6>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	f104 091a 	add.w	r9, r4, #26
 8006042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006044:	3b01      	subs	r3, #1
 8006046:	4543      	cmp	r3, r8
 8006048:	dc09      	bgt.n	800605e <_printf_float+0x256>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	f100 8104 	bmi.w	800625a <_printf_float+0x452>
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006056:	4298      	cmp	r0, r3
 8006058:	bfb8      	it	lt
 800605a:	4618      	movlt	r0, r3
 800605c:	e731      	b.n	8005ec2 <_printf_float+0xba>
 800605e:	2301      	movs	r3, #1
 8006060:	464a      	mov	r2, r9
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f af28 	beq.w	8005ebe <_printf_float+0xb6>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	e7e6      	b.n	8006042 <_printf_float+0x23a>
 8006074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc38      	bgt.n	80060ec <_printf_float+0x2e4>
 800607a:	2301      	movs	r3, #1
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <_printf_float+0x2e0>)
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af1a 	beq.w	8005ebe <_printf_float+0xb6>
 800608a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800608e:	4313      	orrs	r3, r2
 8006090:	d102      	bne.n	8006098 <_printf_float+0x290>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07d9      	lsls	r1, r3, #31
 8006096:	d5d8      	bpl.n	800604a <_printf_float+0x242>
 8006098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af0b 	beq.w	8005ebe <_printf_float+0xb6>
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	f104 0a1a 	add.w	sl, r4, #26
 80060b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b2:	425b      	negs	r3, r3
 80060b4:	454b      	cmp	r3, r9
 80060b6:	dc01      	bgt.n	80060bc <_printf_float+0x2b4>
 80060b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ba:	e794      	b.n	8005fe6 <_printf_float+0x1de>
 80060bc:	2301      	movs	r3, #1
 80060be:	4652      	mov	r2, sl
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f aef9 	beq.w	8005ebe <_printf_float+0xb6>
 80060cc:	f109 0901 	add.w	r9, r9, #1
 80060d0:	e7ee      	b.n	80060b0 <_printf_float+0x2a8>
 80060d2:	bf00      	nop
 80060d4:	7fefffff 	.word	0x7fefffff
 80060d8:	0800a506 	.word	0x0800a506
 80060dc:	0800a50a 	.word	0x0800a50a
 80060e0:	0800a50e 	.word	0x0800a50e
 80060e4:	0800a512 	.word	0x0800a512
 80060e8:	0800a516 	.word	0x0800a516
 80060ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060f0:	429a      	cmp	r2, r3
 80060f2:	bfa8      	it	ge
 80060f4:	461a      	movge	r2, r3
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	4691      	mov	r9, r2
 80060fa:	dc37      	bgt.n	800616c <_printf_float+0x364>
 80060fc:	f04f 0b00 	mov.w	fp, #0
 8006100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006104:	f104 021a 	add.w	r2, r4, #26
 8006108:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800610c:	ebaa 0309 	sub.w	r3, sl, r9
 8006110:	455b      	cmp	r3, fp
 8006112:	dc33      	bgt.n	800617c <_printf_float+0x374>
 8006114:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006118:	429a      	cmp	r2, r3
 800611a:	db3b      	blt.n	8006194 <_printf_float+0x38c>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	07da      	lsls	r2, r3, #31
 8006120:	d438      	bmi.n	8006194 <_printf_float+0x38c>
 8006122:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006126:	eba2 0903 	sub.w	r9, r2, r3
 800612a:	eba2 020a 	sub.w	r2, r2, sl
 800612e:	4591      	cmp	r9, r2
 8006130:	bfa8      	it	ge
 8006132:	4691      	movge	r9, r2
 8006134:	f1b9 0f00 	cmp.w	r9, #0
 8006138:	dc34      	bgt.n	80061a4 <_printf_float+0x39c>
 800613a:	f04f 0800 	mov.w	r8, #0
 800613e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006142:	f104 0a1a 	add.w	sl, r4, #26
 8006146:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	eba3 0309 	sub.w	r3, r3, r9
 8006150:	4543      	cmp	r3, r8
 8006152:	f77f af7a 	ble.w	800604a <_printf_float+0x242>
 8006156:	2301      	movs	r3, #1
 8006158:	4652      	mov	r2, sl
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f aeac 	beq.w	8005ebe <_printf_float+0xb6>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	e7ec      	b.n	8006146 <_printf_float+0x33e>
 800616c:	4613      	mov	r3, r2
 800616e:	4631      	mov	r1, r6
 8006170:	4642      	mov	r2, r8
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	d1c0      	bne.n	80060fc <_printf_float+0x2f4>
 800617a:	e6a0      	b.n	8005ebe <_printf_float+0xb6>
 800617c:	2301      	movs	r3, #1
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	920b      	str	r2, [sp, #44]	; 0x2c
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f ae99 	beq.w	8005ebe <_printf_float+0xb6>
 800618c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800618e:	f10b 0b01 	add.w	fp, fp, #1
 8006192:	e7b9      	b.n	8006108 <_printf_float+0x300>
 8006194:	4631      	mov	r1, r6
 8006196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	d1bf      	bne.n	8006122 <_printf_float+0x31a>
 80061a2:	e68c      	b.n	8005ebe <_printf_float+0xb6>
 80061a4:	464b      	mov	r3, r9
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	eb08 020a 	add.w	r2, r8, sl
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	d1c2      	bne.n	800613a <_printf_float+0x332>
 80061b4:	e683      	b.n	8005ebe <_printf_float+0xb6>
 80061b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b8:	2a01      	cmp	r2, #1
 80061ba:	dc01      	bgt.n	80061c0 <_printf_float+0x3b8>
 80061bc:	07db      	lsls	r3, r3, #31
 80061be:	d539      	bpl.n	8006234 <_printf_float+0x42c>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4642      	mov	r2, r8
 80061c4:	4631      	mov	r1, r6
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	f43f ae77 	beq.w	8005ebe <_printf_float+0xb6>
 80061d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f ae6f 	beq.w	8005ebe <_printf_float+0xb6>
 80061e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80061ec:	f7fa fbe6 	bl	80009bc <__aeabi_dcmpeq>
 80061f0:	b9d8      	cbnz	r0, 800622a <_printf_float+0x422>
 80061f2:	f109 33ff 	add.w	r3, r9, #4294967295
 80061f6:	f108 0201 	add.w	r2, r8, #1
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	d10e      	bne.n	8006222 <_printf_float+0x41a>
 8006204:	e65b      	b.n	8005ebe <_printf_float+0xb6>
 8006206:	2301      	movs	r3, #1
 8006208:	464a      	mov	r2, r9
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	f43f ae54 	beq.w	8005ebe <_printf_float+0xb6>
 8006216:	f108 0801 	add.w	r8, r8, #1
 800621a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800621c:	3b01      	subs	r3, #1
 800621e:	4543      	cmp	r3, r8
 8006220:	dcf1      	bgt.n	8006206 <_printf_float+0x3fe>
 8006222:	4653      	mov	r3, sl
 8006224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006228:	e6de      	b.n	8005fe8 <_printf_float+0x1e0>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	f104 091a 	add.w	r9, r4, #26
 8006232:	e7f2      	b.n	800621a <_printf_float+0x412>
 8006234:	2301      	movs	r3, #1
 8006236:	4642      	mov	r2, r8
 8006238:	e7df      	b.n	80061fa <_printf_float+0x3f2>
 800623a:	2301      	movs	r3, #1
 800623c:	464a      	mov	r2, r9
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	f43f ae3a 	beq.w	8005ebe <_printf_float+0xb6>
 800624a:	f108 0801 	add.w	r8, r8, #1
 800624e:	68e3      	ldr	r3, [r4, #12]
 8006250:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006252:	1a5b      	subs	r3, r3, r1
 8006254:	4543      	cmp	r3, r8
 8006256:	dcf0      	bgt.n	800623a <_printf_float+0x432>
 8006258:	e6fb      	b.n	8006052 <_printf_float+0x24a>
 800625a:	f04f 0800 	mov.w	r8, #0
 800625e:	f104 0919 	add.w	r9, r4, #25
 8006262:	e7f4      	b.n	800624e <_printf_float+0x446>

08006264 <_printf_common>:
 8006264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006268:	4616      	mov	r6, r2
 800626a:	4699      	mov	r9, r3
 800626c:	688a      	ldr	r2, [r1, #8]
 800626e:	690b      	ldr	r3, [r1, #16]
 8006270:	4607      	mov	r7, r0
 8006272:	4293      	cmp	r3, r2
 8006274:	bfb8      	it	lt
 8006276:	4613      	movlt	r3, r2
 8006278:	6033      	str	r3, [r6, #0]
 800627a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800627e:	460c      	mov	r4, r1
 8006280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006284:	b10a      	cbz	r2, 800628a <_printf_common+0x26>
 8006286:	3301      	adds	r3, #1
 8006288:	6033      	str	r3, [r6, #0]
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	0699      	lsls	r1, r3, #26
 800628e:	bf42      	ittt	mi
 8006290:	6833      	ldrmi	r3, [r6, #0]
 8006292:	3302      	addmi	r3, #2
 8006294:	6033      	strmi	r3, [r6, #0]
 8006296:	6825      	ldr	r5, [r4, #0]
 8006298:	f015 0506 	ands.w	r5, r5, #6
 800629c:	d106      	bne.n	80062ac <_printf_common+0x48>
 800629e:	f104 0a19 	add.w	sl, r4, #25
 80062a2:	68e3      	ldr	r3, [r4, #12]
 80062a4:	6832      	ldr	r2, [r6, #0]
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	42ab      	cmp	r3, r5
 80062aa:	dc2b      	bgt.n	8006304 <_printf_common+0xa0>
 80062ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062b0:	1e13      	subs	r3, r2, #0
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	bf18      	it	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	0692      	lsls	r2, r2, #26
 80062ba:	d430      	bmi.n	800631e <_printf_common+0xba>
 80062bc:	4649      	mov	r1, r9
 80062be:	4638      	mov	r0, r7
 80062c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c4:	47c0      	blx	r8
 80062c6:	3001      	adds	r0, #1
 80062c8:	d023      	beq.n	8006312 <_printf_common+0xae>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	f003 0306 	and.w	r3, r3, #6
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	bf14      	ite	ne
 80062d6:	2500      	movne	r5, #0
 80062d8:	6833      	ldreq	r3, [r6, #0]
 80062da:	f04f 0600 	mov.w	r6, #0
 80062de:	bf08      	it	eq
 80062e0:	68e5      	ldreq	r5, [r4, #12]
 80062e2:	f104 041a 	add.w	r4, r4, #26
 80062e6:	bf08      	it	eq
 80062e8:	1aed      	subeq	r5, r5, r3
 80062ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062ee:	bf08      	it	eq
 80062f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f4:	4293      	cmp	r3, r2
 80062f6:	bfc4      	itt	gt
 80062f8:	1a9b      	subgt	r3, r3, r2
 80062fa:	18ed      	addgt	r5, r5, r3
 80062fc:	42b5      	cmp	r5, r6
 80062fe:	d11a      	bne.n	8006336 <_printf_common+0xd2>
 8006300:	2000      	movs	r0, #0
 8006302:	e008      	b.n	8006316 <_printf_common+0xb2>
 8006304:	2301      	movs	r3, #1
 8006306:	4652      	mov	r2, sl
 8006308:	4649      	mov	r1, r9
 800630a:	4638      	mov	r0, r7
 800630c:	47c0      	blx	r8
 800630e:	3001      	adds	r0, #1
 8006310:	d103      	bne.n	800631a <_printf_common+0xb6>
 8006312:	f04f 30ff 	mov.w	r0, #4294967295
 8006316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631a:	3501      	adds	r5, #1
 800631c:	e7c1      	b.n	80062a2 <_printf_common+0x3e>
 800631e:	2030      	movs	r0, #48	; 0x30
 8006320:	18e1      	adds	r1, r4, r3
 8006322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800632c:	4422      	add	r2, r4
 800632e:	3302      	adds	r3, #2
 8006330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006334:	e7c2      	b.n	80062bc <_printf_common+0x58>
 8006336:	2301      	movs	r3, #1
 8006338:	4622      	mov	r2, r4
 800633a:	4649      	mov	r1, r9
 800633c:	4638      	mov	r0, r7
 800633e:	47c0      	blx	r8
 8006340:	3001      	adds	r0, #1
 8006342:	d0e6      	beq.n	8006312 <_printf_common+0xae>
 8006344:	3601      	adds	r6, #1
 8006346:	e7d9      	b.n	80062fc <_printf_common+0x98>

08006348 <_printf_i>:
 8006348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	7e0f      	ldrb	r7, [r1, #24]
 800634e:	4691      	mov	r9, r2
 8006350:	2f78      	cmp	r7, #120	; 0x78
 8006352:	4680      	mov	r8, r0
 8006354:	460c      	mov	r4, r1
 8006356:	469a      	mov	sl, r3
 8006358:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800635a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800635e:	d807      	bhi.n	8006370 <_printf_i+0x28>
 8006360:	2f62      	cmp	r7, #98	; 0x62
 8006362:	d80a      	bhi.n	800637a <_printf_i+0x32>
 8006364:	2f00      	cmp	r7, #0
 8006366:	f000 80d5 	beq.w	8006514 <_printf_i+0x1cc>
 800636a:	2f58      	cmp	r7, #88	; 0x58
 800636c:	f000 80c1 	beq.w	80064f2 <_printf_i+0x1aa>
 8006370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006378:	e03a      	b.n	80063f0 <_printf_i+0xa8>
 800637a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800637e:	2b15      	cmp	r3, #21
 8006380:	d8f6      	bhi.n	8006370 <_printf_i+0x28>
 8006382:	a101      	add	r1, pc, #4	; (adr r1, 8006388 <_printf_i+0x40>)
 8006384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063f5 	.word	0x080063f5
 8006390:	08006371 	.word	0x08006371
 8006394:	08006371 	.word	0x08006371
 8006398:	08006371 	.word	0x08006371
 800639c:	08006371 	.word	0x08006371
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	08006371 	.word	0x08006371
 80063a8:	08006371 	.word	0x08006371
 80063ac:	08006371 	.word	0x08006371
 80063b0:	08006371 	.word	0x08006371
 80063b4:	080064fb 	.word	0x080064fb
 80063b8:	08006421 	.word	0x08006421
 80063bc:	080064b5 	.word	0x080064b5
 80063c0:	08006371 	.word	0x08006371
 80063c4:	08006371 	.word	0x08006371
 80063c8:	0800651d 	.word	0x0800651d
 80063cc:	08006371 	.word	0x08006371
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006371 	.word	0x08006371
 80063d8:	08006371 	.word	0x08006371
 80063dc:	080064bd 	.word	0x080064bd
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	1d1a      	adds	r2, r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	602a      	str	r2, [r5, #0]
 80063e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0a0      	b.n	8006536 <_printf_i+0x1ee>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	0607      	lsls	r7, r0, #24
 80063fa:	f103 0104 	add.w	r1, r3, #4
 80063fe:	6029      	str	r1, [r5, #0]
 8006400:	d501      	bpl.n	8006406 <_printf_i+0xbe>
 8006402:	681e      	ldr	r6, [r3, #0]
 8006404:	e003      	b.n	800640e <_printf_i+0xc6>
 8006406:	0646      	lsls	r6, r0, #25
 8006408:	d5fb      	bpl.n	8006402 <_printf_i+0xba>
 800640a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800640e:	2e00      	cmp	r6, #0
 8006410:	da03      	bge.n	800641a <_printf_i+0xd2>
 8006412:	232d      	movs	r3, #45	; 0x2d
 8006414:	4276      	negs	r6, r6
 8006416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641a:	230a      	movs	r3, #10
 800641c:	4859      	ldr	r0, [pc, #356]	; (8006584 <_printf_i+0x23c>)
 800641e:	e012      	b.n	8006446 <_printf_i+0xfe>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	6029      	str	r1, [r5, #0]
 8006428:	0605      	lsls	r5, r0, #24
 800642a:	d501      	bpl.n	8006430 <_printf_i+0xe8>
 800642c:	681e      	ldr	r6, [r3, #0]
 800642e:	e002      	b.n	8006436 <_printf_i+0xee>
 8006430:	0641      	lsls	r1, r0, #25
 8006432:	d5fb      	bpl.n	800642c <_printf_i+0xe4>
 8006434:	881e      	ldrh	r6, [r3, #0]
 8006436:	2f6f      	cmp	r7, #111	; 0x6f
 8006438:	bf0c      	ite	eq
 800643a:	2308      	moveq	r3, #8
 800643c:	230a      	movne	r3, #10
 800643e:	4851      	ldr	r0, [pc, #324]	; (8006584 <_printf_i+0x23c>)
 8006440:	2100      	movs	r1, #0
 8006442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006446:	6865      	ldr	r5, [r4, #4]
 8006448:	2d00      	cmp	r5, #0
 800644a:	bfa8      	it	ge
 800644c:	6821      	ldrge	r1, [r4, #0]
 800644e:	60a5      	str	r5, [r4, #8]
 8006450:	bfa4      	itt	ge
 8006452:	f021 0104 	bicge.w	r1, r1, #4
 8006456:	6021      	strge	r1, [r4, #0]
 8006458:	b90e      	cbnz	r6, 800645e <_printf_i+0x116>
 800645a:	2d00      	cmp	r5, #0
 800645c:	d04b      	beq.n	80064f6 <_printf_i+0x1ae>
 800645e:	4615      	mov	r5, r2
 8006460:	fbb6 f1f3 	udiv	r1, r6, r3
 8006464:	fb03 6711 	mls	r7, r3, r1, r6
 8006468:	5dc7      	ldrb	r7, [r0, r7]
 800646a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800646e:	4637      	mov	r7, r6
 8006470:	42bb      	cmp	r3, r7
 8006472:	460e      	mov	r6, r1
 8006474:	d9f4      	bls.n	8006460 <_printf_i+0x118>
 8006476:	2b08      	cmp	r3, #8
 8006478:	d10b      	bne.n	8006492 <_printf_i+0x14a>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	07de      	lsls	r6, r3, #31
 800647e:	d508      	bpl.n	8006492 <_printf_i+0x14a>
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	6861      	ldr	r1, [r4, #4]
 8006484:	4299      	cmp	r1, r3
 8006486:	bfde      	ittt	le
 8006488:	2330      	movle	r3, #48	; 0x30
 800648a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800648e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006492:	1b52      	subs	r2, r2, r5
 8006494:	6122      	str	r2, [r4, #16]
 8006496:	464b      	mov	r3, r9
 8006498:	4621      	mov	r1, r4
 800649a:	4640      	mov	r0, r8
 800649c:	f8cd a000 	str.w	sl, [sp]
 80064a0:	aa03      	add	r2, sp, #12
 80064a2:	f7ff fedf 	bl	8006264 <_printf_common>
 80064a6:	3001      	adds	r0, #1
 80064a8:	d14a      	bne.n	8006540 <_printf_i+0x1f8>
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295
 80064ae:	b004      	add	sp, #16
 80064b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	f043 0320 	orr.w	r3, r3, #32
 80064ba:	6023      	str	r3, [r4, #0]
 80064bc:	2778      	movs	r7, #120	; 0x78
 80064be:	4832      	ldr	r0, [pc, #200]	; (8006588 <_printf_i+0x240>)
 80064c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	6829      	ldr	r1, [r5, #0]
 80064c8:	061f      	lsls	r7, r3, #24
 80064ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ce:	d402      	bmi.n	80064d6 <_printf_i+0x18e>
 80064d0:	065f      	lsls	r7, r3, #25
 80064d2:	bf48      	it	mi
 80064d4:	b2b6      	uxthmi	r6, r6
 80064d6:	07df      	lsls	r7, r3, #31
 80064d8:	bf48      	it	mi
 80064da:	f043 0320 	orrmi.w	r3, r3, #32
 80064de:	6029      	str	r1, [r5, #0]
 80064e0:	bf48      	it	mi
 80064e2:	6023      	strmi	r3, [r4, #0]
 80064e4:	b91e      	cbnz	r6, 80064ee <_printf_i+0x1a6>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f023 0320 	bic.w	r3, r3, #32
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	2310      	movs	r3, #16
 80064f0:	e7a6      	b.n	8006440 <_printf_i+0xf8>
 80064f2:	4824      	ldr	r0, [pc, #144]	; (8006584 <_printf_i+0x23c>)
 80064f4:	e7e4      	b.n	80064c0 <_printf_i+0x178>
 80064f6:	4615      	mov	r5, r2
 80064f8:	e7bd      	b.n	8006476 <_printf_i+0x12e>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	6826      	ldr	r6, [r4, #0]
 80064fe:	1d18      	adds	r0, r3, #4
 8006500:	6961      	ldr	r1, [r4, #20]
 8006502:	6028      	str	r0, [r5, #0]
 8006504:	0635      	lsls	r5, r6, #24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	d501      	bpl.n	800650e <_printf_i+0x1c6>
 800650a:	6019      	str	r1, [r3, #0]
 800650c:	e002      	b.n	8006514 <_printf_i+0x1cc>
 800650e:	0670      	lsls	r0, r6, #25
 8006510:	d5fb      	bpl.n	800650a <_printf_i+0x1c2>
 8006512:	8019      	strh	r1, [r3, #0]
 8006514:	2300      	movs	r3, #0
 8006516:	4615      	mov	r5, r2
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	e7bc      	b.n	8006496 <_printf_i+0x14e>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	2100      	movs	r1, #0
 8006520:	1d1a      	adds	r2, r3, #4
 8006522:	602a      	str	r2, [r5, #0]
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	6862      	ldr	r2, [r4, #4]
 8006528:	4628      	mov	r0, r5
 800652a:	f000 fbe2 	bl	8006cf2 <memchr>
 800652e:	b108      	cbz	r0, 8006534 <_printf_i+0x1ec>
 8006530:	1b40      	subs	r0, r0, r5
 8006532:	6060      	str	r0, [r4, #4]
 8006534:	6863      	ldr	r3, [r4, #4]
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	2300      	movs	r3, #0
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653e:	e7aa      	b.n	8006496 <_printf_i+0x14e>
 8006540:	462a      	mov	r2, r5
 8006542:	4649      	mov	r1, r9
 8006544:	4640      	mov	r0, r8
 8006546:	6923      	ldr	r3, [r4, #16]
 8006548:	47d0      	blx	sl
 800654a:	3001      	adds	r0, #1
 800654c:	d0ad      	beq.n	80064aa <_printf_i+0x162>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	079b      	lsls	r3, r3, #30
 8006552:	d413      	bmi.n	800657c <_printf_i+0x234>
 8006554:	68e0      	ldr	r0, [r4, #12]
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	4298      	cmp	r0, r3
 800655a:	bfb8      	it	lt
 800655c:	4618      	movlt	r0, r3
 800655e:	e7a6      	b.n	80064ae <_printf_i+0x166>
 8006560:	2301      	movs	r3, #1
 8006562:	4632      	mov	r2, r6
 8006564:	4649      	mov	r1, r9
 8006566:	4640      	mov	r0, r8
 8006568:	47d0      	blx	sl
 800656a:	3001      	adds	r0, #1
 800656c:	d09d      	beq.n	80064aa <_printf_i+0x162>
 800656e:	3501      	adds	r5, #1
 8006570:	68e3      	ldr	r3, [r4, #12]
 8006572:	9903      	ldr	r1, [sp, #12]
 8006574:	1a5b      	subs	r3, r3, r1
 8006576:	42ab      	cmp	r3, r5
 8006578:	dcf2      	bgt.n	8006560 <_printf_i+0x218>
 800657a:	e7eb      	b.n	8006554 <_printf_i+0x20c>
 800657c:	2500      	movs	r5, #0
 800657e:	f104 0619 	add.w	r6, r4, #25
 8006582:	e7f5      	b.n	8006570 <_printf_i+0x228>
 8006584:	0800a518 	.word	0x0800a518
 8006588:	0800a529 	.word	0x0800a529

0800658c <_scanf_float>:
 800658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	b087      	sub	sp, #28
 8006592:	9303      	str	r3, [sp, #12]
 8006594:	688b      	ldr	r3, [r1, #8]
 8006596:	4617      	mov	r7, r2
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800659e:	bf85      	ittet	hi
 80065a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065a4:	195b      	addhi	r3, r3, r5
 80065a6:	2300      	movls	r3, #0
 80065a8:	9302      	strhi	r3, [sp, #8]
 80065aa:	bf88      	it	hi
 80065ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065b0:	468b      	mov	fp, r1
 80065b2:	f04f 0500 	mov.w	r5, #0
 80065b6:	bf8c      	ite	hi
 80065b8:	608b      	strhi	r3, [r1, #8]
 80065ba:	9302      	strls	r3, [sp, #8]
 80065bc:	680b      	ldr	r3, [r1, #0]
 80065be:	4680      	mov	r8, r0
 80065c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80065c4:	f84b 3b1c 	str.w	r3, [fp], #28
 80065c8:	460c      	mov	r4, r1
 80065ca:	465e      	mov	r6, fp
 80065cc:	46aa      	mov	sl, r5
 80065ce:	46a9      	mov	r9, r5
 80065d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065d4:	9501      	str	r5, [sp, #4]
 80065d6:	68a2      	ldr	r2, [r4, #8]
 80065d8:	b152      	cbz	r2, 80065f0 <_scanf_float+0x64>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b4e      	cmp	r3, #78	; 0x4e
 80065e0:	d864      	bhi.n	80066ac <_scanf_float+0x120>
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d83c      	bhi.n	8006660 <_scanf_float+0xd4>
 80065e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065ea:	b2c8      	uxtb	r0, r1
 80065ec:	280e      	cmp	r0, #14
 80065ee:	d93a      	bls.n	8006666 <_scanf_float+0xda>
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	d003      	beq.n	80065fe <_scanf_float+0x72>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006602:	f1ba 0f01 	cmp.w	sl, #1
 8006606:	f200 8113 	bhi.w	8006830 <_scanf_float+0x2a4>
 800660a:	455e      	cmp	r6, fp
 800660c:	f200 8105 	bhi.w	800681a <_scanf_float+0x28e>
 8006610:	2501      	movs	r5, #1
 8006612:	4628      	mov	r0, r5
 8006614:	b007      	add	sp, #28
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800661e:	2a0d      	cmp	r2, #13
 8006620:	d8e6      	bhi.n	80065f0 <_scanf_float+0x64>
 8006622:	a101      	add	r1, pc, #4	; (adr r1, 8006628 <_scanf_float+0x9c>)
 8006624:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006628:	08006767 	.word	0x08006767
 800662c:	080065f1 	.word	0x080065f1
 8006630:	080065f1 	.word	0x080065f1
 8006634:	080065f1 	.word	0x080065f1
 8006638:	080067c7 	.word	0x080067c7
 800663c:	0800679f 	.word	0x0800679f
 8006640:	080065f1 	.word	0x080065f1
 8006644:	080065f1 	.word	0x080065f1
 8006648:	08006775 	.word	0x08006775
 800664c:	080065f1 	.word	0x080065f1
 8006650:	080065f1 	.word	0x080065f1
 8006654:	080065f1 	.word	0x080065f1
 8006658:	080065f1 	.word	0x080065f1
 800665c:	0800672d 	.word	0x0800672d
 8006660:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006664:	e7db      	b.n	800661e <_scanf_float+0x92>
 8006666:	290e      	cmp	r1, #14
 8006668:	d8c2      	bhi.n	80065f0 <_scanf_float+0x64>
 800666a:	a001      	add	r0, pc, #4	; (adr r0, 8006670 <_scanf_float+0xe4>)
 800666c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006670:	0800671f 	.word	0x0800671f
 8006674:	080065f1 	.word	0x080065f1
 8006678:	0800671f 	.word	0x0800671f
 800667c:	080067b3 	.word	0x080067b3
 8006680:	080065f1 	.word	0x080065f1
 8006684:	080066cd 	.word	0x080066cd
 8006688:	08006709 	.word	0x08006709
 800668c:	08006709 	.word	0x08006709
 8006690:	08006709 	.word	0x08006709
 8006694:	08006709 	.word	0x08006709
 8006698:	08006709 	.word	0x08006709
 800669c:	08006709 	.word	0x08006709
 80066a0:	08006709 	.word	0x08006709
 80066a4:	08006709 	.word	0x08006709
 80066a8:	08006709 	.word	0x08006709
 80066ac:	2b6e      	cmp	r3, #110	; 0x6e
 80066ae:	d809      	bhi.n	80066c4 <_scanf_float+0x138>
 80066b0:	2b60      	cmp	r3, #96	; 0x60
 80066b2:	d8b2      	bhi.n	800661a <_scanf_float+0x8e>
 80066b4:	2b54      	cmp	r3, #84	; 0x54
 80066b6:	d077      	beq.n	80067a8 <_scanf_float+0x21c>
 80066b8:	2b59      	cmp	r3, #89	; 0x59
 80066ba:	d199      	bne.n	80065f0 <_scanf_float+0x64>
 80066bc:	2d07      	cmp	r5, #7
 80066be:	d197      	bne.n	80065f0 <_scanf_float+0x64>
 80066c0:	2508      	movs	r5, #8
 80066c2:	e029      	b.n	8006718 <_scanf_float+0x18c>
 80066c4:	2b74      	cmp	r3, #116	; 0x74
 80066c6:	d06f      	beq.n	80067a8 <_scanf_float+0x21c>
 80066c8:	2b79      	cmp	r3, #121	; 0x79
 80066ca:	e7f6      	b.n	80066ba <_scanf_float+0x12e>
 80066cc:	6821      	ldr	r1, [r4, #0]
 80066ce:	05c8      	lsls	r0, r1, #23
 80066d0:	d51a      	bpl.n	8006708 <_scanf_float+0x17c>
 80066d2:	9b02      	ldr	r3, [sp, #8]
 80066d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066d8:	6021      	str	r1, [r4, #0]
 80066da:	f109 0901 	add.w	r9, r9, #1
 80066de:	b11b      	cbz	r3, 80066e8 <_scanf_float+0x15c>
 80066e0:	3b01      	subs	r3, #1
 80066e2:	3201      	adds	r2, #1
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	60a2      	str	r2, [r4, #8]
 80066e8:	68a3      	ldr	r3, [r4, #8]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	60a3      	str	r3, [r4, #8]
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	3301      	adds	r3, #1
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	f340 8084 	ble.w	8006808 <_scanf_float+0x27c>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	e766      	b.n	80065d6 <_scanf_float+0x4a>
 8006708:	eb1a 0f05 	cmn.w	sl, r5
 800670c:	f47f af70 	bne.w	80065f0 <_scanf_float+0x64>
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	f806 3b01 	strb.w	r3, [r6], #1
 800671c:	e7e4      	b.n	80066e8 <_scanf_float+0x15c>
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	0610      	lsls	r0, r2, #24
 8006722:	f57f af65 	bpl.w	80065f0 <_scanf_float+0x64>
 8006726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800672a:	e7f4      	b.n	8006716 <_scanf_float+0x18a>
 800672c:	f1ba 0f00 	cmp.w	sl, #0
 8006730:	d10e      	bne.n	8006750 <_scanf_float+0x1c4>
 8006732:	f1b9 0f00 	cmp.w	r9, #0
 8006736:	d10e      	bne.n	8006756 <_scanf_float+0x1ca>
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800673e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006742:	d108      	bne.n	8006756 <_scanf_float+0x1ca>
 8006744:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006748:	f04f 0a01 	mov.w	sl, #1
 800674c:	6022      	str	r2, [r4, #0]
 800674e:	e7e3      	b.n	8006718 <_scanf_float+0x18c>
 8006750:	f1ba 0f02 	cmp.w	sl, #2
 8006754:	d055      	beq.n	8006802 <_scanf_float+0x276>
 8006756:	2d01      	cmp	r5, #1
 8006758:	d002      	beq.n	8006760 <_scanf_float+0x1d4>
 800675a:	2d04      	cmp	r5, #4
 800675c:	f47f af48 	bne.w	80065f0 <_scanf_float+0x64>
 8006760:	3501      	adds	r5, #1
 8006762:	b2ed      	uxtb	r5, r5
 8006764:	e7d8      	b.n	8006718 <_scanf_float+0x18c>
 8006766:	f1ba 0f01 	cmp.w	sl, #1
 800676a:	f47f af41 	bne.w	80065f0 <_scanf_float+0x64>
 800676e:	f04f 0a02 	mov.w	sl, #2
 8006772:	e7d1      	b.n	8006718 <_scanf_float+0x18c>
 8006774:	b97d      	cbnz	r5, 8006796 <_scanf_float+0x20a>
 8006776:	f1b9 0f00 	cmp.w	r9, #0
 800677a:	f47f af3c 	bne.w	80065f6 <_scanf_float+0x6a>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006784:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006788:	f47f af39 	bne.w	80065fe <_scanf_float+0x72>
 800678c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006790:	2501      	movs	r5, #1
 8006792:	6022      	str	r2, [r4, #0]
 8006794:	e7c0      	b.n	8006718 <_scanf_float+0x18c>
 8006796:	2d03      	cmp	r5, #3
 8006798:	d0e2      	beq.n	8006760 <_scanf_float+0x1d4>
 800679a:	2d05      	cmp	r5, #5
 800679c:	e7de      	b.n	800675c <_scanf_float+0x1d0>
 800679e:	2d02      	cmp	r5, #2
 80067a0:	f47f af26 	bne.w	80065f0 <_scanf_float+0x64>
 80067a4:	2503      	movs	r5, #3
 80067a6:	e7b7      	b.n	8006718 <_scanf_float+0x18c>
 80067a8:	2d06      	cmp	r5, #6
 80067aa:	f47f af21 	bne.w	80065f0 <_scanf_float+0x64>
 80067ae:	2507      	movs	r5, #7
 80067b0:	e7b2      	b.n	8006718 <_scanf_float+0x18c>
 80067b2:	6822      	ldr	r2, [r4, #0]
 80067b4:	0591      	lsls	r1, r2, #22
 80067b6:	f57f af1b 	bpl.w	80065f0 <_scanf_float+0x64>
 80067ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80067be:	6022      	str	r2, [r4, #0]
 80067c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80067c4:	e7a8      	b.n	8006718 <_scanf_float+0x18c>
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80067cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80067d0:	d006      	beq.n	80067e0 <_scanf_float+0x254>
 80067d2:	0550      	lsls	r0, r2, #21
 80067d4:	f57f af0c 	bpl.w	80065f0 <_scanf_float+0x64>
 80067d8:	f1b9 0f00 	cmp.w	r9, #0
 80067dc:	f43f af0f 	beq.w	80065fe <_scanf_float+0x72>
 80067e0:	0591      	lsls	r1, r2, #22
 80067e2:	bf58      	it	pl
 80067e4:	9901      	ldrpl	r1, [sp, #4]
 80067e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067ea:	bf58      	it	pl
 80067ec:	eba9 0101 	subpl.w	r1, r9, r1
 80067f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	bf58      	it	pl
 80067fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	e78a      	b.n	8006718 <_scanf_float+0x18c>
 8006802:	f04f 0a03 	mov.w	sl, #3
 8006806:	e787      	b.n	8006718 <_scanf_float+0x18c>
 8006808:	4639      	mov	r1, r7
 800680a:	4640      	mov	r0, r8
 800680c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006810:	4798      	blx	r3
 8006812:	2800      	cmp	r0, #0
 8006814:	f43f aedf 	beq.w	80065d6 <_scanf_float+0x4a>
 8006818:	e6ea      	b.n	80065f0 <_scanf_float+0x64>
 800681a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800681e:	463a      	mov	r2, r7
 8006820:	4640      	mov	r0, r8
 8006822:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006826:	4798      	blx	r3
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	3b01      	subs	r3, #1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	e6ec      	b.n	800660a <_scanf_float+0x7e>
 8006830:	1e6b      	subs	r3, r5, #1
 8006832:	2b06      	cmp	r3, #6
 8006834:	d825      	bhi.n	8006882 <_scanf_float+0x2f6>
 8006836:	2d02      	cmp	r5, #2
 8006838:	d836      	bhi.n	80068a8 <_scanf_float+0x31c>
 800683a:	455e      	cmp	r6, fp
 800683c:	f67f aee8 	bls.w	8006610 <_scanf_float+0x84>
 8006840:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006844:	463a      	mov	r2, r7
 8006846:	4640      	mov	r0, r8
 8006848:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800684c:	4798      	blx	r3
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	3b01      	subs	r3, #1
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	e7f1      	b.n	800683a <_scanf_float+0x2ae>
 8006856:	9802      	ldr	r0, [sp, #8]
 8006858:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800685c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006860:	463a      	mov	r2, r7
 8006862:	9002      	str	r0, [sp, #8]
 8006864:	4640      	mov	r0, r8
 8006866:	4798      	blx	r3
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	3b01      	subs	r3, #1
 800686c:	6123      	str	r3, [r4, #16]
 800686e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006872:	fa5f fa8a 	uxtb.w	sl, sl
 8006876:	f1ba 0f02 	cmp.w	sl, #2
 800687a:	d1ec      	bne.n	8006856 <_scanf_float+0x2ca>
 800687c:	3d03      	subs	r5, #3
 800687e:	b2ed      	uxtb	r5, r5
 8006880:	1b76      	subs	r6, r6, r5
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	05da      	lsls	r2, r3, #23
 8006886:	d52f      	bpl.n	80068e8 <_scanf_float+0x35c>
 8006888:	055b      	lsls	r3, r3, #21
 800688a:	d510      	bpl.n	80068ae <_scanf_float+0x322>
 800688c:	455e      	cmp	r6, fp
 800688e:	f67f aebf 	bls.w	8006610 <_scanf_float+0x84>
 8006892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006896:	463a      	mov	r2, r7
 8006898:	4640      	mov	r0, r8
 800689a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800689e:	4798      	blx	r3
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	e7f1      	b.n	800688c <_scanf_float+0x300>
 80068a8:	46aa      	mov	sl, r5
 80068aa:	9602      	str	r6, [sp, #8]
 80068ac:	e7df      	b.n	800686e <_scanf_float+0x2e2>
 80068ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	2965      	cmp	r1, #101	; 0x65
 80068b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80068ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	d00c      	beq.n	80068dc <_scanf_float+0x350>
 80068c2:	2945      	cmp	r1, #69	; 0x45
 80068c4:	d00a      	beq.n	80068dc <_scanf_float+0x350>
 80068c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068ca:	463a      	mov	r2, r7
 80068cc:	4640      	mov	r0, r8
 80068ce:	4798      	blx	r3
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	1eb5      	subs	r5, r6, #2
 80068da:	6123      	str	r3, [r4, #16]
 80068dc:	463a      	mov	r2, r7
 80068de:	4640      	mov	r0, r8
 80068e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e4:	4798      	blx	r3
 80068e6:	462e      	mov	r6, r5
 80068e8:	6825      	ldr	r5, [r4, #0]
 80068ea:	f015 0510 	ands.w	r5, r5, #16
 80068ee:	d155      	bne.n	800699c <_scanf_float+0x410>
 80068f0:	7035      	strb	r5, [r6, #0]
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fc:	d11d      	bne.n	800693a <_scanf_float+0x3ae>
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	454b      	cmp	r3, r9
 8006902:	eba3 0209 	sub.w	r2, r3, r9
 8006906:	d125      	bne.n	8006954 <_scanf_float+0x3c8>
 8006908:	2200      	movs	r2, #0
 800690a:	4659      	mov	r1, fp
 800690c:	4640      	mov	r0, r8
 800690e:	f002 fc23 	bl	8009158 <_strtod_r>
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	f8d4 c000 	ldr.w	ip, [r4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f01c 0f02 	tst.w	ip, #2
 800691e:	4606      	mov	r6, r0
 8006920:	460f      	mov	r7, r1
 8006922:	f103 0204 	add.w	r2, r3, #4
 8006926:	d020      	beq.n	800696a <_scanf_float+0x3de>
 8006928:	9903      	ldr	r1, [sp, #12]
 800692a:	600a      	str	r2, [r1, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	e9c3 6700 	strd	r6, r7, [r3]
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60e3      	str	r3, [r4, #12]
 8006938:	e66b      	b.n	8006612 <_scanf_float+0x86>
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0e3      	beq.n	8006908 <_scanf_float+0x37c>
 8006940:	9905      	ldr	r1, [sp, #20]
 8006942:	230a      	movs	r3, #10
 8006944:	462a      	mov	r2, r5
 8006946:	4640      	mov	r0, r8
 8006948:	3101      	adds	r1, #1
 800694a:	f002 fc89 	bl	8009260 <_strtol_r>
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	9e05      	ldr	r6, [sp, #20]
 8006952:	1ac2      	subs	r2, r0, r3
 8006954:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006958:	429e      	cmp	r6, r3
 800695a:	bf28      	it	cs
 800695c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006960:	4630      	mov	r0, r6
 8006962:	490f      	ldr	r1, [pc, #60]	; (80069a0 <_scanf_float+0x414>)
 8006964:	f000 f8e2 	bl	8006b2c <siprintf>
 8006968:	e7ce      	b.n	8006908 <_scanf_float+0x37c>
 800696a:	f01c 0f04 	tst.w	ip, #4
 800696e:	d1db      	bne.n	8006928 <_scanf_float+0x39c>
 8006970:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006974:	f8cc 2000 	str.w	r2, [ip]
 8006978:	f8d3 8000 	ldr.w	r8, [r3]
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	f7fa f84e 	bl	8000a20 <__aeabi_dcmpun>
 8006984:	b128      	cbz	r0, 8006992 <_scanf_float+0x406>
 8006986:	4807      	ldr	r0, [pc, #28]	; (80069a4 <_scanf_float+0x418>)
 8006988:	f000 f9c2 	bl	8006d10 <nanf>
 800698c:	f8c8 0000 	str.w	r0, [r8]
 8006990:	e7cf      	b.n	8006932 <_scanf_float+0x3a6>
 8006992:	4630      	mov	r0, r6
 8006994:	4639      	mov	r1, r7
 8006996:	f7fa f8a1 	bl	8000adc <__aeabi_d2f>
 800699a:	e7f7      	b.n	800698c <_scanf_float+0x400>
 800699c:	2500      	movs	r5, #0
 800699e:	e638      	b.n	8006612 <_scanf_float+0x86>
 80069a0:	0800a53a 	.word	0x0800a53a
 80069a4:	0800a8cd 	.word	0x0800a8cd

080069a8 <std>:
 80069a8:	2300      	movs	r3, #0
 80069aa:	b510      	push	{r4, lr}
 80069ac:	4604      	mov	r4, r0
 80069ae:	e9c0 3300 	strd	r3, r3, [r0]
 80069b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069b6:	6083      	str	r3, [r0, #8]
 80069b8:	8181      	strh	r1, [r0, #12]
 80069ba:	6643      	str	r3, [r0, #100]	; 0x64
 80069bc:	81c2      	strh	r2, [r0, #14]
 80069be:	6183      	str	r3, [r0, #24]
 80069c0:	4619      	mov	r1, r3
 80069c2:	2208      	movs	r2, #8
 80069c4:	305c      	adds	r0, #92	; 0x5c
 80069c6:	f000 f914 	bl	8006bf2 <memset>
 80069ca:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <std+0x58>)
 80069cc:	6224      	str	r4, [r4, #32]
 80069ce:	6263      	str	r3, [r4, #36]	; 0x24
 80069d0:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <std+0x5c>)
 80069d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <std+0x60>)
 80069d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069d8:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <std+0x64>)
 80069da:	6323      	str	r3, [r4, #48]	; 0x30
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <std+0x68>)
 80069de:	429c      	cmp	r4, r3
 80069e0:	d006      	beq.n	80069f0 <std+0x48>
 80069e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80069e6:	4294      	cmp	r4, r2
 80069e8:	d002      	beq.n	80069f0 <std+0x48>
 80069ea:	33d0      	adds	r3, #208	; 0xd0
 80069ec:	429c      	cmp	r4, r3
 80069ee:	d105      	bne.n	80069fc <std+0x54>
 80069f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f8:	f000 b978 	b.w	8006cec <__retarget_lock_init_recursive>
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	bf00      	nop
 8006a00:	08006b6d 	.word	0x08006b6d
 8006a04:	08006b8f 	.word	0x08006b8f
 8006a08:	08006bc7 	.word	0x08006bc7
 8006a0c:	08006beb 	.word	0x08006beb
 8006a10:	200003b4 	.word	0x200003b4

08006a14 <stdio_exit_handler>:
 8006a14:	4a02      	ldr	r2, [pc, #8]	; (8006a20 <stdio_exit_handler+0xc>)
 8006a16:	4903      	ldr	r1, [pc, #12]	; (8006a24 <stdio_exit_handler+0x10>)
 8006a18:	4803      	ldr	r0, [pc, #12]	; (8006a28 <stdio_exit_handler+0x14>)
 8006a1a:	f000 b869 	b.w	8006af0 <_fwalk_sglue>
 8006a1e:	bf00      	nop
 8006a20:	2000000c 	.word	0x2000000c
 8006a24:	08009619 	.word	0x08009619
 8006a28:	20000018 	.word	0x20000018

08006a2c <cleanup_stdio>:
 8006a2c:	6841      	ldr	r1, [r0, #4]
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <cleanup_stdio+0x34>)
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4299      	cmp	r1, r3
 8006a34:	4604      	mov	r4, r0
 8006a36:	d001      	beq.n	8006a3c <cleanup_stdio+0x10>
 8006a38:	f002 fdee 	bl	8009618 <_fflush_r>
 8006a3c:	68a1      	ldr	r1, [r4, #8]
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <cleanup_stdio+0x38>)
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <cleanup_stdio+0x1e>
 8006a44:	4620      	mov	r0, r4
 8006a46:	f002 fde7 	bl	8009618 <_fflush_r>
 8006a4a:	68e1      	ldr	r1, [r4, #12]
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <cleanup_stdio+0x3c>)
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	d004      	beq.n	8006a5c <cleanup_stdio+0x30>
 8006a52:	4620      	mov	r0, r4
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a58:	f002 bdde 	b.w	8009618 <_fflush_r>
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	bf00      	nop
 8006a60:	200003b4 	.word	0x200003b4
 8006a64:	2000041c 	.word	0x2000041c
 8006a68:	20000484 	.word	0x20000484

08006a6c <global_stdio_init.part.0>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <global_stdio_init.part.0+0x30>)
 8006a70:	4c0b      	ldr	r4, [pc, #44]	; (8006aa0 <global_stdio_init.part.0+0x34>)
 8006a72:	4a0c      	ldr	r2, [pc, #48]	; (8006aa4 <global_stdio_init.part.0+0x38>)
 8006a74:	4620      	mov	r0, r4
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	2104      	movs	r1, #4
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f7ff ff94 	bl	80069a8 <std>
 8006a80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a84:	2201      	movs	r2, #1
 8006a86:	2109      	movs	r1, #9
 8006a88:	f7ff ff8e 	bl	80069a8 <std>
 8006a8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a90:	2202      	movs	r2, #2
 8006a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a96:	2112      	movs	r1, #18
 8006a98:	f7ff bf86 	b.w	80069a8 <std>
 8006a9c:	200004ec 	.word	0x200004ec
 8006aa0:	200003b4 	.word	0x200003b4
 8006aa4:	08006a15 	.word	0x08006a15

08006aa8 <__sfp_lock_acquire>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__sfp_lock_acquire+0x8>)
 8006aaa:	f000 b920 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	200004f5 	.word	0x200004f5

08006ab4 <__sfp_lock_release>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	; (8006abc <__sfp_lock_release+0x8>)
 8006ab6:	f000 b91b 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	200004f5 	.word	0x200004f5

08006ac0 <__sinit>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	f7ff fff0 	bl	8006aa8 <__sfp_lock_acquire>
 8006ac8:	6a23      	ldr	r3, [r4, #32]
 8006aca:	b11b      	cbz	r3, 8006ad4 <__sinit+0x14>
 8006acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad0:	f7ff bff0 	b.w	8006ab4 <__sfp_lock_release>
 8006ad4:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <__sinit+0x28>)
 8006ad6:	6223      	str	r3, [r4, #32]
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <__sinit+0x2c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f5      	bne.n	8006acc <__sinit+0xc>
 8006ae0:	f7ff ffc4 	bl	8006a6c <global_stdio_init.part.0>
 8006ae4:	e7f2      	b.n	8006acc <__sinit+0xc>
 8006ae6:	bf00      	nop
 8006ae8:	08006a2d 	.word	0x08006a2d
 8006aec:	200004ec 	.word	0x200004ec

08006af0 <_fwalk_sglue>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	4607      	mov	r7, r0
 8006af6:	4688      	mov	r8, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	2600      	movs	r6, #0
 8006afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b00:	f1b9 0901 	subs.w	r9, r9, #1
 8006b04:	d505      	bpl.n	8006b12 <_fwalk_sglue+0x22>
 8006b06:	6824      	ldr	r4, [r4, #0]
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	d1f7      	bne.n	8006afc <_fwalk_sglue+0xc>
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d907      	bls.n	8006b28 <_fwalk_sglue+0x38>
 8006b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	d003      	beq.n	8006b28 <_fwalk_sglue+0x38>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c0      	blx	r8
 8006b26:	4306      	orrs	r6, r0
 8006b28:	3568      	adds	r5, #104	; 0x68
 8006b2a:	e7e9      	b.n	8006b00 <_fwalk_sglue+0x10>

08006b2c <siprintf>:
 8006b2c:	b40e      	push	{r1, r2, r3}
 8006b2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b32:	b500      	push	{lr}
 8006b34:	b09c      	sub	sp, #112	; 0x70
 8006b36:	ab1d      	add	r3, sp, #116	; 0x74
 8006b38:	9002      	str	r0, [sp, #8]
 8006b3a:	9006      	str	r0, [sp, #24]
 8006b3c:	9107      	str	r1, [sp, #28]
 8006b3e:	9104      	str	r1, [sp, #16]
 8006b40:	4808      	ldr	r0, [pc, #32]	; (8006b64 <siprintf+0x38>)
 8006b42:	4909      	ldr	r1, [pc, #36]	; (8006b68 <siprintf+0x3c>)
 8006b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b48:	9105      	str	r1, [sp, #20]
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	a902      	add	r1, sp, #8
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	f002 fbe2 	bl	8009318 <_svfiprintf_r>
 8006b54:	2200      	movs	r2, #0
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	b01c      	add	sp, #112	; 0x70
 8006b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b60:	b003      	add	sp, #12
 8006b62:	4770      	bx	lr
 8006b64:	20000064 	.word	0x20000064
 8006b68:	ffff0208 	.word	0xffff0208

08006b6c <__sread>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	460c      	mov	r4, r1
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	f000 f86c 	bl	8006c50 <_read_r>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	bfab      	itete	ge
 8006b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b80:	181b      	addge	r3, r3, r0
 8006b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b86:	bfac      	ite	ge
 8006b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b8a:	81a3      	strhlt	r3, [r4, #12]
 8006b8c:	bd10      	pop	{r4, pc}

08006b8e <__swrite>:
 8006b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b92:	461f      	mov	r7, r3
 8006b94:	898b      	ldrh	r3, [r1, #12]
 8006b96:	4605      	mov	r5, r0
 8006b98:	05db      	lsls	r3, r3, #23
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	d505      	bpl.n	8006bac <__swrite+0x1e>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba8:	f000 f840 	bl	8006c2c <_lseek_r>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	4632      	mov	r2, r6
 8006bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	463b      	mov	r3, r7
 8006bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc2:	f000 b857 	b.w	8006c74 <_write_r>

08006bc6 <__sseek>:
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	460c      	mov	r4, r1
 8006bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bce:	f000 f82d 	bl	8006c2c <_lseek_r>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	bf15      	itete	ne
 8006bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006be2:	81a3      	strheq	r3, [r4, #12]
 8006be4:	bf18      	it	ne
 8006be6:	81a3      	strhne	r3, [r4, #12]
 8006be8:	bd10      	pop	{r4, pc}

08006bea <__sclose>:
 8006bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bee:	f000 b80d 	b.w	8006c0c <_close_r>

08006bf2 <memset>:
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4402      	add	r2, r0
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d100      	bne.n	8006bfc <memset+0xa>
 8006bfa:	4770      	bx	lr
 8006bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8006c00:	e7f9      	b.n	8006bf6 <memset+0x4>
	...

08006c04 <_localeconv_r>:
 8006c04:	4800      	ldr	r0, [pc, #0]	; (8006c08 <_localeconv_r+0x4>)
 8006c06:	4770      	bx	lr
 8006c08:	20000158 	.word	0x20000158

08006c0c <_close_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4d05      	ldr	r5, [pc, #20]	; (8006c28 <_close_r+0x1c>)
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fb fee0 	bl	80029dc <_close>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_close_r+0x1a>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_close_r+0x1a>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	200004f0 	.word	0x200004f0

08006c2c <_lseek_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	2200      	movs	r2, #0
 8006c36:	4d05      	ldr	r5, [pc, #20]	; (8006c4c <_lseek_r+0x20>)
 8006c38:	602a      	str	r2, [r5, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f7fb fef2 	bl	8002a24 <_lseek>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_lseek_r+0x1e>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_lseek_r+0x1e>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	200004f0 	.word	0x200004f0

08006c50 <_read_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4d05      	ldr	r5, [pc, #20]	; (8006c70 <_read_r+0x20>)
 8006c5c:	602a      	str	r2, [r5, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f7fb fe83 	bl	800296a <_read>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_read_r+0x1e>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_read_r+0x1e>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	200004f0 	.word	0x200004f0

08006c74 <_write_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4d05      	ldr	r5, [pc, #20]	; (8006c94 <_write_r+0x20>)
 8006c80:	602a      	str	r2, [r5, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7fb fe8e 	bl	80029a4 <_write>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_write_r+0x1e>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_write_r+0x1e>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	200004f0 	.word	0x200004f0

08006c98 <__errno>:
 8006c98:	4b01      	ldr	r3, [pc, #4]	; (8006ca0 <__errno+0x8>)
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000064 	.word	0x20000064

08006ca4 <__libc_init_array>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	4d0c      	ldr	r5, [pc, #48]	; (8006cdc <__libc_init_array+0x38>)
 8006caa:	4c0d      	ldr	r4, [pc, #52]	; (8006ce0 <__libc_init_array+0x3c>)
 8006cac:	1b64      	subs	r4, r4, r5
 8006cae:	10a4      	asrs	r4, r4, #2
 8006cb0:	42a6      	cmp	r6, r4
 8006cb2:	d109      	bne.n	8006cc8 <__libc_init_array+0x24>
 8006cb4:	f003 fbc2 	bl	800a43c <_init>
 8006cb8:	2600      	movs	r6, #0
 8006cba:	4d0a      	ldr	r5, [pc, #40]	; (8006ce4 <__libc_init_array+0x40>)
 8006cbc:	4c0a      	ldr	r4, [pc, #40]	; (8006ce8 <__libc_init_array+0x44>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	42a6      	cmp	r6, r4
 8006cc4:	d105      	bne.n	8006cd2 <__libc_init_array+0x2e>
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ccc:	4798      	blx	r3
 8006cce:	3601      	adds	r6, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__libc_init_array+0xc>
 8006cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd6:	4798      	blx	r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	e7f2      	b.n	8006cc2 <__libc_init_array+0x1e>
 8006cdc:	0800a930 	.word	0x0800a930
 8006ce0:	0800a930 	.word	0x0800a930
 8006ce4:	0800a930 	.word	0x0800a930
 8006ce8:	0800a934 	.word	0x0800a934

08006cec <__retarget_lock_init_recursive>:
 8006cec:	4770      	bx	lr

08006cee <__retarget_lock_acquire_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <__retarget_lock_release_recursive>:
 8006cf0:	4770      	bx	lr

08006cf2 <memchr>:
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	b2c9      	uxtb	r1, r1
 8006cf8:	4402      	add	r2, r0
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	d101      	bne.n	8006d04 <memchr+0x12>
 8006d00:	2000      	movs	r0, #0
 8006d02:	e003      	b.n	8006d0c <memchr+0x1a>
 8006d04:	7804      	ldrb	r4, [r0, #0]
 8006d06:	3301      	adds	r3, #1
 8006d08:	428c      	cmp	r4, r1
 8006d0a:	d1f6      	bne.n	8006cfa <memchr+0x8>
 8006d0c:	bd10      	pop	{r4, pc}
	...

08006d10 <nanf>:
 8006d10:	4800      	ldr	r0, [pc, #0]	; (8006d14 <nanf+0x4>)
 8006d12:	4770      	bx	lr
 8006d14:	7fc00000 	.word	0x7fc00000

08006d18 <quorem>:
 8006d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	6903      	ldr	r3, [r0, #16]
 8006d1e:	690c      	ldr	r4, [r1, #16]
 8006d20:	4607      	mov	r7, r0
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	db7f      	blt.n	8006e26 <quorem+0x10e>
 8006d26:	3c01      	subs	r4, #1
 8006d28:	f100 0514 	add.w	r5, r0, #20
 8006d2c:	f101 0814 	add.w	r8, r1, #20
 8006d30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	429a      	cmp	r2, r3
 8006d42:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d4e:	d331      	bcc.n	8006db4 <quorem+0x9c>
 8006d50:	f04f 0e00 	mov.w	lr, #0
 8006d54:	4640      	mov	r0, r8
 8006d56:	46ac      	mov	ip, r5
 8006d58:	46f2      	mov	sl, lr
 8006d5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d5e:	b293      	uxth	r3, r2
 8006d60:	fb06 e303 	mla	r3, r6, r3, lr
 8006d64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d68:	0c1a      	lsrs	r2, r3, #16
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	fb06 220e 	mla	r2, r6, lr, r2
 8006d70:	ebaa 0303 	sub.w	r3, sl, r3
 8006d74:	f8dc a000 	ldr.w	sl, [ip]
 8006d78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d7c:	fa1f fa8a 	uxth.w	sl, sl
 8006d80:	4453      	add	r3, sl
 8006d82:	f8dc a000 	ldr.w	sl, [ip]
 8006d86:	b292      	uxth	r2, r2
 8006d88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d96:	4581      	cmp	r9, r0
 8006d98:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d9c:	f84c 3b04 	str.w	r3, [ip], #4
 8006da0:	d2db      	bcs.n	8006d5a <quorem+0x42>
 8006da2:	f855 300b 	ldr.w	r3, [r5, fp]
 8006da6:	b92b      	cbnz	r3, 8006db4 <quorem+0x9c>
 8006da8:	9b01      	ldr	r3, [sp, #4]
 8006daa:	3b04      	subs	r3, #4
 8006dac:	429d      	cmp	r5, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	d32d      	bcc.n	8006e0e <quorem+0xf6>
 8006db2:	613c      	str	r4, [r7, #16]
 8006db4:	4638      	mov	r0, r7
 8006db6:	f001 f9df 	bl	8008178 <__mcmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	db23      	blt.n	8006e06 <quorem+0xee>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	3601      	adds	r6, #1
 8006dc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dc8:	f8d1 c000 	ldr.w	ip, [r1]
 8006dcc:	b293      	uxth	r3, r2
 8006dce:	1ac3      	subs	r3, r0, r3
 8006dd0:	0c12      	lsrs	r2, r2, #16
 8006dd2:	fa1f f08c 	uxth.w	r0, ip
 8006dd6:	4403      	add	r3, r0
 8006dd8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006de6:	45c1      	cmp	r9, r8
 8006de8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006dec:	f841 3b04 	str.w	r3, [r1], #4
 8006df0:	d2e8      	bcs.n	8006dc4 <quorem+0xac>
 8006df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dfa:	b922      	cbnz	r2, 8006e06 <quorem+0xee>
 8006dfc:	3b04      	subs	r3, #4
 8006dfe:	429d      	cmp	r5, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	d30a      	bcc.n	8006e1a <quorem+0x102>
 8006e04:	613c      	str	r4, [r7, #16]
 8006e06:	4630      	mov	r0, r6
 8006e08:	b003      	add	sp, #12
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	3b04      	subs	r3, #4
 8006e12:	2a00      	cmp	r2, #0
 8006e14:	d1cd      	bne.n	8006db2 <quorem+0x9a>
 8006e16:	3c01      	subs	r4, #1
 8006e18:	e7c8      	b.n	8006dac <quorem+0x94>
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	3b04      	subs	r3, #4
 8006e1e:	2a00      	cmp	r2, #0
 8006e20:	d1f0      	bne.n	8006e04 <quorem+0xec>
 8006e22:	3c01      	subs	r4, #1
 8006e24:	e7eb      	b.n	8006dfe <quorem+0xe6>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e7ee      	b.n	8006e08 <quorem+0xf0>
 8006e2a:	0000      	movs	r0, r0
 8006e2c:	0000      	movs	r0, r0
	...

08006e30 <_dtoa_r>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	4616      	mov	r6, r2
 8006e36:	461f      	mov	r7, r3
 8006e38:	69c4      	ldr	r4, [r0, #28]
 8006e3a:	b099      	sub	sp, #100	; 0x64
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006e46:	b974      	cbnz	r4, 8006e66 <_dtoa_r+0x36>
 8006e48:	2010      	movs	r0, #16
 8006e4a:	f000 fe1d 	bl	8007a88 <malloc>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	61e8      	str	r0, [r5, #28]
 8006e52:	b920      	cbnz	r0, 8006e5e <_dtoa_r+0x2e>
 8006e54:	21ef      	movs	r1, #239	; 0xef
 8006e56:	4bac      	ldr	r3, [pc, #688]	; (8007108 <_dtoa_r+0x2d8>)
 8006e58:	48ac      	ldr	r0, [pc, #688]	; (800710c <_dtoa_r+0x2dc>)
 8006e5a:	f002 fc55 	bl	8009708 <__assert_func>
 8006e5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e62:	6004      	str	r4, [r0, #0]
 8006e64:	60c4      	str	r4, [r0, #12]
 8006e66:	69eb      	ldr	r3, [r5, #28]
 8006e68:	6819      	ldr	r1, [r3, #0]
 8006e6a:	b151      	cbz	r1, 8006e82 <_dtoa_r+0x52>
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4093      	lsls	r3, r2
 8006e72:	604a      	str	r2, [r1, #4]
 8006e74:	608b      	str	r3, [r1, #8]
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fefa 	bl	8007c70 <_Bfree>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	69eb      	ldr	r3, [r5, #28]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	1e3b      	subs	r3, r7, #0
 8006e84:	bfaf      	iteee	ge
 8006e86:	2300      	movge	r3, #0
 8006e88:	2201      	movlt	r2, #1
 8006e8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	9305      	strlt	r3, [sp, #20]
 8006e90:	bfa8      	it	ge
 8006e92:	f8c8 3000 	strge.w	r3, [r8]
 8006e96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006e9a:	4b9d      	ldr	r3, [pc, #628]	; (8007110 <_dtoa_r+0x2e0>)
 8006e9c:	bfb8      	it	lt
 8006e9e:	f8c8 2000 	strlt.w	r2, [r8]
 8006ea2:	ea33 0309 	bics.w	r3, r3, r9
 8006ea6:	d119      	bne.n	8006edc <_dtoa_r+0xac>
 8006ea8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006eac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eb4:	4333      	orrs	r3, r6
 8006eb6:	f000 8589 	beq.w	80079cc <_dtoa_r+0xb9c>
 8006eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ebc:	b953      	cbnz	r3, 8006ed4 <_dtoa_r+0xa4>
 8006ebe:	4b95      	ldr	r3, [pc, #596]	; (8007114 <_dtoa_r+0x2e4>)
 8006ec0:	e023      	b.n	8006f0a <_dtoa_r+0xda>
 8006ec2:	4b95      	ldr	r3, [pc, #596]	; (8007118 <_dtoa_r+0x2e8>)
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	9803      	ldr	r0, [sp, #12]
 8006ece:	b019      	add	sp, #100	; 0x64
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	4b8f      	ldr	r3, [pc, #572]	; (8007114 <_dtoa_r+0x2e4>)
 8006ed6:	9303      	str	r3, [sp, #12]
 8006ed8:	3303      	adds	r3, #3
 8006eda:	e7f5      	b.n	8006ec8 <_dtoa_r+0x98>
 8006edc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ee0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	f7f9 fd66 	bl	80009bc <__aeabi_dcmpeq>
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	b160      	cbz	r0, 8006f0e <_dtoa_r+0xde>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8562 	beq.w	80079c6 <_dtoa_r+0xb96>
 8006f02:	4b86      	ldr	r3, [pc, #536]	; (800711c <_dtoa_r+0x2ec>)
 8006f04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	e7de      	b.n	8006ecc <_dtoa_r+0x9c>
 8006f0e:	ab16      	add	r3, sp, #88	; 0x58
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	ab17      	add	r3, sp, #92	; 0x5c
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4628      	mov	r0, r5
 8006f18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f1c:	f001 fa3c 	bl	8008398 <__d2b>
 8006f20:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f24:	4682      	mov	sl, r0
 8006f26:	2c00      	cmp	r4, #0
 8006f28:	d07e      	beq.n	8007028 <_dtoa_r+0x1f8>
 8006f2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f30:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f38:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f40:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006f44:	4619      	mov	r1, r3
 8006f46:	2200      	movs	r2, #0
 8006f48:	4b75      	ldr	r3, [pc, #468]	; (8007120 <_dtoa_r+0x2f0>)
 8006f4a:	f7f9 f917 	bl	800017c <__aeabi_dsub>
 8006f4e:	a368      	add	r3, pc, #416	; (adr r3, 80070f0 <_dtoa_r+0x2c0>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f7f9 faca 	bl	80004ec <__aeabi_dmul>
 8006f58:	a367      	add	r3, pc, #412	; (adr r3, 80070f8 <_dtoa_r+0x2c8>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f90f 	bl	8000180 <__adddf3>
 8006f62:	4606      	mov	r6, r0
 8006f64:	4620      	mov	r0, r4
 8006f66:	460f      	mov	r7, r1
 8006f68:	f7f9 fa56 	bl	8000418 <__aeabi_i2d>
 8006f6c:	a364      	add	r3, pc, #400	; (adr r3, 8007100 <_dtoa_r+0x2d0>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 fabb 	bl	80004ec <__aeabi_dmul>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	f7f9 f8ff 	bl	8000180 <__adddf3>
 8006f82:	4606      	mov	r6, r0
 8006f84:	460f      	mov	r7, r1
 8006f86:	f7f9 fd61 	bl	8000a4c <__aeabi_d2iz>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4683      	mov	fp, r0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	4630      	mov	r0, r6
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 fd1c 	bl	80009d0 <__aeabi_dcmplt>
 8006f98:	b148      	cbz	r0, 8006fae <_dtoa_r+0x17e>
 8006f9a:	4658      	mov	r0, fp
 8006f9c:	f7f9 fa3c 	bl	8000418 <__aeabi_i2d>
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	f7f9 fd0a 	bl	80009bc <__aeabi_dcmpeq>
 8006fa8:	b908      	cbnz	r0, 8006fae <_dtoa_r+0x17e>
 8006faa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fae:	f1bb 0f16 	cmp.w	fp, #22
 8006fb2:	d857      	bhi.n	8007064 <_dtoa_r+0x234>
 8006fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	; (8007124 <_dtoa_r+0x2f4>)
 8006fba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 fd05 	bl	80009d0 <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d04e      	beq.n	8007068 <_dtoa_r+0x238>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006fd4:	1b1b      	subs	r3, r3, r4
 8006fd6:	1e5a      	subs	r2, r3, #1
 8006fd8:	bf46      	itte	mi
 8006fda:	f1c3 0901 	rsbmi	r9, r3, #1
 8006fde:	2300      	movmi	r3, #0
 8006fe0:	f04f 0900 	movpl.w	r9, #0
 8006fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe6:	bf48      	it	mi
 8006fe8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006fea:	f1bb 0f00 	cmp.w	fp, #0
 8006fee:	db3d      	blt.n	800706c <_dtoa_r+0x23c>
 8006ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006ff6:	445b      	add	r3, fp
 8006ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007000:	2b09      	cmp	r3, #9
 8007002:	d867      	bhi.n	80070d4 <_dtoa_r+0x2a4>
 8007004:	2b05      	cmp	r3, #5
 8007006:	bfc4      	itt	gt
 8007008:	3b04      	subgt	r3, #4
 800700a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800700c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800700e:	bfc8      	it	gt
 8007010:	2400      	movgt	r4, #0
 8007012:	f1a3 0302 	sub.w	r3, r3, #2
 8007016:	bfd8      	it	le
 8007018:	2401      	movle	r4, #1
 800701a:	2b03      	cmp	r3, #3
 800701c:	f200 8086 	bhi.w	800712c <_dtoa_r+0x2fc>
 8007020:	e8df f003 	tbb	[pc, r3]
 8007024:	5637392c 	.word	0x5637392c
 8007028:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800702c:	441c      	add	r4, r3
 800702e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007032:	2b20      	cmp	r3, #32
 8007034:	bfc1      	itttt	gt
 8007036:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800703a:	fa09 f903 	lslgt.w	r9, r9, r3
 800703e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007042:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007046:	bfd6      	itet	le
 8007048:	f1c3 0320 	rsble	r3, r3, #32
 800704c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007050:	fa06 f003 	lslle.w	r0, r6, r3
 8007054:	f7f9 f9d0 	bl	80003f8 <__aeabi_ui2d>
 8007058:	2201      	movs	r2, #1
 800705a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800705e:	3c01      	subs	r4, #1
 8007060:	9213      	str	r2, [sp, #76]	; 0x4c
 8007062:	e76f      	b.n	8006f44 <_dtoa_r+0x114>
 8007064:	2301      	movs	r3, #1
 8007066:	e7b3      	b.n	8006fd0 <_dtoa_r+0x1a0>
 8007068:	900f      	str	r0, [sp, #60]	; 0x3c
 800706a:	e7b2      	b.n	8006fd2 <_dtoa_r+0x1a2>
 800706c:	f1cb 0300 	rsb	r3, fp, #0
 8007070:	930a      	str	r3, [sp, #40]	; 0x28
 8007072:	2300      	movs	r3, #0
 8007074:	eba9 090b 	sub.w	r9, r9, fp
 8007078:	930e      	str	r3, [sp, #56]	; 0x38
 800707a:	e7c0      	b.n	8006ffe <_dtoa_r+0x1ce>
 800707c:	2300      	movs	r3, #0
 800707e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007082:	2b00      	cmp	r3, #0
 8007084:	dc55      	bgt.n	8007132 <_dtoa_r+0x302>
 8007086:	2301      	movs	r3, #1
 8007088:	461a      	mov	r2, r3
 800708a:	9306      	str	r3, [sp, #24]
 800708c:	9308      	str	r3, [sp, #32]
 800708e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007090:	e00b      	b.n	80070aa <_dtoa_r+0x27a>
 8007092:	2301      	movs	r3, #1
 8007094:	e7f3      	b.n	800707e <_dtoa_r+0x24e>
 8007096:	2300      	movs	r3, #0
 8007098:	930b      	str	r3, [sp, #44]	; 0x2c
 800709a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800709c:	445b      	add	r3, fp
 800709e:	9306      	str	r3, [sp, #24]
 80070a0:	3301      	adds	r3, #1
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	9308      	str	r3, [sp, #32]
 80070a6:	bfb8      	it	lt
 80070a8:	2301      	movlt	r3, #1
 80070aa:	2100      	movs	r1, #0
 80070ac:	2204      	movs	r2, #4
 80070ae:	69e8      	ldr	r0, [r5, #28]
 80070b0:	f102 0614 	add.w	r6, r2, #20
 80070b4:	429e      	cmp	r6, r3
 80070b6:	d940      	bls.n	800713a <_dtoa_r+0x30a>
 80070b8:	6041      	str	r1, [r0, #4]
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 fd98 	bl	8007bf0 <_Balloc>
 80070c0:	9003      	str	r0, [sp, #12]
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d13c      	bne.n	8007140 <_dtoa_r+0x310>
 80070c6:	4602      	mov	r2, r0
 80070c8:	f240 11af 	movw	r1, #431	; 0x1af
 80070cc:	4b16      	ldr	r3, [pc, #88]	; (8007128 <_dtoa_r+0x2f8>)
 80070ce:	e6c3      	b.n	8006e58 <_dtoa_r+0x28>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e7e1      	b.n	8007098 <_dtoa_r+0x268>
 80070d4:	2401      	movs	r4, #1
 80070d6:	2300      	movs	r3, #0
 80070d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80070da:	9322      	str	r3, [sp, #136]	; 0x88
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	2200      	movs	r2, #0
 80070e2:	9306      	str	r3, [sp, #24]
 80070e4:	9308      	str	r3, [sp, #32]
 80070e6:	2312      	movs	r3, #18
 80070e8:	e7d1      	b.n	800708e <_dtoa_r+0x25e>
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w
 80070f0:	636f4361 	.word	0x636f4361
 80070f4:	3fd287a7 	.word	0x3fd287a7
 80070f8:	8b60c8b3 	.word	0x8b60c8b3
 80070fc:	3fc68a28 	.word	0x3fc68a28
 8007100:	509f79fb 	.word	0x509f79fb
 8007104:	3fd34413 	.word	0x3fd34413
 8007108:	0800a54c 	.word	0x0800a54c
 800710c:	0800a563 	.word	0x0800a563
 8007110:	7ff00000 	.word	0x7ff00000
 8007114:	0800a548 	.word	0x0800a548
 8007118:	0800a53f 	.word	0x0800a53f
 800711c:	0800a517 	.word	0x0800a517
 8007120:	3ff80000 	.word	0x3ff80000
 8007124:	0800a650 	.word	0x0800a650
 8007128:	0800a5bb 	.word	0x0800a5bb
 800712c:	2301      	movs	r3, #1
 800712e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007130:	e7d4      	b.n	80070dc <_dtoa_r+0x2ac>
 8007132:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007134:	9306      	str	r3, [sp, #24]
 8007136:	9308      	str	r3, [sp, #32]
 8007138:	e7b7      	b.n	80070aa <_dtoa_r+0x27a>
 800713a:	3101      	adds	r1, #1
 800713c:	0052      	lsls	r2, r2, #1
 800713e:	e7b7      	b.n	80070b0 <_dtoa_r+0x280>
 8007140:	69eb      	ldr	r3, [r5, #28]
 8007142:	9a03      	ldr	r2, [sp, #12]
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	9b08      	ldr	r3, [sp, #32]
 8007148:	2b0e      	cmp	r3, #14
 800714a:	f200 80a8 	bhi.w	800729e <_dtoa_r+0x46e>
 800714e:	2c00      	cmp	r4, #0
 8007150:	f000 80a5 	beq.w	800729e <_dtoa_r+0x46e>
 8007154:	f1bb 0f00 	cmp.w	fp, #0
 8007158:	dd34      	ble.n	80071c4 <_dtoa_r+0x394>
 800715a:	4b9a      	ldr	r3, [pc, #616]	; (80073c4 <_dtoa_r+0x594>)
 800715c:	f00b 020f 	and.w	r2, fp, #15
 8007160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007164:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800716c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007170:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007174:	d016      	beq.n	80071a4 <_dtoa_r+0x374>
 8007176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800717a:	4b93      	ldr	r3, [pc, #588]	; (80073c8 <_dtoa_r+0x598>)
 800717c:	2703      	movs	r7, #3
 800717e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007182:	f7f9 fadd 	bl	8000740 <__aeabi_ddiv>
 8007186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800718a:	f004 040f 	and.w	r4, r4, #15
 800718e:	4e8e      	ldr	r6, [pc, #568]	; (80073c8 <_dtoa_r+0x598>)
 8007190:	b954      	cbnz	r4, 80071a8 <_dtoa_r+0x378>
 8007192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800719a:	f7f9 fad1 	bl	8000740 <__aeabi_ddiv>
 800719e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071a2:	e029      	b.n	80071f8 <_dtoa_r+0x3c8>
 80071a4:	2702      	movs	r7, #2
 80071a6:	e7f2      	b.n	800718e <_dtoa_r+0x35e>
 80071a8:	07e1      	lsls	r1, r4, #31
 80071aa:	d508      	bpl.n	80071be <_dtoa_r+0x38e>
 80071ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071b4:	f7f9 f99a 	bl	80004ec <__aeabi_dmul>
 80071b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071bc:	3701      	adds	r7, #1
 80071be:	1064      	asrs	r4, r4, #1
 80071c0:	3608      	adds	r6, #8
 80071c2:	e7e5      	b.n	8007190 <_dtoa_r+0x360>
 80071c4:	f000 80a5 	beq.w	8007312 <_dtoa_r+0x4e2>
 80071c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071cc:	f1cb 0400 	rsb	r4, fp, #0
 80071d0:	4b7c      	ldr	r3, [pc, #496]	; (80073c4 <_dtoa_r+0x594>)
 80071d2:	f004 020f 	and.w	r2, r4, #15
 80071d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f985 	bl	80004ec <__aeabi_dmul>
 80071e2:	2702      	movs	r7, #2
 80071e4:	2300      	movs	r3, #0
 80071e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ea:	4e77      	ldr	r6, [pc, #476]	; (80073c8 <_dtoa_r+0x598>)
 80071ec:	1124      	asrs	r4, r4, #4
 80071ee:	2c00      	cmp	r4, #0
 80071f0:	f040 8084 	bne.w	80072fc <_dtoa_r+0x4cc>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1d2      	bne.n	800719e <_dtoa_r+0x36e>
 80071f8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 8087 	beq.w	8007316 <_dtoa_r+0x4e6>
 8007208:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800720c:	2200      	movs	r2, #0
 800720e:	4b6f      	ldr	r3, [pc, #444]	; (80073cc <_dtoa_r+0x59c>)
 8007210:	f7f9 fbde 	bl	80009d0 <__aeabi_dcmplt>
 8007214:	2800      	cmp	r0, #0
 8007216:	d07e      	beq.n	8007316 <_dtoa_r+0x4e6>
 8007218:	9b08      	ldr	r3, [sp, #32]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d07b      	beq.n	8007316 <_dtoa_r+0x4e6>
 800721e:	9b06      	ldr	r3, [sp, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	dd38      	ble.n	8007296 <_dtoa_r+0x466>
 8007224:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007228:	2200      	movs	r2, #0
 800722a:	4b69      	ldr	r3, [pc, #420]	; (80073d0 <_dtoa_r+0x5a0>)
 800722c:	f7f9 f95e 	bl	80004ec <__aeabi_dmul>
 8007230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007234:	9c06      	ldr	r4, [sp, #24]
 8007236:	f10b 38ff 	add.w	r8, fp, #4294967295
 800723a:	3701      	adds	r7, #1
 800723c:	4638      	mov	r0, r7
 800723e:	f7f9 f8eb 	bl	8000418 <__aeabi_i2d>
 8007242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007246:	f7f9 f951 	bl	80004ec <__aeabi_dmul>
 800724a:	2200      	movs	r2, #0
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <_dtoa_r+0x5a4>)
 800724e:	f7f8 ff97 	bl	8000180 <__adddf3>
 8007252:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007256:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800725a:	9611      	str	r6, [sp, #68]	; 0x44
 800725c:	2c00      	cmp	r4, #0
 800725e:	d15d      	bne.n	800731c <_dtoa_r+0x4ec>
 8007260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007264:	2200      	movs	r2, #0
 8007266:	4b5c      	ldr	r3, [pc, #368]	; (80073d8 <_dtoa_r+0x5a8>)
 8007268:	f7f8 ff88 	bl	800017c <__aeabi_dsub>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007274:	4633      	mov	r3, r6
 8007276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007278:	f7f9 fbc8 	bl	8000a0c <__aeabi_dcmpgt>
 800727c:	2800      	cmp	r0, #0
 800727e:	f040 8295 	bne.w	80077ac <_dtoa_r+0x97c>
 8007282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007286:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007288:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800728c:	f7f9 fba0 	bl	80009d0 <__aeabi_dcmplt>
 8007290:	2800      	cmp	r0, #0
 8007292:	f040 8289 	bne.w	80077a8 <_dtoa_r+0x978>
 8007296:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800729a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800729e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f2c0 8151 	blt.w	8007548 <_dtoa_r+0x718>
 80072a6:	f1bb 0f0e 	cmp.w	fp, #14
 80072aa:	f300 814d 	bgt.w	8007548 <_dtoa_r+0x718>
 80072ae:	4b45      	ldr	r3, [pc, #276]	; (80073c4 <_dtoa_r+0x594>)
 80072b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80072bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f280 80da 	bge.w	8007478 <_dtoa_r+0x648>
 80072c4:	9b08      	ldr	r3, [sp, #32]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f300 80d6 	bgt.w	8007478 <_dtoa_r+0x648>
 80072cc:	f040 826b 	bne.w	80077a6 <_dtoa_r+0x976>
 80072d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072d4:	2200      	movs	r2, #0
 80072d6:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <_dtoa_r+0x5a8>)
 80072d8:	f7f9 f908 	bl	80004ec <__aeabi_dmul>
 80072dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072e0:	f7f9 fb8a 	bl	80009f8 <__aeabi_dcmpge>
 80072e4:	9c08      	ldr	r4, [sp, #32]
 80072e6:	4626      	mov	r6, r4
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f040 8241 	bne.w	8007770 <_dtoa_r+0x940>
 80072ee:	2331      	movs	r3, #49	; 0x31
 80072f0:	9f03      	ldr	r7, [sp, #12]
 80072f2:	f10b 0b01 	add.w	fp, fp, #1
 80072f6:	f807 3b01 	strb.w	r3, [r7], #1
 80072fa:	e23d      	b.n	8007778 <_dtoa_r+0x948>
 80072fc:	07e2      	lsls	r2, r4, #31
 80072fe:	d505      	bpl.n	800730c <_dtoa_r+0x4dc>
 8007300:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007304:	f7f9 f8f2 	bl	80004ec <__aeabi_dmul>
 8007308:	2301      	movs	r3, #1
 800730a:	3701      	adds	r7, #1
 800730c:	1064      	asrs	r4, r4, #1
 800730e:	3608      	adds	r6, #8
 8007310:	e76d      	b.n	80071ee <_dtoa_r+0x3be>
 8007312:	2702      	movs	r7, #2
 8007314:	e770      	b.n	80071f8 <_dtoa_r+0x3c8>
 8007316:	46d8      	mov	r8, fp
 8007318:	9c08      	ldr	r4, [sp, #32]
 800731a:	e78f      	b.n	800723c <_dtoa_r+0x40c>
 800731c:	9903      	ldr	r1, [sp, #12]
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <_dtoa_r+0x594>)
 8007320:	4421      	add	r1, r4
 8007322:	9112      	str	r1, [sp, #72]	; 0x48
 8007324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007326:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800732a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800732e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007332:	2900      	cmp	r1, #0
 8007334:	d054      	beq.n	80073e0 <_dtoa_r+0x5b0>
 8007336:	2000      	movs	r0, #0
 8007338:	4928      	ldr	r1, [pc, #160]	; (80073dc <_dtoa_r+0x5ac>)
 800733a:	f7f9 fa01 	bl	8000740 <__aeabi_ddiv>
 800733e:	463b      	mov	r3, r7
 8007340:	4632      	mov	r2, r6
 8007342:	f7f8 ff1b 	bl	800017c <__aeabi_dsub>
 8007346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800734a:	9f03      	ldr	r7, [sp, #12]
 800734c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007350:	f7f9 fb7c 	bl	8000a4c <__aeabi_d2iz>
 8007354:	4604      	mov	r4, r0
 8007356:	f7f9 f85f 	bl	8000418 <__aeabi_i2d>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007362:	f7f8 ff0b 	bl	800017c <__aeabi_dsub>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	3430      	adds	r4, #48	; 0x30
 800736c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007370:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007374:	f807 4b01 	strb.w	r4, [r7], #1
 8007378:	f7f9 fb2a 	bl	80009d0 <__aeabi_dcmplt>
 800737c:	2800      	cmp	r0, #0
 800737e:	d173      	bne.n	8007468 <_dtoa_r+0x638>
 8007380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007384:	2000      	movs	r0, #0
 8007386:	4911      	ldr	r1, [pc, #68]	; (80073cc <_dtoa_r+0x59c>)
 8007388:	f7f8 fef8 	bl	800017c <__aeabi_dsub>
 800738c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007390:	f7f9 fb1e 	bl	80009d0 <__aeabi_dcmplt>
 8007394:	2800      	cmp	r0, #0
 8007396:	f040 80b6 	bne.w	8007506 <_dtoa_r+0x6d6>
 800739a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800739c:	429f      	cmp	r7, r3
 800739e:	f43f af7a 	beq.w	8007296 <_dtoa_r+0x466>
 80073a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073a6:	2200      	movs	r2, #0
 80073a8:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <_dtoa_r+0x5a0>)
 80073aa:	f7f9 f89f 	bl	80004ec <__aeabi_dmul>
 80073ae:	2200      	movs	r2, #0
 80073b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <_dtoa_r+0x5a0>)
 80073ba:	f7f9 f897 	bl	80004ec <__aeabi_dmul>
 80073be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c2:	e7c3      	b.n	800734c <_dtoa_r+0x51c>
 80073c4:	0800a650 	.word	0x0800a650
 80073c8:	0800a628 	.word	0x0800a628
 80073cc:	3ff00000 	.word	0x3ff00000
 80073d0:	40240000 	.word	0x40240000
 80073d4:	401c0000 	.word	0x401c0000
 80073d8:	40140000 	.word	0x40140000
 80073dc:	3fe00000 	.word	0x3fe00000
 80073e0:	4630      	mov	r0, r6
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f9 f882 	bl	80004ec <__aeabi_dmul>
 80073e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073ee:	9c03      	ldr	r4, [sp, #12]
 80073f0:	9314      	str	r3, [sp, #80]	; 0x50
 80073f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f6:	f7f9 fb29 	bl	8000a4c <__aeabi_d2iz>
 80073fa:	9015      	str	r0, [sp, #84]	; 0x54
 80073fc:	f7f9 f80c 	bl	8000418 <__aeabi_i2d>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007408:	f7f8 feb8 	bl	800017c <__aeabi_dsub>
 800740c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800740e:	4606      	mov	r6, r0
 8007410:	3330      	adds	r3, #48	; 0x30
 8007412:	f804 3b01 	strb.w	r3, [r4], #1
 8007416:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007418:	460f      	mov	r7, r1
 800741a:	429c      	cmp	r4, r3
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	d124      	bne.n	800746c <_dtoa_r+0x63c>
 8007422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007426:	4baf      	ldr	r3, [pc, #700]	; (80076e4 <_dtoa_r+0x8b4>)
 8007428:	f7f8 feaa 	bl	8000180 <__adddf3>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 faea 	bl	8000a0c <__aeabi_dcmpgt>
 8007438:	2800      	cmp	r0, #0
 800743a:	d163      	bne.n	8007504 <_dtoa_r+0x6d4>
 800743c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007440:	2000      	movs	r0, #0
 8007442:	49a8      	ldr	r1, [pc, #672]	; (80076e4 <_dtoa_r+0x8b4>)
 8007444:	f7f8 fe9a 	bl	800017c <__aeabi_dsub>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	f7f9 fabe 	bl	80009d0 <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	f43f af1e 	beq.w	8007296 <_dtoa_r+0x466>
 800745a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800745c:	1e7b      	subs	r3, r7, #1
 800745e:	9314      	str	r3, [sp, #80]	; 0x50
 8007460:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007464:	2b30      	cmp	r3, #48	; 0x30
 8007466:	d0f8      	beq.n	800745a <_dtoa_r+0x62a>
 8007468:	46c3      	mov	fp, r8
 800746a:	e03b      	b.n	80074e4 <_dtoa_r+0x6b4>
 800746c:	4b9e      	ldr	r3, [pc, #632]	; (80076e8 <_dtoa_r+0x8b8>)
 800746e:	f7f9 f83d 	bl	80004ec <__aeabi_dmul>
 8007472:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007476:	e7bc      	b.n	80073f2 <_dtoa_r+0x5c2>
 8007478:	9f03      	ldr	r7, [sp, #12]
 800747a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800747e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007482:	4640      	mov	r0, r8
 8007484:	4649      	mov	r1, r9
 8007486:	f7f9 f95b 	bl	8000740 <__aeabi_ddiv>
 800748a:	f7f9 fadf 	bl	8000a4c <__aeabi_d2iz>
 800748e:	4604      	mov	r4, r0
 8007490:	f7f8 ffc2 	bl	8000418 <__aeabi_i2d>
 8007494:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007498:	f7f9 f828 	bl	80004ec <__aeabi_dmul>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	f7f8 fe6a 	bl	800017c <__aeabi_dsub>
 80074a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80074ac:	f807 6b01 	strb.w	r6, [r7], #1
 80074b0:	9e03      	ldr	r6, [sp, #12]
 80074b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80074b6:	1bbe      	subs	r6, r7, r6
 80074b8:	45b4      	cmp	ip, r6
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	d136      	bne.n	800752e <_dtoa_r+0x6fe>
 80074c0:	f7f8 fe5e 	bl	8000180 <__adddf3>
 80074c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074c8:	4680      	mov	r8, r0
 80074ca:	4689      	mov	r9, r1
 80074cc:	f7f9 fa9e 	bl	8000a0c <__aeabi_dcmpgt>
 80074d0:	bb58      	cbnz	r0, 800752a <_dtoa_r+0x6fa>
 80074d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074d6:	4640      	mov	r0, r8
 80074d8:	4649      	mov	r1, r9
 80074da:	f7f9 fa6f 	bl	80009bc <__aeabi_dcmpeq>
 80074de:	b108      	cbz	r0, 80074e4 <_dtoa_r+0x6b4>
 80074e0:	07e3      	lsls	r3, r4, #31
 80074e2:	d422      	bmi.n	800752a <_dtoa_r+0x6fa>
 80074e4:	4651      	mov	r1, sl
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 fbc2 	bl	8007c70 <_Bfree>
 80074ec:	2300      	movs	r3, #0
 80074ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074f0:	703b      	strb	r3, [r7, #0]
 80074f2:	f10b 0301 	add.w	r3, fp, #1
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f43f ace6 	beq.w	8006ecc <_dtoa_r+0x9c>
 8007500:	601f      	str	r7, [r3, #0]
 8007502:	e4e3      	b.n	8006ecc <_dtoa_r+0x9c>
 8007504:	4627      	mov	r7, r4
 8007506:	463b      	mov	r3, r7
 8007508:	461f      	mov	r7, r3
 800750a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800750e:	2a39      	cmp	r2, #57	; 0x39
 8007510:	d107      	bne.n	8007522 <_dtoa_r+0x6f2>
 8007512:	9a03      	ldr	r2, [sp, #12]
 8007514:	429a      	cmp	r2, r3
 8007516:	d1f7      	bne.n	8007508 <_dtoa_r+0x6d8>
 8007518:	2230      	movs	r2, #48	; 0x30
 800751a:	9903      	ldr	r1, [sp, #12]
 800751c:	f108 0801 	add.w	r8, r8, #1
 8007520:	700a      	strb	r2, [r1, #0]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	3201      	adds	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e79e      	b.n	8007468 <_dtoa_r+0x638>
 800752a:	46d8      	mov	r8, fp
 800752c:	e7eb      	b.n	8007506 <_dtoa_r+0x6d6>
 800752e:	2200      	movs	r2, #0
 8007530:	4b6d      	ldr	r3, [pc, #436]	; (80076e8 <_dtoa_r+0x8b8>)
 8007532:	f7f8 ffdb 	bl	80004ec <__aeabi_dmul>
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	4680      	mov	r8, r0
 800753c:	4689      	mov	r9, r1
 800753e:	f7f9 fa3d 	bl	80009bc <__aeabi_dcmpeq>
 8007542:	2800      	cmp	r0, #0
 8007544:	d09b      	beq.n	800747e <_dtoa_r+0x64e>
 8007546:	e7cd      	b.n	80074e4 <_dtoa_r+0x6b4>
 8007548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800754a:	2a00      	cmp	r2, #0
 800754c:	f000 80c4 	beq.w	80076d8 <_dtoa_r+0x8a8>
 8007550:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007552:	2a01      	cmp	r2, #1
 8007554:	f300 80a8 	bgt.w	80076a8 <_dtoa_r+0x878>
 8007558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800755a:	2a00      	cmp	r2, #0
 800755c:	f000 80a0 	beq.w	80076a0 <_dtoa_r+0x870>
 8007560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007564:	464f      	mov	r7, r9
 8007566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800756a:	2101      	movs	r1, #1
 800756c:	441a      	add	r2, r3
 800756e:	4628      	mov	r0, r5
 8007570:	4499      	add	r9, r3
 8007572:	9209      	str	r2, [sp, #36]	; 0x24
 8007574:	f000 fc7c 	bl	8007e70 <__i2b>
 8007578:	4606      	mov	r6, r0
 800757a:	b15f      	cbz	r7, 8007594 <_dtoa_r+0x764>
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	dd08      	ble.n	8007594 <_dtoa_r+0x764>
 8007582:	42bb      	cmp	r3, r7
 8007584:	bfa8      	it	ge
 8007586:	463b      	movge	r3, r7
 8007588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800758a:	eba9 0903 	sub.w	r9, r9, r3
 800758e:	1aff      	subs	r7, r7, r3
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	9309      	str	r3, [sp, #36]	; 0x24
 8007594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007596:	b1f3      	cbz	r3, 80075d6 <_dtoa_r+0x7a6>
 8007598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80a0 	beq.w	80076e0 <_dtoa_r+0x8b0>
 80075a0:	2c00      	cmp	r4, #0
 80075a2:	dd10      	ble.n	80075c6 <_dtoa_r+0x796>
 80075a4:	4631      	mov	r1, r6
 80075a6:	4622      	mov	r2, r4
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 fd1f 	bl	8007fec <__pow5mult>
 80075ae:	4652      	mov	r2, sl
 80075b0:	4601      	mov	r1, r0
 80075b2:	4606      	mov	r6, r0
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 fc71 	bl	8007e9c <__multiply>
 80075ba:	4680      	mov	r8, r0
 80075bc:	4651      	mov	r1, sl
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 fb56 	bl	8007c70 <_Bfree>
 80075c4:	46c2      	mov	sl, r8
 80075c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c8:	1b1a      	subs	r2, r3, r4
 80075ca:	d004      	beq.n	80075d6 <_dtoa_r+0x7a6>
 80075cc:	4651      	mov	r1, sl
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 fd0c 	bl	8007fec <__pow5mult>
 80075d4:	4682      	mov	sl, r0
 80075d6:	2101      	movs	r1, #1
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 fc49 	bl	8007e70 <__i2b>
 80075de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e0:	4604      	mov	r4, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f340 8082 	ble.w	80076ec <_dtoa_r+0x8bc>
 80075e8:	461a      	mov	r2, r3
 80075ea:	4601      	mov	r1, r0
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 fcfd 	bl	8007fec <__pow5mult>
 80075f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075f4:	4604      	mov	r4, r0
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	dd7b      	ble.n	80076f2 <_dtoa_r+0x8c2>
 80075fa:	f04f 0800 	mov.w	r8, #0
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007604:	6918      	ldr	r0, [r3, #16]
 8007606:	f000 fbe5 	bl	8007dd4 <__hi0bits>
 800760a:	f1c0 0020 	rsb	r0, r0, #32
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	4418      	add	r0, r3
 8007612:	f010 001f 	ands.w	r0, r0, #31
 8007616:	f000 8092 	beq.w	800773e <_dtoa_r+0x90e>
 800761a:	f1c0 0320 	rsb	r3, r0, #32
 800761e:	2b04      	cmp	r3, #4
 8007620:	f340 8085 	ble.w	800772e <_dtoa_r+0x8fe>
 8007624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007626:	f1c0 001c 	rsb	r0, r0, #28
 800762a:	4403      	add	r3, r0
 800762c:	4481      	add	r9, r0
 800762e:	4407      	add	r7, r0
 8007630:	9309      	str	r3, [sp, #36]	; 0x24
 8007632:	f1b9 0f00 	cmp.w	r9, #0
 8007636:	dd05      	ble.n	8007644 <_dtoa_r+0x814>
 8007638:	4651      	mov	r1, sl
 800763a:	464a      	mov	r2, r9
 800763c:	4628      	mov	r0, r5
 800763e:	f000 fd2f 	bl	80080a0 <__lshift>
 8007642:	4682      	mov	sl, r0
 8007644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007646:	2b00      	cmp	r3, #0
 8007648:	dd05      	ble.n	8007656 <_dtoa_r+0x826>
 800764a:	4621      	mov	r1, r4
 800764c:	461a      	mov	r2, r3
 800764e:	4628      	mov	r0, r5
 8007650:	f000 fd26 	bl	80080a0 <__lshift>
 8007654:	4604      	mov	r4, r0
 8007656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d072      	beq.n	8007742 <_dtoa_r+0x912>
 800765c:	4621      	mov	r1, r4
 800765e:	4650      	mov	r0, sl
 8007660:	f000 fd8a 	bl	8008178 <__mcmp>
 8007664:	2800      	cmp	r0, #0
 8007666:	da6c      	bge.n	8007742 <_dtoa_r+0x912>
 8007668:	2300      	movs	r3, #0
 800766a:	4651      	mov	r1, sl
 800766c:	220a      	movs	r2, #10
 800766e:	4628      	mov	r0, r5
 8007670:	f000 fb20 	bl	8007cb4 <__multadd>
 8007674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007676:	4682      	mov	sl, r0
 8007678:	f10b 3bff 	add.w	fp, fp, #4294967295
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 81ac 	beq.w	80079da <_dtoa_r+0xbaa>
 8007682:	2300      	movs	r3, #0
 8007684:	4631      	mov	r1, r6
 8007686:	220a      	movs	r2, #10
 8007688:	4628      	mov	r0, r5
 800768a:	f000 fb13 	bl	8007cb4 <__multadd>
 800768e:	9b06      	ldr	r3, [sp, #24]
 8007690:	4606      	mov	r6, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	f300 8093 	bgt.w	80077be <_dtoa_r+0x98e>
 8007698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800769a:	2b02      	cmp	r3, #2
 800769c:	dc59      	bgt.n	8007752 <_dtoa_r+0x922>
 800769e:	e08e      	b.n	80077be <_dtoa_r+0x98e>
 80076a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80076a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076a6:	e75d      	b.n	8007564 <_dtoa_r+0x734>
 80076a8:	9b08      	ldr	r3, [sp, #32]
 80076aa:	1e5c      	subs	r4, r3, #1
 80076ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	bfbf      	itttt	lt
 80076b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80076b6:	1ae3      	sublt	r3, r4, r3
 80076b8:	18d2      	addlt	r2, r2, r3
 80076ba:	bfa8      	it	ge
 80076bc:	1b1c      	subge	r4, r3, r4
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	bfbe      	ittt	lt
 80076c2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80076c4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80076c6:	2400      	movlt	r4, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfb5      	itete	lt
 80076cc:	eba9 0703 	sublt.w	r7, r9, r3
 80076d0:	464f      	movge	r7, r9
 80076d2:	2300      	movlt	r3, #0
 80076d4:	9b08      	ldrge	r3, [sp, #32]
 80076d6:	e747      	b.n	8007568 <_dtoa_r+0x738>
 80076d8:	464f      	mov	r7, r9
 80076da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80076de:	e74c      	b.n	800757a <_dtoa_r+0x74a>
 80076e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e2:	e773      	b.n	80075cc <_dtoa_r+0x79c>
 80076e4:	3fe00000 	.word	0x3fe00000
 80076e8:	40240000 	.word	0x40240000
 80076ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	dc18      	bgt.n	8007724 <_dtoa_r+0x8f4>
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	b9b3      	cbnz	r3, 8007724 <_dtoa_r+0x8f4>
 80076f6:	9b05      	ldr	r3, [sp, #20]
 80076f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076fc:	b993      	cbnz	r3, 8007724 <_dtoa_r+0x8f4>
 80076fe:	9b05      	ldr	r3, [sp, #20]
 8007700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007704:	0d1b      	lsrs	r3, r3, #20
 8007706:	051b      	lsls	r3, r3, #20
 8007708:	b17b      	cbz	r3, 800772a <_dtoa_r+0x8fa>
 800770a:	f04f 0801 	mov.w	r8, #1
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	f109 0901 	add.w	r9, r9, #1
 8007714:	3301      	adds	r3, #1
 8007716:	9309      	str	r3, [sp, #36]	; 0x24
 8007718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	f47f af6f 	bne.w	80075fe <_dtoa_r+0x7ce>
 8007720:	2001      	movs	r0, #1
 8007722:	e774      	b.n	800760e <_dtoa_r+0x7de>
 8007724:	f04f 0800 	mov.w	r8, #0
 8007728:	e7f6      	b.n	8007718 <_dtoa_r+0x8e8>
 800772a:	4698      	mov	r8, r3
 800772c:	e7f4      	b.n	8007718 <_dtoa_r+0x8e8>
 800772e:	d080      	beq.n	8007632 <_dtoa_r+0x802>
 8007730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007732:	331c      	adds	r3, #28
 8007734:	441a      	add	r2, r3
 8007736:	4499      	add	r9, r3
 8007738:	441f      	add	r7, r3
 800773a:	9209      	str	r2, [sp, #36]	; 0x24
 800773c:	e779      	b.n	8007632 <_dtoa_r+0x802>
 800773e:	4603      	mov	r3, r0
 8007740:	e7f6      	b.n	8007730 <_dtoa_r+0x900>
 8007742:	9b08      	ldr	r3, [sp, #32]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dc34      	bgt.n	80077b2 <_dtoa_r+0x982>
 8007748:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800774a:	2b02      	cmp	r3, #2
 800774c:	dd31      	ble.n	80077b2 <_dtoa_r+0x982>
 800774e:	9b08      	ldr	r3, [sp, #32]
 8007750:	9306      	str	r3, [sp, #24]
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	b963      	cbnz	r3, 8007770 <_dtoa_r+0x940>
 8007756:	4621      	mov	r1, r4
 8007758:	2205      	movs	r2, #5
 800775a:	4628      	mov	r0, r5
 800775c:	f000 faaa 	bl	8007cb4 <__multadd>
 8007760:	4601      	mov	r1, r0
 8007762:	4604      	mov	r4, r0
 8007764:	4650      	mov	r0, sl
 8007766:	f000 fd07 	bl	8008178 <__mcmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	f73f adbf 	bgt.w	80072ee <_dtoa_r+0x4be>
 8007770:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007772:	9f03      	ldr	r7, [sp, #12]
 8007774:	ea6f 0b03 	mvn.w	fp, r3
 8007778:	f04f 0800 	mov.w	r8, #0
 800777c:	4621      	mov	r1, r4
 800777e:	4628      	mov	r0, r5
 8007780:	f000 fa76 	bl	8007c70 <_Bfree>
 8007784:	2e00      	cmp	r6, #0
 8007786:	f43f aead 	beq.w	80074e4 <_dtoa_r+0x6b4>
 800778a:	f1b8 0f00 	cmp.w	r8, #0
 800778e:	d005      	beq.n	800779c <_dtoa_r+0x96c>
 8007790:	45b0      	cmp	r8, r6
 8007792:	d003      	beq.n	800779c <_dtoa_r+0x96c>
 8007794:	4641      	mov	r1, r8
 8007796:	4628      	mov	r0, r5
 8007798:	f000 fa6a 	bl	8007c70 <_Bfree>
 800779c:	4631      	mov	r1, r6
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 fa66 	bl	8007c70 <_Bfree>
 80077a4:	e69e      	b.n	80074e4 <_dtoa_r+0x6b4>
 80077a6:	2400      	movs	r4, #0
 80077a8:	4626      	mov	r6, r4
 80077aa:	e7e1      	b.n	8007770 <_dtoa_r+0x940>
 80077ac:	46c3      	mov	fp, r8
 80077ae:	4626      	mov	r6, r4
 80077b0:	e59d      	b.n	80072ee <_dtoa_r+0x4be>
 80077b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80c8 	beq.w	800794a <_dtoa_r+0xb1a>
 80077ba:	9b08      	ldr	r3, [sp, #32]
 80077bc:	9306      	str	r3, [sp, #24]
 80077be:	2f00      	cmp	r7, #0
 80077c0:	dd05      	ble.n	80077ce <_dtoa_r+0x99e>
 80077c2:	4631      	mov	r1, r6
 80077c4:	463a      	mov	r2, r7
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 fc6a 	bl	80080a0 <__lshift>
 80077cc:	4606      	mov	r6, r0
 80077ce:	f1b8 0f00 	cmp.w	r8, #0
 80077d2:	d05b      	beq.n	800788c <_dtoa_r+0xa5c>
 80077d4:	4628      	mov	r0, r5
 80077d6:	6871      	ldr	r1, [r6, #4]
 80077d8:	f000 fa0a 	bl	8007bf0 <_Balloc>
 80077dc:	4607      	mov	r7, r0
 80077de:	b928      	cbnz	r0, 80077ec <_dtoa_r+0x9bc>
 80077e0:	4602      	mov	r2, r0
 80077e2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80077e6:	4b81      	ldr	r3, [pc, #516]	; (80079ec <_dtoa_r+0xbbc>)
 80077e8:	f7ff bb36 	b.w	8006e58 <_dtoa_r+0x28>
 80077ec:	6932      	ldr	r2, [r6, #16]
 80077ee:	f106 010c 	add.w	r1, r6, #12
 80077f2:	3202      	adds	r2, #2
 80077f4:	0092      	lsls	r2, r2, #2
 80077f6:	300c      	adds	r0, #12
 80077f8:	f001 ff72 	bl	80096e0 <memcpy>
 80077fc:	2201      	movs	r2, #1
 80077fe:	4639      	mov	r1, r7
 8007800:	4628      	mov	r0, r5
 8007802:	f000 fc4d 	bl	80080a0 <__lshift>
 8007806:	46b0      	mov	r8, r6
 8007808:	4606      	mov	r6, r0
 800780a:	9b03      	ldr	r3, [sp, #12]
 800780c:	9a03      	ldr	r2, [sp, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	9308      	str	r3, [sp, #32]
 8007812:	9b06      	ldr	r3, [sp, #24]
 8007814:	4413      	add	r3, r2
 8007816:	930b      	str	r3, [sp, #44]	; 0x2c
 8007818:	9b04      	ldr	r3, [sp, #16]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	930a      	str	r3, [sp, #40]	; 0x28
 8007820:	9b08      	ldr	r3, [sp, #32]
 8007822:	4621      	mov	r1, r4
 8007824:	3b01      	subs	r3, #1
 8007826:	4650      	mov	r0, sl
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	f7ff fa75 	bl	8006d18 <quorem>
 800782e:	4641      	mov	r1, r8
 8007830:	9006      	str	r0, [sp, #24]
 8007832:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007836:	4650      	mov	r0, sl
 8007838:	f000 fc9e 	bl	8008178 <__mcmp>
 800783c:	4632      	mov	r2, r6
 800783e:	9009      	str	r0, [sp, #36]	; 0x24
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fcb4 	bl	80081b0 <__mdiff>
 8007848:	68c2      	ldr	r2, [r0, #12]
 800784a:	4607      	mov	r7, r0
 800784c:	bb02      	cbnz	r2, 8007890 <_dtoa_r+0xa60>
 800784e:	4601      	mov	r1, r0
 8007850:	4650      	mov	r0, sl
 8007852:	f000 fc91 	bl	8008178 <__mcmp>
 8007856:	4602      	mov	r2, r0
 8007858:	4639      	mov	r1, r7
 800785a:	4628      	mov	r0, r5
 800785c:	920c      	str	r2, [sp, #48]	; 0x30
 800785e:	f000 fa07 	bl	8007c70 <_Bfree>
 8007862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007866:	9f08      	ldr	r7, [sp, #32]
 8007868:	ea43 0102 	orr.w	r1, r3, r2
 800786c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786e:	4319      	orrs	r1, r3
 8007870:	d110      	bne.n	8007894 <_dtoa_r+0xa64>
 8007872:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007876:	d029      	beq.n	80078cc <_dtoa_r+0xa9c>
 8007878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd02      	ble.n	8007884 <_dtoa_r+0xa54>
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007884:	9b04      	ldr	r3, [sp, #16]
 8007886:	f883 9000 	strb.w	r9, [r3]
 800788a:	e777      	b.n	800777c <_dtoa_r+0x94c>
 800788c:	4630      	mov	r0, r6
 800788e:	e7ba      	b.n	8007806 <_dtoa_r+0x9d6>
 8007890:	2201      	movs	r2, #1
 8007892:	e7e1      	b.n	8007858 <_dtoa_r+0xa28>
 8007894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	db04      	blt.n	80078a4 <_dtoa_r+0xa74>
 800789a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800789c:	430b      	orrs	r3, r1
 800789e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078a0:	430b      	orrs	r3, r1
 80078a2:	d120      	bne.n	80078e6 <_dtoa_r+0xab6>
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	dded      	ble.n	8007884 <_dtoa_r+0xa54>
 80078a8:	4651      	mov	r1, sl
 80078aa:	2201      	movs	r2, #1
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fbf7 	bl	80080a0 <__lshift>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4682      	mov	sl, r0
 80078b6:	f000 fc5f 	bl	8008178 <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	dc03      	bgt.n	80078c6 <_dtoa_r+0xa96>
 80078be:	d1e1      	bne.n	8007884 <_dtoa_r+0xa54>
 80078c0:	f019 0f01 	tst.w	r9, #1
 80078c4:	d0de      	beq.n	8007884 <_dtoa_r+0xa54>
 80078c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078ca:	d1d8      	bne.n	800787e <_dtoa_r+0xa4e>
 80078cc:	2339      	movs	r3, #57	; 0x39
 80078ce:	9a04      	ldr	r2, [sp, #16]
 80078d0:	7013      	strb	r3, [r2, #0]
 80078d2:	463b      	mov	r3, r7
 80078d4:	461f      	mov	r7, r3
 80078d6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80078da:	3b01      	subs	r3, #1
 80078dc:	2a39      	cmp	r2, #57	; 0x39
 80078de:	d06b      	beq.n	80079b8 <_dtoa_r+0xb88>
 80078e0:	3201      	adds	r2, #1
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e74a      	b.n	800777c <_dtoa_r+0x94c>
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	dd07      	ble.n	80078fa <_dtoa_r+0xaca>
 80078ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078ee:	d0ed      	beq.n	80078cc <_dtoa_r+0xa9c>
 80078f0:	9a04      	ldr	r2, [sp, #16]
 80078f2:	f109 0301 	add.w	r3, r9, #1
 80078f6:	7013      	strb	r3, [r2, #0]
 80078f8:	e740      	b.n	800777c <_dtoa_r+0x94c>
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078fe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007902:	4293      	cmp	r3, r2
 8007904:	d042      	beq.n	800798c <_dtoa_r+0xb5c>
 8007906:	4651      	mov	r1, sl
 8007908:	2300      	movs	r3, #0
 800790a:	220a      	movs	r2, #10
 800790c:	4628      	mov	r0, r5
 800790e:	f000 f9d1 	bl	8007cb4 <__multadd>
 8007912:	45b0      	cmp	r8, r6
 8007914:	4682      	mov	sl, r0
 8007916:	f04f 0300 	mov.w	r3, #0
 800791a:	f04f 020a 	mov.w	r2, #10
 800791e:	4641      	mov	r1, r8
 8007920:	4628      	mov	r0, r5
 8007922:	d107      	bne.n	8007934 <_dtoa_r+0xb04>
 8007924:	f000 f9c6 	bl	8007cb4 <__multadd>
 8007928:	4680      	mov	r8, r0
 800792a:	4606      	mov	r6, r0
 800792c:	9b08      	ldr	r3, [sp, #32]
 800792e:	3301      	adds	r3, #1
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	e775      	b.n	8007820 <_dtoa_r+0x9f0>
 8007934:	f000 f9be 	bl	8007cb4 <__multadd>
 8007938:	4631      	mov	r1, r6
 800793a:	4680      	mov	r8, r0
 800793c:	2300      	movs	r3, #0
 800793e:	220a      	movs	r2, #10
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f9b7 	bl	8007cb4 <__multadd>
 8007946:	4606      	mov	r6, r0
 8007948:	e7f0      	b.n	800792c <_dtoa_r+0xafc>
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	9306      	str	r3, [sp, #24]
 800794e:	9f03      	ldr	r7, [sp, #12]
 8007950:	4621      	mov	r1, r4
 8007952:	4650      	mov	r0, sl
 8007954:	f7ff f9e0 	bl	8006d18 <quorem>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800795e:	f807 9b01 	strb.w	r9, [r7], #1
 8007962:	1afa      	subs	r2, r7, r3
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	4293      	cmp	r3, r2
 8007968:	dd07      	ble.n	800797a <_dtoa_r+0xb4a>
 800796a:	4651      	mov	r1, sl
 800796c:	2300      	movs	r3, #0
 800796e:	220a      	movs	r2, #10
 8007970:	4628      	mov	r0, r5
 8007972:	f000 f99f 	bl	8007cb4 <__multadd>
 8007976:	4682      	mov	sl, r0
 8007978:	e7ea      	b.n	8007950 <_dtoa_r+0xb20>
 800797a:	9b06      	ldr	r3, [sp, #24]
 800797c:	f04f 0800 	mov.w	r8, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	bfcc      	ite	gt
 8007984:	461f      	movgt	r7, r3
 8007986:	2701      	movle	r7, #1
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	441f      	add	r7, r3
 800798c:	4651      	mov	r1, sl
 800798e:	2201      	movs	r2, #1
 8007990:	4628      	mov	r0, r5
 8007992:	f000 fb85 	bl	80080a0 <__lshift>
 8007996:	4621      	mov	r1, r4
 8007998:	4682      	mov	sl, r0
 800799a:	f000 fbed 	bl	8008178 <__mcmp>
 800799e:	2800      	cmp	r0, #0
 80079a0:	dc97      	bgt.n	80078d2 <_dtoa_r+0xaa2>
 80079a2:	d102      	bne.n	80079aa <_dtoa_r+0xb7a>
 80079a4:	f019 0f01 	tst.w	r9, #1
 80079a8:	d193      	bne.n	80078d2 <_dtoa_r+0xaa2>
 80079aa:	463b      	mov	r3, r7
 80079ac:	461f      	mov	r7, r3
 80079ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b2:	2a30      	cmp	r2, #48	; 0x30
 80079b4:	d0fa      	beq.n	80079ac <_dtoa_r+0xb7c>
 80079b6:	e6e1      	b.n	800777c <_dtoa_r+0x94c>
 80079b8:	9a03      	ldr	r2, [sp, #12]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d18a      	bne.n	80078d4 <_dtoa_r+0xaa4>
 80079be:	2331      	movs	r3, #49	; 0x31
 80079c0:	f10b 0b01 	add.w	fp, fp, #1
 80079c4:	e797      	b.n	80078f6 <_dtoa_r+0xac6>
 80079c6:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <_dtoa_r+0xbc0>)
 80079c8:	f7ff ba9f 	b.w	8006f0a <_dtoa_r+0xda>
 80079cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f47f aa77 	bne.w	8006ec2 <_dtoa_r+0x92>
 80079d4:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <_dtoa_r+0xbc4>)
 80079d6:	f7ff ba98 	b.w	8006f0a <_dtoa_r+0xda>
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dcb6      	bgt.n	800794e <_dtoa_r+0xb1e>
 80079e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	f73f aeb5 	bgt.w	8007752 <_dtoa_r+0x922>
 80079e8:	e7b1      	b.n	800794e <_dtoa_r+0xb1e>
 80079ea:	bf00      	nop
 80079ec:	0800a5bb 	.word	0x0800a5bb
 80079f0:	0800a516 	.word	0x0800a516
 80079f4:	0800a53f 	.word	0x0800a53f

080079f8 <_free_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d040      	beq.n	8007a82 <_free_r+0x8a>
 8007a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a04:	1f0c      	subs	r4, r1, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bfb8      	it	lt
 8007a0a:	18e4      	addlt	r4, r4, r3
 8007a0c:	f000 f8e4 	bl	8007bd8 <__malloc_lock>
 8007a10:	4a1c      	ldr	r2, [pc, #112]	; (8007a84 <_free_r+0x8c>)
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	b933      	cbnz	r3, 8007a24 <_free_r+0x2c>
 8007a16:	6063      	str	r3, [r4, #4]
 8007a18:	6014      	str	r4, [r2, #0]
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a20:	f000 b8e0 	b.w	8007be4 <__malloc_unlock>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d908      	bls.n	8007a3a <_free_r+0x42>
 8007a28:	6820      	ldr	r0, [r4, #0]
 8007a2a:	1821      	adds	r1, r4, r0
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	bf01      	itttt	eq
 8007a30:	6819      	ldreq	r1, [r3, #0]
 8007a32:	685b      	ldreq	r3, [r3, #4]
 8007a34:	1809      	addeq	r1, r1, r0
 8007a36:	6021      	streq	r1, [r4, #0]
 8007a38:	e7ed      	b.n	8007a16 <_free_r+0x1e>
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	b10b      	cbz	r3, 8007a44 <_free_r+0x4c>
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	d9fa      	bls.n	8007a3a <_free_r+0x42>
 8007a44:	6811      	ldr	r1, [r2, #0]
 8007a46:	1850      	adds	r0, r2, r1
 8007a48:	42a0      	cmp	r0, r4
 8007a4a:	d10b      	bne.n	8007a64 <_free_r+0x6c>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	4401      	add	r1, r0
 8007a50:	1850      	adds	r0, r2, r1
 8007a52:	4283      	cmp	r3, r0
 8007a54:	6011      	str	r1, [r2, #0]
 8007a56:	d1e0      	bne.n	8007a1a <_free_r+0x22>
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	4408      	add	r0, r1
 8007a5e:	6010      	str	r0, [r2, #0]
 8007a60:	6053      	str	r3, [r2, #4]
 8007a62:	e7da      	b.n	8007a1a <_free_r+0x22>
 8007a64:	d902      	bls.n	8007a6c <_free_r+0x74>
 8007a66:	230c      	movs	r3, #12
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	e7d6      	b.n	8007a1a <_free_r+0x22>
 8007a6c:	6820      	ldr	r0, [r4, #0]
 8007a6e:	1821      	adds	r1, r4, r0
 8007a70:	428b      	cmp	r3, r1
 8007a72:	bf01      	itttt	eq
 8007a74:	6819      	ldreq	r1, [r3, #0]
 8007a76:	685b      	ldreq	r3, [r3, #4]
 8007a78:	1809      	addeq	r1, r1, r0
 8007a7a:	6021      	streq	r1, [r4, #0]
 8007a7c:	6063      	str	r3, [r4, #4]
 8007a7e:	6054      	str	r4, [r2, #4]
 8007a80:	e7cb      	b.n	8007a1a <_free_r+0x22>
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	200004f8 	.word	0x200004f8

08007a88 <malloc>:
 8007a88:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <malloc+0xc>)
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f000 b823 	b.w	8007ad8 <_malloc_r>
 8007a92:	bf00      	nop
 8007a94:	20000064 	.word	0x20000064

08007a98 <sbrk_aligned>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	4e0e      	ldr	r6, [pc, #56]	; (8007ad4 <sbrk_aligned+0x3c>)
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	6831      	ldr	r1, [r6, #0]
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	b911      	cbnz	r1, 8007aaa <sbrk_aligned+0x12>
 8007aa4:	f001 fe0c 	bl	80096c0 <_sbrk_r>
 8007aa8:	6030      	str	r0, [r6, #0]
 8007aaa:	4621      	mov	r1, r4
 8007aac:	4628      	mov	r0, r5
 8007aae:	f001 fe07 	bl	80096c0 <_sbrk_r>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	d00a      	beq.n	8007acc <sbrk_aligned+0x34>
 8007ab6:	1cc4      	adds	r4, r0, #3
 8007ab8:	f024 0403 	bic.w	r4, r4, #3
 8007abc:	42a0      	cmp	r0, r4
 8007abe:	d007      	beq.n	8007ad0 <sbrk_aligned+0x38>
 8007ac0:	1a21      	subs	r1, r4, r0
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f001 fdfc 	bl	80096c0 <_sbrk_r>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d101      	bne.n	8007ad0 <sbrk_aligned+0x38>
 8007acc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	200004fc 	.word	0x200004fc

08007ad8 <_malloc_r>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	1ccd      	adds	r5, r1, #3
 8007ade:	f025 0503 	bic.w	r5, r5, #3
 8007ae2:	3508      	adds	r5, #8
 8007ae4:	2d0c      	cmp	r5, #12
 8007ae6:	bf38      	it	cc
 8007ae8:	250c      	movcc	r5, #12
 8007aea:	2d00      	cmp	r5, #0
 8007aec:	4607      	mov	r7, r0
 8007aee:	db01      	blt.n	8007af4 <_malloc_r+0x1c>
 8007af0:	42a9      	cmp	r1, r5
 8007af2:	d905      	bls.n	8007b00 <_malloc_r+0x28>
 8007af4:	230c      	movs	r3, #12
 8007af6:	2600      	movs	r6, #0
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	4630      	mov	r0, r6
 8007afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007bd4 <_malloc_r+0xfc>
 8007b04:	f000 f868 	bl	8007bd8 <__malloc_lock>
 8007b08:	f8d8 3000 	ldr.w	r3, [r8]
 8007b0c:	461c      	mov	r4, r3
 8007b0e:	bb5c      	cbnz	r4, 8007b68 <_malloc_r+0x90>
 8007b10:	4629      	mov	r1, r5
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ffc0 	bl	8007a98 <sbrk_aligned>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	d155      	bne.n	8007bca <_malloc_r+0xf2>
 8007b1e:	f8d8 4000 	ldr.w	r4, [r8]
 8007b22:	4626      	mov	r6, r4
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	d145      	bne.n	8007bb4 <_malloc_r+0xdc>
 8007b28:	2c00      	cmp	r4, #0
 8007b2a:	d048      	beq.n	8007bbe <_malloc_r+0xe6>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4638      	mov	r0, r7
 8007b32:	eb04 0903 	add.w	r9, r4, r3
 8007b36:	f001 fdc3 	bl	80096c0 <_sbrk_r>
 8007b3a:	4581      	cmp	r9, r0
 8007b3c:	d13f      	bne.n	8007bbe <_malloc_r+0xe6>
 8007b3e:	6821      	ldr	r1, [r4, #0]
 8007b40:	4638      	mov	r0, r7
 8007b42:	1a6d      	subs	r5, r5, r1
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7ff ffa7 	bl	8007a98 <sbrk_aligned>
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	d037      	beq.n	8007bbe <_malloc_r+0xe6>
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	442b      	add	r3, r5
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	f8d8 3000 	ldr.w	r3, [r8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d038      	beq.n	8007bce <_malloc_r+0xf6>
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	42a2      	cmp	r2, r4
 8007b60:	d12b      	bne.n	8007bba <_malloc_r+0xe2>
 8007b62:	2200      	movs	r2, #0
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	e00f      	b.n	8007b88 <_malloc_r+0xb0>
 8007b68:	6822      	ldr	r2, [r4, #0]
 8007b6a:	1b52      	subs	r2, r2, r5
 8007b6c:	d41f      	bmi.n	8007bae <_malloc_r+0xd6>
 8007b6e:	2a0b      	cmp	r2, #11
 8007b70:	d917      	bls.n	8007ba2 <_malloc_r+0xca>
 8007b72:	1961      	adds	r1, r4, r5
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	6025      	str	r5, [r4, #0]
 8007b78:	bf18      	it	ne
 8007b7a:	6059      	strne	r1, [r3, #4]
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	bf08      	it	eq
 8007b80:	f8c8 1000 	streq.w	r1, [r8]
 8007b84:	5162      	str	r2, [r4, r5]
 8007b86:	604b      	str	r3, [r1, #4]
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f104 060b 	add.w	r6, r4, #11
 8007b8e:	f000 f829 	bl	8007be4 <__malloc_unlock>
 8007b92:	f026 0607 	bic.w	r6, r6, #7
 8007b96:	1d23      	adds	r3, r4, #4
 8007b98:	1af2      	subs	r2, r6, r3
 8007b9a:	d0ae      	beq.n	8007afa <_malloc_r+0x22>
 8007b9c:	1b9b      	subs	r3, r3, r6
 8007b9e:	50a3      	str	r3, [r4, r2]
 8007ba0:	e7ab      	b.n	8007afa <_malloc_r+0x22>
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	6862      	ldr	r2, [r4, #4]
 8007ba6:	d1dd      	bne.n	8007b64 <_malloc_r+0x8c>
 8007ba8:	f8c8 2000 	str.w	r2, [r8]
 8007bac:	e7ec      	b.n	8007b88 <_malloc_r+0xb0>
 8007bae:	4623      	mov	r3, r4
 8007bb0:	6864      	ldr	r4, [r4, #4]
 8007bb2:	e7ac      	b.n	8007b0e <_malloc_r+0x36>
 8007bb4:	4634      	mov	r4, r6
 8007bb6:	6876      	ldr	r6, [r6, #4]
 8007bb8:	e7b4      	b.n	8007b24 <_malloc_r+0x4c>
 8007bba:	4613      	mov	r3, r2
 8007bbc:	e7cc      	b.n	8007b58 <_malloc_r+0x80>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	f000 f80e 	bl	8007be4 <__malloc_unlock>
 8007bc8:	e797      	b.n	8007afa <_malloc_r+0x22>
 8007bca:	6025      	str	r5, [r4, #0]
 8007bcc:	e7dc      	b.n	8007b88 <_malloc_r+0xb0>
 8007bce:	605b      	str	r3, [r3, #4]
 8007bd0:	deff      	udf	#255	; 0xff
 8007bd2:	bf00      	nop
 8007bd4:	200004f8 	.word	0x200004f8

08007bd8 <__malloc_lock>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	; (8007be0 <__malloc_lock+0x8>)
 8007bda:	f7ff b888 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8007bde:	bf00      	nop
 8007be0:	200004f4 	.word	0x200004f4

08007be4 <__malloc_unlock>:
 8007be4:	4801      	ldr	r0, [pc, #4]	; (8007bec <__malloc_unlock+0x8>)
 8007be6:	f7ff b883 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8007bea:	bf00      	nop
 8007bec:	200004f4 	.word	0x200004f4

08007bf0 <_Balloc>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	69c6      	ldr	r6, [r0, #28]
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	b976      	cbnz	r6, 8007c18 <_Balloc+0x28>
 8007bfa:	2010      	movs	r0, #16
 8007bfc:	f7ff ff44 	bl	8007a88 <malloc>
 8007c00:	4602      	mov	r2, r0
 8007c02:	61e0      	str	r0, [r4, #28]
 8007c04:	b920      	cbnz	r0, 8007c10 <_Balloc+0x20>
 8007c06:	216b      	movs	r1, #107	; 0x6b
 8007c08:	4b17      	ldr	r3, [pc, #92]	; (8007c68 <_Balloc+0x78>)
 8007c0a:	4818      	ldr	r0, [pc, #96]	; (8007c6c <_Balloc+0x7c>)
 8007c0c:	f001 fd7c 	bl	8009708 <__assert_func>
 8007c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c14:	6006      	str	r6, [r0, #0]
 8007c16:	60c6      	str	r6, [r0, #12]
 8007c18:	69e6      	ldr	r6, [r4, #28]
 8007c1a:	68f3      	ldr	r3, [r6, #12]
 8007c1c:	b183      	cbz	r3, 8007c40 <_Balloc+0x50>
 8007c1e:	69e3      	ldr	r3, [r4, #28]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c26:	b9b8      	cbnz	r0, 8007c58 <_Balloc+0x68>
 8007c28:	2101      	movs	r1, #1
 8007c2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c2e:	1d72      	adds	r2, r6, #5
 8007c30:	4620      	mov	r0, r4
 8007c32:	0092      	lsls	r2, r2, #2
 8007c34:	f001 fd86 	bl	8009744 <_calloc_r>
 8007c38:	b160      	cbz	r0, 8007c54 <_Balloc+0x64>
 8007c3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c3e:	e00e      	b.n	8007c5e <_Balloc+0x6e>
 8007c40:	2221      	movs	r2, #33	; 0x21
 8007c42:	2104      	movs	r1, #4
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 fd7d 	bl	8009744 <_calloc_r>
 8007c4a:	69e3      	ldr	r3, [r4, #28]
 8007c4c:	60f0      	str	r0, [r6, #12]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e4      	bne.n	8007c1e <_Balloc+0x2e>
 8007c54:	2000      	movs	r0, #0
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	6802      	ldr	r2, [r0, #0]
 8007c5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c64:	e7f7      	b.n	8007c56 <_Balloc+0x66>
 8007c66:	bf00      	nop
 8007c68:	0800a54c 	.word	0x0800a54c
 8007c6c:	0800a5cc 	.word	0x0800a5cc

08007c70 <_Bfree>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	69c6      	ldr	r6, [r0, #28]
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	b976      	cbnz	r6, 8007c98 <_Bfree+0x28>
 8007c7a:	2010      	movs	r0, #16
 8007c7c:	f7ff ff04 	bl	8007a88 <malloc>
 8007c80:	4602      	mov	r2, r0
 8007c82:	61e8      	str	r0, [r5, #28]
 8007c84:	b920      	cbnz	r0, 8007c90 <_Bfree+0x20>
 8007c86:	218f      	movs	r1, #143	; 0x8f
 8007c88:	4b08      	ldr	r3, [pc, #32]	; (8007cac <_Bfree+0x3c>)
 8007c8a:	4809      	ldr	r0, [pc, #36]	; (8007cb0 <_Bfree+0x40>)
 8007c8c:	f001 fd3c 	bl	8009708 <__assert_func>
 8007c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c94:	6006      	str	r6, [r0, #0]
 8007c96:	60c6      	str	r6, [r0, #12]
 8007c98:	b13c      	cbz	r4, 8007caa <_Bfree+0x3a>
 8007c9a:	69eb      	ldr	r3, [r5, #28]
 8007c9c:	6862      	ldr	r2, [r4, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ca4:	6021      	str	r1, [r4, #0]
 8007ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	0800a54c 	.word	0x0800a54c
 8007cb0:	0800a5cc 	.word	0x0800a5cc

08007cb4 <__multadd>:
 8007cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb8:	4607      	mov	r7, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	461e      	mov	r6, r3
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	690d      	ldr	r5, [r1, #16]
 8007cc2:	f101 0c14 	add.w	ip, r1, #20
 8007cc6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cca:	3001      	adds	r0, #1
 8007ccc:	b299      	uxth	r1, r3
 8007cce:	fb02 6101 	mla	r1, r2, r1, r6
 8007cd2:	0c1e      	lsrs	r6, r3, #16
 8007cd4:	0c0b      	lsrs	r3, r1, #16
 8007cd6:	fb02 3306 	mla	r3, r2, r6, r3
 8007cda:	b289      	uxth	r1, r1
 8007cdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ce0:	4285      	cmp	r5, r0
 8007ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ce6:	f84c 1b04 	str.w	r1, [ip], #4
 8007cea:	dcec      	bgt.n	8007cc6 <__multadd+0x12>
 8007cec:	b30e      	cbz	r6, 8007d32 <__multadd+0x7e>
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	42ab      	cmp	r3, r5
 8007cf2:	dc19      	bgt.n	8007d28 <__multadd+0x74>
 8007cf4:	6861      	ldr	r1, [r4, #4]
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	3101      	adds	r1, #1
 8007cfa:	f7ff ff79 	bl	8007bf0 <_Balloc>
 8007cfe:	4680      	mov	r8, r0
 8007d00:	b928      	cbnz	r0, 8007d0e <__multadd+0x5a>
 8007d02:	4602      	mov	r2, r0
 8007d04:	21ba      	movs	r1, #186	; 0xba
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <__multadd+0x84>)
 8007d08:	480c      	ldr	r0, [pc, #48]	; (8007d3c <__multadd+0x88>)
 8007d0a:	f001 fcfd 	bl	8009708 <__assert_func>
 8007d0e:	6922      	ldr	r2, [r4, #16]
 8007d10:	f104 010c 	add.w	r1, r4, #12
 8007d14:	3202      	adds	r2, #2
 8007d16:	0092      	lsls	r2, r2, #2
 8007d18:	300c      	adds	r0, #12
 8007d1a:	f001 fce1 	bl	80096e0 <memcpy>
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4638      	mov	r0, r7
 8007d22:	f7ff ffa5 	bl	8007c70 <_Bfree>
 8007d26:	4644      	mov	r4, r8
 8007d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	615e      	str	r6, [r3, #20]
 8007d30:	6125      	str	r5, [r4, #16]
 8007d32:	4620      	mov	r0, r4
 8007d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d38:	0800a5bb 	.word	0x0800a5bb
 8007d3c:	0800a5cc 	.word	0x0800a5cc

08007d40 <__s2b>:
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d44:	4615      	mov	r5, r2
 8007d46:	2209      	movs	r2, #9
 8007d48:	461f      	mov	r7, r3
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d52:	4606      	mov	r6, r0
 8007d54:	2201      	movs	r2, #1
 8007d56:	2100      	movs	r1, #0
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	db09      	blt.n	8007d70 <__s2b+0x30>
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff ff47 	bl	8007bf0 <_Balloc>
 8007d62:	b940      	cbnz	r0, 8007d76 <__s2b+0x36>
 8007d64:	4602      	mov	r2, r0
 8007d66:	21d3      	movs	r1, #211	; 0xd3
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <__s2b+0x8c>)
 8007d6a:	4819      	ldr	r0, [pc, #100]	; (8007dd0 <__s2b+0x90>)
 8007d6c:	f001 fccc 	bl	8009708 <__assert_func>
 8007d70:	0052      	lsls	r2, r2, #1
 8007d72:	3101      	adds	r1, #1
 8007d74:	e7f0      	b.n	8007d58 <__s2b+0x18>
 8007d76:	9b08      	ldr	r3, [sp, #32]
 8007d78:	2d09      	cmp	r5, #9
 8007d7a:	6143      	str	r3, [r0, #20]
 8007d7c:	f04f 0301 	mov.w	r3, #1
 8007d80:	6103      	str	r3, [r0, #16]
 8007d82:	dd16      	ble.n	8007db2 <__s2b+0x72>
 8007d84:	f104 0909 	add.w	r9, r4, #9
 8007d88:	46c8      	mov	r8, r9
 8007d8a:	442c      	add	r4, r5
 8007d8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d90:	4601      	mov	r1, r0
 8007d92:	220a      	movs	r2, #10
 8007d94:	4630      	mov	r0, r6
 8007d96:	3b30      	subs	r3, #48	; 0x30
 8007d98:	f7ff ff8c 	bl	8007cb4 <__multadd>
 8007d9c:	45a0      	cmp	r8, r4
 8007d9e:	d1f5      	bne.n	8007d8c <__s2b+0x4c>
 8007da0:	f1a5 0408 	sub.w	r4, r5, #8
 8007da4:	444c      	add	r4, r9
 8007da6:	1b2d      	subs	r5, r5, r4
 8007da8:	1963      	adds	r3, r4, r5
 8007daa:	42bb      	cmp	r3, r7
 8007dac:	db04      	blt.n	8007db8 <__s2b+0x78>
 8007dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db2:	2509      	movs	r5, #9
 8007db4:	340a      	adds	r4, #10
 8007db6:	e7f6      	b.n	8007da6 <__s2b+0x66>
 8007db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	3b30      	subs	r3, #48	; 0x30
 8007dc4:	f7ff ff76 	bl	8007cb4 <__multadd>
 8007dc8:	e7ee      	b.n	8007da8 <__s2b+0x68>
 8007dca:	bf00      	nop
 8007dcc:	0800a5bb 	.word	0x0800a5bb
 8007dd0:	0800a5cc 	.word	0x0800a5cc

08007dd4 <__hi0bits>:
 8007dd4:	0c02      	lsrs	r2, r0, #16
 8007dd6:	0412      	lsls	r2, r2, #16
 8007dd8:	4603      	mov	r3, r0
 8007dda:	b9ca      	cbnz	r2, 8007e10 <__hi0bits+0x3c>
 8007ddc:	0403      	lsls	r3, r0, #16
 8007dde:	2010      	movs	r0, #16
 8007de0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007de4:	bf04      	itt	eq
 8007de6:	021b      	lsleq	r3, r3, #8
 8007de8:	3008      	addeq	r0, #8
 8007dea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007dee:	bf04      	itt	eq
 8007df0:	011b      	lsleq	r3, r3, #4
 8007df2:	3004      	addeq	r0, #4
 8007df4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007df8:	bf04      	itt	eq
 8007dfa:	009b      	lsleq	r3, r3, #2
 8007dfc:	3002      	addeq	r0, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	db05      	blt.n	8007e0e <__hi0bits+0x3a>
 8007e02:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e06:	f100 0001 	add.w	r0, r0, #1
 8007e0a:	bf08      	it	eq
 8007e0c:	2020      	moveq	r0, #32
 8007e0e:	4770      	bx	lr
 8007e10:	2000      	movs	r0, #0
 8007e12:	e7e5      	b.n	8007de0 <__hi0bits+0xc>

08007e14 <__lo0bits>:
 8007e14:	6803      	ldr	r3, [r0, #0]
 8007e16:	4602      	mov	r2, r0
 8007e18:	f013 0007 	ands.w	r0, r3, #7
 8007e1c:	d00b      	beq.n	8007e36 <__lo0bits+0x22>
 8007e1e:	07d9      	lsls	r1, r3, #31
 8007e20:	d421      	bmi.n	8007e66 <__lo0bits+0x52>
 8007e22:	0798      	lsls	r0, r3, #30
 8007e24:	bf49      	itett	mi
 8007e26:	085b      	lsrmi	r3, r3, #1
 8007e28:	089b      	lsrpl	r3, r3, #2
 8007e2a:	2001      	movmi	r0, #1
 8007e2c:	6013      	strmi	r3, [r2, #0]
 8007e2e:	bf5c      	itt	pl
 8007e30:	2002      	movpl	r0, #2
 8007e32:	6013      	strpl	r3, [r2, #0]
 8007e34:	4770      	bx	lr
 8007e36:	b299      	uxth	r1, r3
 8007e38:	b909      	cbnz	r1, 8007e3e <__lo0bits+0x2a>
 8007e3a:	2010      	movs	r0, #16
 8007e3c:	0c1b      	lsrs	r3, r3, #16
 8007e3e:	b2d9      	uxtb	r1, r3
 8007e40:	b909      	cbnz	r1, 8007e46 <__lo0bits+0x32>
 8007e42:	3008      	adds	r0, #8
 8007e44:	0a1b      	lsrs	r3, r3, #8
 8007e46:	0719      	lsls	r1, r3, #28
 8007e48:	bf04      	itt	eq
 8007e4a:	091b      	lsreq	r3, r3, #4
 8007e4c:	3004      	addeq	r0, #4
 8007e4e:	0799      	lsls	r1, r3, #30
 8007e50:	bf04      	itt	eq
 8007e52:	089b      	lsreq	r3, r3, #2
 8007e54:	3002      	addeq	r0, #2
 8007e56:	07d9      	lsls	r1, r3, #31
 8007e58:	d403      	bmi.n	8007e62 <__lo0bits+0x4e>
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	f100 0001 	add.w	r0, r0, #1
 8007e60:	d003      	beq.n	8007e6a <__lo0bits+0x56>
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	4770      	bx	lr
 8007e66:	2000      	movs	r0, #0
 8007e68:	4770      	bx	lr
 8007e6a:	2020      	movs	r0, #32
 8007e6c:	4770      	bx	lr
	...

08007e70 <__i2b>:
 8007e70:	b510      	push	{r4, lr}
 8007e72:	460c      	mov	r4, r1
 8007e74:	2101      	movs	r1, #1
 8007e76:	f7ff febb 	bl	8007bf0 <_Balloc>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	b928      	cbnz	r0, 8007e8a <__i2b+0x1a>
 8007e7e:	f240 1145 	movw	r1, #325	; 0x145
 8007e82:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <__i2b+0x24>)
 8007e84:	4804      	ldr	r0, [pc, #16]	; (8007e98 <__i2b+0x28>)
 8007e86:	f001 fc3f 	bl	8009708 <__assert_func>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	6144      	str	r4, [r0, #20]
 8007e8e:	6103      	str	r3, [r0, #16]
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	bf00      	nop
 8007e94:	0800a5bb 	.word	0x0800a5bb
 8007e98:	0800a5cc 	.word	0x0800a5cc

08007e9c <__multiply>:
 8007e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	4691      	mov	r9, r2
 8007ea2:	690a      	ldr	r2, [r1, #16]
 8007ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	bfbe      	ittt	lt
 8007eae:	460b      	movlt	r3, r1
 8007eb0:	464c      	movlt	r4, r9
 8007eb2:	4699      	movlt	r9, r3
 8007eb4:	6927      	ldr	r7, [r4, #16]
 8007eb6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	6861      	ldr	r1, [r4, #4]
 8007ebe:	eb07 060a 	add.w	r6, r7, sl
 8007ec2:	42b3      	cmp	r3, r6
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	bfb8      	it	lt
 8007ec8:	3101      	addlt	r1, #1
 8007eca:	f7ff fe91 	bl	8007bf0 <_Balloc>
 8007ece:	b930      	cbnz	r0, 8007ede <__multiply+0x42>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ed6:	4b43      	ldr	r3, [pc, #268]	; (8007fe4 <__multiply+0x148>)
 8007ed8:	4843      	ldr	r0, [pc, #268]	; (8007fe8 <__multiply+0x14c>)
 8007eda:	f001 fc15 	bl	8009708 <__assert_func>
 8007ede:	f100 0514 	add.w	r5, r0, #20
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eea:	4543      	cmp	r3, r8
 8007eec:	d321      	bcc.n	8007f32 <__multiply+0x96>
 8007eee:	f104 0314 	add.w	r3, r4, #20
 8007ef2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ef6:	f109 0314 	add.w	r3, r9, #20
 8007efa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007efe:	9202      	str	r2, [sp, #8]
 8007f00:	1b3a      	subs	r2, r7, r4
 8007f02:	3a15      	subs	r2, #21
 8007f04:	f022 0203 	bic.w	r2, r2, #3
 8007f08:	3204      	adds	r2, #4
 8007f0a:	f104 0115 	add.w	r1, r4, #21
 8007f0e:	428f      	cmp	r7, r1
 8007f10:	bf38      	it	cc
 8007f12:	2204      	movcc	r2, #4
 8007f14:	9201      	str	r2, [sp, #4]
 8007f16:	9a02      	ldr	r2, [sp, #8]
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d80c      	bhi.n	8007f38 <__multiply+0x9c>
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	dd03      	ble.n	8007f2a <__multiply+0x8e>
 8007f22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d05a      	beq.n	8007fe0 <__multiply+0x144>
 8007f2a:	6106      	str	r6, [r0, #16]
 8007f2c:	b005      	add	sp, #20
 8007f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f32:	f843 2b04 	str.w	r2, [r3], #4
 8007f36:	e7d8      	b.n	8007eea <__multiply+0x4e>
 8007f38:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f3c:	f1ba 0f00 	cmp.w	sl, #0
 8007f40:	d023      	beq.n	8007f8a <__multiply+0xee>
 8007f42:	46a9      	mov	r9, r5
 8007f44:	f04f 0c00 	mov.w	ip, #0
 8007f48:	f104 0e14 	add.w	lr, r4, #20
 8007f4c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f50:	f8d9 1000 	ldr.w	r1, [r9]
 8007f54:	fa1f fb82 	uxth.w	fp, r2
 8007f58:	b289      	uxth	r1, r1
 8007f5a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f5e:	4461      	add	r1, ip
 8007f60:	f8d9 c000 	ldr.w	ip, [r9]
 8007f64:	0c12      	lsrs	r2, r2, #16
 8007f66:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f6a:	fb0a c202 	mla	r2, sl, r2, ip
 8007f6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f72:	b289      	uxth	r1, r1
 8007f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f78:	4577      	cmp	r7, lr
 8007f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f7e:	f849 1b04 	str.w	r1, [r9], #4
 8007f82:	d8e3      	bhi.n	8007f4c <__multiply+0xb0>
 8007f84:	9a01      	ldr	r2, [sp, #4]
 8007f86:	f845 c002 	str.w	ip, [r5, r2]
 8007f8a:	9a03      	ldr	r2, [sp, #12]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	d021      	beq.n	8007fdc <__multiply+0x140>
 8007f98:	46ae      	mov	lr, r5
 8007f9a:	f04f 0a00 	mov.w	sl, #0
 8007f9e:	6829      	ldr	r1, [r5, #0]
 8007fa0:	f104 0c14 	add.w	ip, r4, #20
 8007fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8007fa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fac:	b289      	uxth	r1, r1
 8007fae:	fb09 220b 	mla	r2, r9, fp, r2
 8007fb2:	4452      	add	r2, sl
 8007fb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fb8:	f84e 1b04 	str.w	r1, [lr], #4
 8007fbc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007fc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fc4:	f8be 1000 	ldrh.w	r1, [lr]
 8007fc8:	4567      	cmp	r7, ip
 8007fca:	fb09 110a 	mla	r1, r9, sl, r1
 8007fce:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007fd2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fd6:	d8e5      	bhi.n	8007fa4 <__multiply+0x108>
 8007fd8:	9a01      	ldr	r2, [sp, #4]
 8007fda:	50a9      	str	r1, [r5, r2]
 8007fdc:	3504      	adds	r5, #4
 8007fde:	e79a      	b.n	8007f16 <__multiply+0x7a>
 8007fe0:	3e01      	subs	r6, #1
 8007fe2:	e79c      	b.n	8007f1e <__multiply+0x82>
 8007fe4:	0800a5bb 	.word	0x0800a5bb
 8007fe8:	0800a5cc 	.word	0x0800a5cc

08007fec <__pow5mult>:
 8007fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	4615      	mov	r5, r2
 8007ff2:	f012 0203 	ands.w	r2, r2, #3
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	d007      	beq.n	800800c <__pow5mult+0x20>
 8007ffc:	4c25      	ldr	r4, [pc, #148]	; (8008094 <__pow5mult+0xa8>)
 8007ffe:	3a01      	subs	r2, #1
 8008000:	2300      	movs	r3, #0
 8008002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008006:	f7ff fe55 	bl	8007cb4 <__multadd>
 800800a:	4607      	mov	r7, r0
 800800c:	10ad      	asrs	r5, r5, #2
 800800e:	d03d      	beq.n	800808c <__pow5mult+0xa0>
 8008010:	69f4      	ldr	r4, [r6, #28]
 8008012:	b97c      	cbnz	r4, 8008034 <__pow5mult+0x48>
 8008014:	2010      	movs	r0, #16
 8008016:	f7ff fd37 	bl	8007a88 <malloc>
 800801a:	4602      	mov	r2, r0
 800801c:	61f0      	str	r0, [r6, #28]
 800801e:	b928      	cbnz	r0, 800802c <__pow5mult+0x40>
 8008020:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008024:	4b1c      	ldr	r3, [pc, #112]	; (8008098 <__pow5mult+0xac>)
 8008026:	481d      	ldr	r0, [pc, #116]	; (800809c <__pow5mult+0xb0>)
 8008028:	f001 fb6e 	bl	8009708 <__assert_func>
 800802c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008030:	6004      	str	r4, [r0, #0]
 8008032:	60c4      	str	r4, [r0, #12]
 8008034:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800803c:	b94c      	cbnz	r4, 8008052 <__pow5mult+0x66>
 800803e:	f240 2171 	movw	r1, #625	; 0x271
 8008042:	4630      	mov	r0, r6
 8008044:	f7ff ff14 	bl	8007e70 <__i2b>
 8008048:	2300      	movs	r3, #0
 800804a:	4604      	mov	r4, r0
 800804c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008050:	6003      	str	r3, [r0, #0]
 8008052:	f04f 0900 	mov.w	r9, #0
 8008056:	07eb      	lsls	r3, r5, #31
 8008058:	d50a      	bpl.n	8008070 <__pow5mult+0x84>
 800805a:	4639      	mov	r1, r7
 800805c:	4622      	mov	r2, r4
 800805e:	4630      	mov	r0, r6
 8008060:	f7ff ff1c 	bl	8007e9c <__multiply>
 8008064:	4680      	mov	r8, r0
 8008066:	4639      	mov	r1, r7
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff fe01 	bl	8007c70 <_Bfree>
 800806e:	4647      	mov	r7, r8
 8008070:	106d      	asrs	r5, r5, #1
 8008072:	d00b      	beq.n	800808c <__pow5mult+0xa0>
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	b938      	cbnz	r0, 8008088 <__pow5mult+0x9c>
 8008078:	4622      	mov	r2, r4
 800807a:	4621      	mov	r1, r4
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff ff0d 	bl	8007e9c <__multiply>
 8008082:	6020      	str	r0, [r4, #0]
 8008084:	f8c0 9000 	str.w	r9, [r0]
 8008088:	4604      	mov	r4, r0
 800808a:	e7e4      	b.n	8008056 <__pow5mult+0x6a>
 800808c:	4638      	mov	r0, r7
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008092:	bf00      	nop
 8008094:	0800a718 	.word	0x0800a718
 8008098:	0800a54c 	.word	0x0800a54c
 800809c:	0800a5cc 	.word	0x0800a5cc

080080a0 <__lshift>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	460c      	mov	r4, r1
 80080a6:	4607      	mov	r7, r0
 80080a8:	4691      	mov	r9, r2
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	6849      	ldr	r1, [r1, #4]
 80080ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080b8:	f108 0601 	add.w	r6, r8, #1
 80080bc:	42b3      	cmp	r3, r6
 80080be:	db0b      	blt.n	80080d8 <__lshift+0x38>
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7ff fd95 	bl	8007bf0 <_Balloc>
 80080c6:	4605      	mov	r5, r0
 80080c8:	b948      	cbnz	r0, 80080de <__lshift+0x3e>
 80080ca:	4602      	mov	r2, r0
 80080cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <__lshift+0xd0>)
 80080d2:	4828      	ldr	r0, [pc, #160]	; (8008174 <__lshift+0xd4>)
 80080d4:	f001 fb18 	bl	8009708 <__assert_func>
 80080d8:	3101      	adds	r1, #1
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	e7ee      	b.n	80080bc <__lshift+0x1c>
 80080de:	2300      	movs	r3, #0
 80080e0:	f100 0114 	add.w	r1, r0, #20
 80080e4:	f100 0210 	add.w	r2, r0, #16
 80080e8:	4618      	mov	r0, r3
 80080ea:	4553      	cmp	r3, sl
 80080ec:	db33      	blt.n	8008156 <__lshift+0xb6>
 80080ee:	6920      	ldr	r0, [r4, #16]
 80080f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080f4:	f104 0314 	add.w	r3, r4, #20
 80080f8:	f019 091f 	ands.w	r9, r9, #31
 80080fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008104:	d02b      	beq.n	800815e <__lshift+0xbe>
 8008106:	468a      	mov	sl, r1
 8008108:	2200      	movs	r2, #0
 800810a:	f1c9 0e20 	rsb	lr, r9, #32
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	fa00 f009 	lsl.w	r0, r0, r9
 8008114:	4310      	orrs	r0, r2
 8008116:	f84a 0b04 	str.w	r0, [sl], #4
 800811a:	f853 2b04 	ldr.w	r2, [r3], #4
 800811e:	459c      	cmp	ip, r3
 8008120:	fa22 f20e 	lsr.w	r2, r2, lr
 8008124:	d8f3      	bhi.n	800810e <__lshift+0x6e>
 8008126:	ebac 0304 	sub.w	r3, ip, r4
 800812a:	3b15      	subs	r3, #21
 800812c:	f023 0303 	bic.w	r3, r3, #3
 8008130:	3304      	adds	r3, #4
 8008132:	f104 0015 	add.w	r0, r4, #21
 8008136:	4584      	cmp	ip, r0
 8008138:	bf38      	it	cc
 800813a:	2304      	movcc	r3, #4
 800813c:	50ca      	str	r2, [r1, r3]
 800813e:	b10a      	cbz	r2, 8008144 <__lshift+0xa4>
 8008140:	f108 0602 	add.w	r6, r8, #2
 8008144:	3e01      	subs	r6, #1
 8008146:	4638      	mov	r0, r7
 8008148:	4621      	mov	r1, r4
 800814a:	612e      	str	r6, [r5, #16]
 800814c:	f7ff fd90 	bl	8007c70 <_Bfree>
 8008150:	4628      	mov	r0, r5
 8008152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008156:	f842 0f04 	str.w	r0, [r2, #4]!
 800815a:	3301      	adds	r3, #1
 800815c:	e7c5      	b.n	80080ea <__lshift+0x4a>
 800815e:	3904      	subs	r1, #4
 8008160:	f853 2b04 	ldr.w	r2, [r3], #4
 8008164:	459c      	cmp	ip, r3
 8008166:	f841 2f04 	str.w	r2, [r1, #4]!
 800816a:	d8f9      	bhi.n	8008160 <__lshift+0xc0>
 800816c:	e7ea      	b.n	8008144 <__lshift+0xa4>
 800816e:	bf00      	nop
 8008170:	0800a5bb 	.word	0x0800a5bb
 8008174:	0800a5cc 	.word	0x0800a5cc

08008178 <__mcmp>:
 8008178:	4603      	mov	r3, r0
 800817a:	690a      	ldr	r2, [r1, #16]
 800817c:	6900      	ldr	r0, [r0, #16]
 800817e:	b530      	push	{r4, r5, lr}
 8008180:	1a80      	subs	r0, r0, r2
 8008182:	d10d      	bne.n	80081a0 <__mcmp+0x28>
 8008184:	3314      	adds	r3, #20
 8008186:	3114      	adds	r1, #20
 8008188:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800818c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008198:	4295      	cmp	r5, r2
 800819a:	d002      	beq.n	80081a2 <__mcmp+0x2a>
 800819c:	d304      	bcc.n	80081a8 <__mcmp+0x30>
 800819e:	2001      	movs	r0, #1
 80081a0:	bd30      	pop	{r4, r5, pc}
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	d3f4      	bcc.n	8008190 <__mcmp+0x18>
 80081a6:	e7fb      	b.n	80081a0 <__mcmp+0x28>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	e7f8      	b.n	80081a0 <__mcmp+0x28>
	...

080081b0 <__mdiff>:
 80081b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	460d      	mov	r5, r1
 80081b6:	4607      	mov	r7, r0
 80081b8:	4611      	mov	r1, r2
 80081ba:	4628      	mov	r0, r5
 80081bc:	4614      	mov	r4, r2
 80081be:	f7ff ffdb 	bl	8008178 <__mcmp>
 80081c2:	1e06      	subs	r6, r0, #0
 80081c4:	d111      	bne.n	80081ea <__mdiff+0x3a>
 80081c6:	4631      	mov	r1, r6
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff fd11 	bl	8007bf0 <_Balloc>
 80081ce:	4602      	mov	r2, r0
 80081d0:	b928      	cbnz	r0, 80081de <__mdiff+0x2e>
 80081d2:	f240 2137 	movw	r1, #567	; 0x237
 80081d6:	4b3a      	ldr	r3, [pc, #232]	; (80082c0 <__mdiff+0x110>)
 80081d8:	483a      	ldr	r0, [pc, #232]	; (80082c4 <__mdiff+0x114>)
 80081da:	f001 fa95 	bl	8009708 <__assert_func>
 80081de:	2301      	movs	r3, #1
 80081e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80081e4:	4610      	mov	r0, r2
 80081e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	bfa4      	itt	ge
 80081ec:	4623      	movge	r3, r4
 80081ee:	462c      	movge	r4, r5
 80081f0:	4638      	mov	r0, r7
 80081f2:	6861      	ldr	r1, [r4, #4]
 80081f4:	bfa6      	itte	ge
 80081f6:	461d      	movge	r5, r3
 80081f8:	2600      	movge	r6, #0
 80081fa:	2601      	movlt	r6, #1
 80081fc:	f7ff fcf8 	bl	8007bf0 <_Balloc>
 8008200:	4602      	mov	r2, r0
 8008202:	b918      	cbnz	r0, 800820c <__mdiff+0x5c>
 8008204:	f240 2145 	movw	r1, #581	; 0x245
 8008208:	4b2d      	ldr	r3, [pc, #180]	; (80082c0 <__mdiff+0x110>)
 800820a:	e7e5      	b.n	80081d8 <__mdiff+0x28>
 800820c:	f102 0814 	add.w	r8, r2, #20
 8008210:	46c2      	mov	sl, r8
 8008212:	f04f 0c00 	mov.w	ip, #0
 8008216:	6927      	ldr	r7, [r4, #16]
 8008218:	60c6      	str	r6, [r0, #12]
 800821a:	692e      	ldr	r6, [r5, #16]
 800821c:	f104 0014 	add.w	r0, r4, #20
 8008220:	f105 0914 	add.w	r9, r5, #20
 8008224:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800822c:	3410      	adds	r4, #16
 800822e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008232:	f859 3b04 	ldr.w	r3, [r9], #4
 8008236:	fa1f f18b 	uxth.w	r1, fp
 800823a:	4461      	add	r1, ip
 800823c:	fa1f fc83 	uxth.w	ip, r3
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	eba1 010c 	sub.w	r1, r1, ip
 8008246:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800824a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800824e:	b289      	uxth	r1, r1
 8008250:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008254:	454e      	cmp	r6, r9
 8008256:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800825a:	f84a 1b04 	str.w	r1, [sl], #4
 800825e:	d8e6      	bhi.n	800822e <__mdiff+0x7e>
 8008260:	1b73      	subs	r3, r6, r5
 8008262:	3b15      	subs	r3, #21
 8008264:	f023 0303 	bic.w	r3, r3, #3
 8008268:	3515      	adds	r5, #21
 800826a:	3304      	adds	r3, #4
 800826c:	42ae      	cmp	r6, r5
 800826e:	bf38      	it	cc
 8008270:	2304      	movcc	r3, #4
 8008272:	4418      	add	r0, r3
 8008274:	4443      	add	r3, r8
 8008276:	461e      	mov	r6, r3
 8008278:	4605      	mov	r5, r0
 800827a:	4575      	cmp	r5, lr
 800827c:	d30e      	bcc.n	800829c <__mdiff+0xec>
 800827e:	f10e 0103 	add.w	r1, lr, #3
 8008282:	1a09      	subs	r1, r1, r0
 8008284:	f021 0103 	bic.w	r1, r1, #3
 8008288:	3803      	subs	r0, #3
 800828a:	4586      	cmp	lr, r0
 800828c:	bf38      	it	cc
 800828e:	2100      	movcc	r1, #0
 8008290:	440b      	add	r3, r1
 8008292:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008296:	b189      	cbz	r1, 80082bc <__mdiff+0x10c>
 8008298:	6117      	str	r7, [r2, #16]
 800829a:	e7a3      	b.n	80081e4 <__mdiff+0x34>
 800829c:	f855 8b04 	ldr.w	r8, [r5], #4
 80082a0:	fa1f f188 	uxth.w	r1, r8
 80082a4:	4461      	add	r1, ip
 80082a6:	140c      	asrs	r4, r1, #16
 80082a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082ac:	b289      	uxth	r1, r1
 80082ae:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80082b2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80082b6:	f846 1b04 	str.w	r1, [r6], #4
 80082ba:	e7de      	b.n	800827a <__mdiff+0xca>
 80082bc:	3f01      	subs	r7, #1
 80082be:	e7e8      	b.n	8008292 <__mdiff+0xe2>
 80082c0:	0800a5bb 	.word	0x0800a5bb
 80082c4:	0800a5cc 	.word	0x0800a5cc

080082c8 <__ulp>:
 80082c8:	4b0e      	ldr	r3, [pc, #56]	; (8008304 <__ulp+0x3c>)
 80082ca:	400b      	ands	r3, r1
 80082cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	dc08      	bgt.n	80082e6 <__ulp+0x1e>
 80082d4:	425b      	negs	r3, r3
 80082d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80082da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082de:	da04      	bge.n	80082ea <__ulp+0x22>
 80082e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80082e4:	4113      	asrs	r3, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	e008      	b.n	80082fc <__ulp+0x34>
 80082ea:	f1a2 0314 	sub.w	r3, r2, #20
 80082ee:	2b1e      	cmp	r3, #30
 80082f0:	bfd6      	itet	le
 80082f2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80082f6:	2201      	movgt	r2, #1
 80082f8:	40da      	lsrle	r2, r3
 80082fa:	2300      	movs	r3, #0
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	7ff00000 	.word	0x7ff00000

08008308 <__b2d>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	6905      	ldr	r5, [r0, #16]
 800830c:	f100 0714 	add.w	r7, r0, #20
 8008310:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008314:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008318:	1f2e      	subs	r6, r5, #4
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff fd5a 	bl	8007dd4 <__hi0bits>
 8008320:	f1c0 0220 	rsb	r2, r0, #32
 8008324:	280a      	cmp	r0, #10
 8008326:	4603      	mov	r3, r0
 8008328:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008394 <__b2d+0x8c>
 800832c:	600a      	str	r2, [r1, #0]
 800832e:	dc12      	bgt.n	8008356 <__b2d+0x4e>
 8008330:	f1c0 0e0b 	rsb	lr, r0, #11
 8008334:	fa24 f20e 	lsr.w	r2, r4, lr
 8008338:	42b7      	cmp	r7, r6
 800833a:	ea42 010c 	orr.w	r1, r2, ip
 800833e:	bf2c      	ite	cs
 8008340:	2200      	movcs	r2, #0
 8008342:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008346:	3315      	adds	r3, #21
 8008348:	fa04 f303 	lsl.w	r3, r4, r3
 800834c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008350:	431a      	orrs	r2, r3
 8008352:	4610      	mov	r0, r2
 8008354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008356:	42b7      	cmp	r7, r6
 8008358:	bf2e      	itee	cs
 800835a:	2200      	movcs	r2, #0
 800835c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008360:	f1a5 0608 	subcc.w	r6, r5, #8
 8008364:	3b0b      	subs	r3, #11
 8008366:	d012      	beq.n	800838e <__b2d+0x86>
 8008368:	f1c3 0520 	rsb	r5, r3, #32
 800836c:	fa22 f105 	lsr.w	r1, r2, r5
 8008370:	409c      	lsls	r4, r3
 8008372:	430c      	orrs	r4, r1
 8008374:	42be      	cmp	r6, r7
 8008376:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800837a:	bf94      	ite	ls
 800837c:	2400      	movls	r4, #0
 800837e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008382:	409a      	lsls	r2, r3
 8008384:	40ec      	lsrs	r4, r5
 8008386:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800838a:	4322      	orrs	r2, r4
 800838c:	e7e1      	b.n	8008352 <__b2d+0x4a>
 800838e:	ea44 010c 	orr.w	r1, r4, ip
 8008392:	e7de      	b.n	8008352 <__b2d+0x4a>
 8008394:	3ff00000 	.word	0x3ff00000

08008398 <__d2b>:
 8008398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800839a:	2101      	movs	r1, #1
 800839c:	4617      	mov	r7, r2
 800839e:	461c      	mov	r4, r3
 80083a0:	9e08      	ldr	r6, [sp, #32]
 80083a2:	f7ff fc25 	bl	8007bf0 <_Balloc>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b930      	cbnz	r0, 80083b8 <__d2b+0x20>
 80083aa:	4602      	mov	r2, r0
 80083ac:	f240 310f 	movw	r1, #783	; 0x30f
 80083b0:	4b22      	ldr	r3, [pc, #136]	; (800843c <__d2b+0xa4>)
 80083b2:	4823      	ldr	r0, [pc, #140]	; (8008440 <__d2b+0xa8>)
 80083b4:	f001 f9a8 	bl	8009708 <__assert_func>
 80083b8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80083bc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80083c0:	bb24      	cbnz	r4, 800840c <__d2b+0x74>
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	d026      	beq.n	8008416 <__d2b+0x7e>
 80083c8:	4668      	mov	r0, sp
 80083ca:	9700      	str	r7, [sp, #0]
 80083cc:	f7ff fd22 	bl	8007e14 <__lo0bits>
 80083d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083d4:	b1e8      	cbz	r0, 8008412 <__d2b+0x7a>
 80083d6:	f1c0 0320 	rsb	r3, r0, #32
 80083da:	fa02 f303 	lsl.w	r3, r2, r3
 80083de:	430b      	orrs	r3, r1
 80083e0:	40c2      	lsrs	r2, r0
 80083e2:	616b      	str	r3, [r5, #20]
 80083e4:	9201      	str	r2, [sp, #4]
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bf14      	ite	ne
 80083ec:	2102      	movne	r1, #2
 80083ee:	2101      	moveq	r1, #1
 80083f0:	61ab      	str	r3, [r5, #24]
 80083f2:	6129      	str	r1, [r5, #16]
 80083f4:	b1bc      	cbz	r4, 8008426 <__d2b+0x8e>
 80083f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083fa:	4404      	add	r4, r0
 80083fc:	6034      	str	r4, [r6, #0]
 80083fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008404:	6018      	str	r0, [r3, #0]
 8008406:	4628      	mov	r0, r5
 8008408:	b003      	add	sp, #12
 800840a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008410:	e7d7      	b.n	80083c2 <__d2b+0x2a>
 8008412:	6169      	str	r1, [r5, #20]
 8008414:	e7e7      	b.n	80083e6 <__d2b+0x4e>
 8008416:	a801      	add	r0, sp, #4
 8008418:	f7ff fcfc 	bl	8007e14 <__lo0bits>
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	2101      	movs	r1, #1
 8008420:	616b      	str	r3, [r5, #20]
 8008422:	3020      	adds	r0, #32
 8008424:	e7e5      	b.n	80083f2 <__d2b+0x5a>
 8008426:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800842a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800842e:	6030      	str	r0, [r6, #0]
 8008430:	6918      	ldr	r0, [r3, #16]
 8008432:	f7ff fccf 	bl	8007dd4 <__hi0bits>
 8008436:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800843a:	e7e2      	b.n	8008402 <__d2b+0x6a>
 800843c:	0800a5bb 	.word	0x0800a5bb
 8008440:	0800a5cc 	.word	0x0800a5cc

08008444 <__ratio>:
 8008444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4688      	mov	r8, r1
 800844a:	4669      	mov	r1, sp
 800844c:	4681      	mov	r9, r0
 800844e:	f7ff ff5b 	bl	8008308 <__b2d>
 8008452:	460f      	mov	r7, r1
 8008454:	4604      	mov	r4, r0
 8008456:	460d      	mov	r5, r1
 8008458:	4640      	mov	r0, r8
 800845a:	a901      	add	r1, sp, #4
 800845c:	f7ff ff54 	bl	8008308 <__b2d>
 8008460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008464:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008468:	468b      	mov	fp, r1
 800846a:	eba3 0c02 	sub.w	ip, r3, r2
 800846e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008478:	2b00      	cmp	r3, #0
 800847a:	bfd5      	itete	le
 800847c:	460a      	movle	r2, r1
 800847e:	462a      	movgt	r2, r5
 8008480:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008484:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008488:	bfd8      	it	le
 800848a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800848e:	465b      	mov	r3, fp
 8008490:	4602      	mov	r2, r0
 8008492:	4639      	mov	r1, r7
 8008494:	4620      	mov	r0, r4
 8008496:	f7f8 f953 	bl	8000740 <__aeabi_ddiv>
 800849a:	b003      	add	sp, #12
 800849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084a0 <__copybits>:
 80084a0:	3901      	subs	r1, #1
 80084a2:	b570      	push	{r4, r5, r6, lr}
 80084a4:	1149      	asrs	r1, r1, #5
 80084a6:	6914      	ldr	r4, [r2, #16]
 80084a8:	3101      	adds	r1, #1
 80084aa:	f102 0314 	add.w	r3, r2, #20
 80084ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084b6:	1f05      	subs	r5, r0, #4
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d30c      	bcc.n	80084d6 <__copybits+0x36>
 80084bc:	1aa3      	subs	r3, r4, r2
 80084be:	3b11      	subs	r3, #17
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	3211      	adds	r2, #17
 80084c6:	42a2      	cmp	r2, r4
 80084c8:	bf88      	it	hi
 80084ca:	2300      	movhi	r3, #0
 80084cc:	4418      	add	r0, r3
 80084ce:	2300      	movs	r3, #0
 80084d0:	4288      	cmp	r0, r1
 80084d2:	d305      	bcc.n	80084e0 <__copybits+0x40>
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
 80084d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80084da:	f845 6f04 	str.w	r6, [r5, #4]!
 80084de:	e7eb      	b.n	80084b8 <__copybits+0x18>
 80084e0:	f840 3b04 	str.w	r3, [r0], #4
 80084e4:	e7f4      	b.n	80084d0 <__copybits+0x30>

080084e6 <__any_on>:
 80084e6:	f100 0214 	add.w	r2, r0, #20
 80084ea:	6900      	ldr	r0, [r0, #16]
 80084ec:	114b      	asrs	r3, r1, #5
 80084ee:	4298      	cmp	r0, r3
 80084f0:	b510      	push	{r4, lr}
 80084f2:	db11      	blt.n	8008518 <__any_on+0x32>
 80084f4:	dd0a      	ble.n	800850c <__any_on+0x26>
 80084f6:	f011 011f 	ands.w	r1, r1, #31
 80084fa:	d007      	beq.n	800850c <__any_on+0x26>
 80084fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008500:	fa24 f001 	lsr.w	r0, r4, r1
 8008504:	fa00 f101 	lsl.w	r1, r0, r1
 8008508:	428c      	cmp	r4, r1
 800850a:	d10b      	bne.n	8008524 <__any_on+0x3e>
 800850c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008510:	4293      	cmp	r3, r2
 8008512:	d803      	bhi.n	800851c <__any_on+0x36>
 8008514:	2000      	movs	r0, #0
 8008516:	bd10      	pop	{r4, pc}
 8008518:	4603      	mov	r3, r0
 800851a:	e7f7      	b.n	800850c <__any_on+0x26>
 800851c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008520:	2900      	cmp	r1, #0
 8008522:	d0f5      	beq.n	8008510 <__any_on+0x2a>
 8008524:	2001      	movs	r0, #1
 8008526:	e7f6      	b.n	8008516 <__any_on+0x30>

08008528 <sulp>:
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852c:	460f      	mov	r7, r1
 800852e:	4690      	mov	r8, r2
 8008530:	f7ff feca 	bl	80082c8 <__ulp>
 8008534:	4604      	mov	r4, r0
 8008536:	460d      	mov	r5, r1
 8008538:	f1b8 0f00 	cmp.w	r8, #0
 800853c:	d011      	beq.n	8008562 <sulp+0x3a>
 800853e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008542:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008546:	2b00      	cmp	r3, #0
 8008548:	dd0b      	ble.n	8008562 <sulp+0x3a>
 800854a:	2400      	movs	r4, #0
 800854c:	051b      	lsls	r3, r3, #20
 800854e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008552:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008556:	4622      	mov	r2, r4
 8008558:	462b      	mov	r3, r5
 800855a:	f7f7 ffc7 	bl	80004ec <__aeabi_dmul>
 800855e:	4604      	mov	r4, r0
 8008560:	460d      	mov	r5, r1
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800856a:	0000      	movs	r0, r0
 800856c:	0000      	movs	r0, r0
	...

08008570 <_strtod_l>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	b09f      	sub	sp, #124	; 0x7c
 8008576:	9217      	str	r2, [sp, #92]	; 0x5c
 8008578:	2200      	movs	r2, #0
 800857a:	4604      	mov	r4, r0
 800857c:	921a      	str	r2, [sp, #104]	; 0x68
 800857e:	460d      	mov	r5, r1
 8008580:	f04f 0800 	mov.w	r8, #0
 8008584:	f04f 0900 	mov.w	r9, #0
 8008588:	460a      	mov	r2, r1
 800858a:	9219      	str	r2, [sp, #100]	; 0x64
 800858c:	7811      	ldrb	r1, [r2, #0]
 800858e:	292b      	cmp	r1, #43	; 0x2b
 8008590:	d04a      	beq.n	8008628 <_strtod_l+0xb8>
 8008592:	d838      	bhi.n	8008606 <_strtod_l+0x96>
 8008594:	290d      	cmp	r1, #13
 8008596:	d832      	bhi.n	80085fe <_strtod_l+0x8e>
 8008598:	2908      	cmp	r1, #8
 800859a:	d832      	bhi.n	8008602 <_strtod_l+0x92>
 800859c:	2900      	cmp	r1, #0
 800859e:	d03b      	beq.n	8008618 <_strtod_l+0xa8>
 80085a0:	2200      	movs	r2, #0
 80085a2:	920e      	str	r2, [sp, #56]	; 0x38
 80085a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80085a6:	7832      	ldrb	r2, [r6, #0]
 80085a8:	2a30      	cmp	r2, #48	; 0x30
 80085aa:	f040 80b2 	bne.w	8008712 <_strtod_l+0x1a2>
 80085ae:	7872      	ldrb	r2, [r6, #1]
 80085b0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80085b4:	2a58      	cmp	r2, #88	; 0x58
 80085b6:	d16e      	bne.n	8008696 <_strtod_l+0x126>
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085bc:	4620      	mov	r0, r4
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	ab1a      	add	r3, sp, #104	; 0x68
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	4a8c      	ldr	r2, [pc, #560]	; (80087f8 <_strtod_l+0x288>)
 80085c6:	ab1b      	add	r3, sp, #108	; 0x6c
 80085c8:	a919      	add	r1, sp, #100	; 0x64
 80085ca:	f001 f937 	bl	800983c <__gethex>
 80085ce:	f010 070f 	ands.w	r7, r0, #15
 80085d2:	4605      	mov	r5, r0
 80085d4:	d005      	beq.n	80085e2 <_strtod_l+0x72>
 80085d6:	2f06      	cmp	r7, #6
 80085d8:	d128      	bne.n	800862c <_strtod_l+0xbc>
 80085da:	2300      	movs	r3, #0
 80085dc:	3601      	adds	r6, #1
 80085de:	9619      	str	r6, [sp, #100]	; 0x64
 80085e0:	930e      	str	r3, [sp, #56]	; 0x38
 80085e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 85a0 	bne.w	800912a <_strtod_l+0xbba>
 80085ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ec:	b1cb      	cbz	r3, 8008622 <_strtod_l+0xb2>
 80085ee:	4642      	mov	r2, r8
 80085f0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085f4:	4610      	mov	r0, r2
 80085f6:	4619      	mov	r1, r3
 80085f8:	b01f      	add	sp, #124	; 0x7c
 80085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fe:	2920      	cmp	r1, #32
 8008600:	d1ce      	bne.n	80085a0 <_strtod_l+0x30>
 8008602:	3201      	adds	r2, #1
 8008604:	e7c1      	b.n	800858a <_strtod_l+0x1a>
 8008606:	292d      	cmp	r1, #45	; 0x2d
 8008608:	d1ca      	bne.n	80085a0 <_strtod_l+0x30>
 800860a:	2101      	movs	r1, #1
 800860c:	910e      	str	r1, [sp, #56]	; 0x38
 800860e:	1c51      	adds	r1, r2, #1
 8008610:	9119      	str	r1, [sp, #100]	; 0x64
 8008612:	7852      	ldrb	r2, [r2, #1]
 8008614:	2a00      	cmp	r2, #0
 8008616:	d1c5      	bne.n	80085a4 <_strtod_l+0x34>
 8008618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800861a:	9519      	str	r5, [sp, #100]	; 0x64
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 8582 	bne.w	8009126 <_strtod_l+0xbb6>
 8008622:	4642      	mov	r2, r8
 8008624:	464b      	mov	r3, r9
 8008626:	e7e5      	b.n	80085f4 <_strtod_l+0x84>
 8008628:	2100      	movs	r1, #0
 800862a:	e7ef      	b.n	800860c <_strtod_l+0x9c>
 800862c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800862e:	b13a      	cbz	r2, 8008640 <_strtod_l+0xd0>
 8008630:	2135      	movs	r1, #53	; 0x35
 8008632:	a81c      	add	r0, sp, #112	; 0x70
 8008634:	f7ff ff34 	bl	80084a0 <__copybits>
 8008638:	4620      	mov	r0, r4
 800863a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800863c:	f7ff fb18 	bl	8007c70 <_Bfree>
 8008640:	3f01      	subs	r7, #1
 8008642:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008644:	2f04      	cmp	r7, #4
 8008646:	d806      	bhi.n	8008656 <_strtod_l+0xe6>
 8008648:	e8df f007 	tbb	[pc, r7]
 800864c:	201d0314 	.word	0x201d0314
 8008650:	14          	.byte	0x14
 8008651:	00          	.byte	0x00
 8008652:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008656:	05e9      	lsls	r1, r5, #23
 8008658:	bf48      	it	mi
 800865a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800865e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008662:	0d1b      	lsrs	r3, r3, #20
 8008664:	051b      	lsls	r3, r3, #20
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1bb      	bne.n	80085e2 <_strtod_l+0x72>
 800866a:	f7fe fb15 	bl	8006c98 <__errno>
 800866e:	2322      	movs	r3, #34	; 0x22
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	e7b6      	b.n	80085e2 <_strtod_l+0x72>
 8008674:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008678:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800867c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008680:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008684:	e7e7      	b.n	8008656 <_strtod_l+0xe6>
 8008686:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80087fc <_strtod_l+0x28c>
 800868a:	e7e4      	b.n	8008656 <_strtod_l+0xe6>
 800868c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008690:	f04f 38ff 	mov.w	r8, #4294967295
 8008694:	e7df      	b.n	8008656 <_strtod_l+0xe6>
 8008696:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	9219      	str	r2, [sp, #100]	; 0x64
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	2b30      	cmp	r3, #48	; 0x30
 80086a0:	d0f9      	beq.n	8008696 <_strtod_l+0x126>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d09d      	beq.n	80085e2 <_strtod_l+0x72>
 80086a6:	2301      	movs	r3, #1
 80086a8:	f04f 0a00 	mov.w	sl, #0
 80086ac:	220a      	movs	r2, #10
 80086ae:	46d3      	mov	fp, sl
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086b4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80086b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80086bc:	7806      	ldrb	r6, [r0, #0]
 80086be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80086c2:	b2d9      	uxtb	r1, r3
 80086c4:	2909      	cmp	r1, #9
 80086c6:	d926      	bls.n	8008716 <_strtod_l+0x1a6>
 80086c8:	2201      	movs	r2, #1
 80086ca:	494d      	ldr	r1, [pc, #308]	; (8008800 <_strtod_l+0x290>)
 80086cc:	f000 ffe6 	bl	800969c <strncmp>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d030      	beq.n	8008736 <_strtod_l+0x1c6>
 80086d4:	2000      	movs	r0, #0
 80086d6:	4632      	mov	r2, r6
 80086d8:	4603      	mov	r3, r0
 80086da:	465e      	mov	r6, fp
 80086dc:	9008      	str	r0, [sp, #32]
 80086de:	2a65      	cmp	r2, #101	; 0x65
 80086e0:	d001      	beq.n	80086e6 <_strtod_l+0x176>
 80086e2:	2a45      	cmp	r2, #69	; 0x45
 80086e4:	d113      	bne.n	800870e <_strtod_l+0x19e>
 80086e6:	b91e      	cbnz	r6, 80086f0 <_strtod_l+0x180>
 80086e8:	9a05      	ldr	r2, [sp, #20]
 80086ea:	4302      	orrs	r2, r0
 80086ec:	d094      	beq.n	8008618 <_strtod_l+0xa8>
 80086ee:	2600      	movs	r6, #0
 80086f0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80086f2:	1c6a      	adds	r2, r5, #1
 80086f4:	9219      	str	r2, [sp, #100]	; 0x64
 80086f6:	786a      	ldrb	r2, [r5, #1]
 80086f8:	2a2b      	cmp	r2, #43	; 0x2b
 80086fa:	d074      	beq.n	80087e6 <_strtod_l+0x276>
 80086fc:	2a2d      	cmp	r2, #45	; 0x2d
 80086fe:	d078      	beq.n	80087f2 <_strtod_l+0x282>
 8008700:	f04f 0c00 	mov.w	ip, #0
 8008704:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008708:	2909      	cmp	r1, #9
 800870a:	d97f      	bls.n	800880c <_strtod_l+0x29c>
 800870c:	9519      	str	r5, [sp, #100]	; 0x64
 800870e:	2700      	movs	r7, #0
 8008710:	e09e      	b.n	8008850 <_strtod_l+0x2e0>
 8008712:	2300      	movs	r3, #0
 8008714:	e7c8      	b.n	80086a8 <_strtod_l+0x138>
 8008716:	f1bb 0f08 	cmp.w	fp, #8
 800871a:	bfd8      	it	le
 800871c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800871e:	f100 0001 	add.w	r0, r0, #1
 8008722:	bfd6      	itet	le
 8008724:	fb02 3301 	mlale	r3, r2, r1, r3
 8008728:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800872c:	930a      	strle	r3, [sp, #40]	; 0x28
 800872e:	f10b 0b01 	add.w	fp, fp, #1
 8008732:	9019      	str	r0, [sp, #100]	; 0x64
 8008734:	e7c1      	b.n	80086ba <_strtod_l+0x14a>
 8008736:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	9219      	str	r2, [sp, #100]	; 0x64
 800873c:	785a      	ldrb	r2, [r3, #1]
 800873e:	f1bb 0f00 	cmp.w	fp, #0
 8008742:	d037      	beq.n	80087b4 <_strtod_l+0x244>
 8008744:	465e      	mov	r6, fp
 8008746:	9008      	str	r0, [sp, #32]
 8008748:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800874c:	2b09      	cmp	r3, #9
 800874e:	d912      	bls.n	8008776 <_strtod_l+0x206>
 8008750:	2301      	movs	r3, #1
 8008752:	e7c4      	b.n	80086de <_strtod_l+0x16e>
 8008754:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008756:	3001      	adds	r0, #1
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	9219      	str	r2, [sp, #100]	; 0x64
 800875c:	785a      	ldrb	r2, [r3, #1]
 800875e:	2a30      	cmp	r2, #48	; 0x30
 8008760:	d0f8      	beq.n	8008754 <_strtod_l+0x1e4>
 8008762:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008766:	2b08      	cmp	r3, #8
 8008768:	f200 84e4 	bhi.w	8009134 <_strtod_l+0xbc4>
 800876c:	9008      	str	r0, [sp, #32]
 800876e:	2000      	movs	r0, #0
 8008770:	4606      	mov	r6, r0
 8008772:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008774:	930b      	str	r3, [sp, #44]	; 0x2c
 8008776:	3a30      	subs	r2, #48	; 0x30
 8008778:	f100 0301 	add.w	r3, r0, #1
 800877c:	d014      	beq.n	80087a8 <_strtod_l+0x238>
 800877e:	9908      	ldr	r1, [sp, #32]
 8008780:	eb00 0c06 	add.w	ip, r0, r6
 8008784:	4419      	add	r1, r3
 8008786:	9108      	str	r1, [sp, #32]
 8008788:	4633      	mov	r3, r6
 800878a:	210a      	movs	r1, #10
 800878c:	4563      	cmp	r3, ip
 800878e:	d113      	bne.n	80087b8 <_strtod_l+0x248>
 8008790:	1833      	adds	r3, r6, r0
 8008792:	2b08      	cmp	r3, #8
 8008794:	f106 0601 	add.w	r6, r6, #1
 8008798:	4406      	add	r6, r0
 800879a:	dc1a      	bgt.n	80087d2 <_strtod_l+0x262>
 800879c:	230a      	movs	r3, #10
 800879e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087a0:	fb03 2301 	mla	r3, r3, r1, r2
 80087a4:	930a      	str	r3, [sp, #40]	; 0x28
 80087a6:	2300      	movs	r3, #0
 80087a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087aa:	4618      	mov	r0, r3
 80087ac:	1c51      	adds	r1, r2, #1
 80087ae:	9119      	str	r1, [sp, #100]	; 0x64
 80087b0:	7852      	ldrb	r2, [r2, #1]
 80087b2:	e7c9      	b.n	8008748 <_strtod_l+0x1d8>
 80087b4:	4658      	mov	r0, fp
 80087b6:	e7d2      	b.n	800875e <_strtod_l+0x1ee>
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	f103 0301 	add.w	r3, r3, #1
 80087be:	dc03      	bgt.n	80087c8 <_strtod_l+0x258>
 80087c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80087c2:	434f      	muls	r7, r1
 80087c4:	970a      	str	r7, [sp, #40]	; 0x28
 80087c6:	e7e1      	b.n	800878c <_strtod_l+0x21c>
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	bfd8      	it	le
 80087cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80087d0:	e7dc      	b.n	800878c <_strtod_l+0x21c>
 80087d2:	2e10      	cmp	r6, #16
 80087d4:	bfdc      	itt	le
 80087d6:	230a      	movle	r3, #10
 80087d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80087dc:	e7e3      	b.n	80087a6 <_strtod_l+0x236>
 80087de:	2300      	movs	r3, #0
 80087e0:	9308      	str	r3, [sp, #32]
 80087e2:	2301      	movs	r3, #1
 80087e4:	e780      	b.n	80086e8 <_strtod_l+0x178>
 80087e6:	f04f 0c00 	mov.w	ip, #0
 80087ea:	1caa      	adds	r2, r5, #2
 80087ec:	9219      	str	r2, [sp, #100]	; 0x64
 80087ee:	78aa      	ldrb	r2, [r5, #2]
 80087f0:	e788      	b.n	8008704 <_strtod_l+0x194>
 80087f2:	f04f 0c01 	mov.w	ip, #1
 80087f6:	e7f8      	b.n	80087ea <_strtod_l+0x27a>
 80087f8:	0800a728 	.word	0x0800a728
 80087fc:	7ff00000 	.word	0x7ff00000
 8008800:	0800a724 	.word	0x0800a724
 8008804:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008806:	1c51      	adds	r1, r2, #1
 8008808:	9119      	str	r1, [sp, #100]	; 0x64
 800880a:	7852      	ldrb	r2, [r2, #1]
 800880c:	2a30      	cmp	r2, #48	; 0x30
 800880e:	d0f9      	beq.n	8008804 <_strtod_l+0x294>
 8008810:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008814:	2908      	cmp	r1, #8
 8008816:	f63f af7a 	bhi.w	800870e <_strtod_l+0x19e>
 800881a:	3a30      	subs	r2, #48	; 0x30
 800881c:	9209      	str	r2, [sp, #36]	; 0x24
 800881e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008820:	920c      	str	r2, [sp, #48]	; 0x30
 8008822:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008824:	1c57      	adds	r7, r2, #1
 8008826:	9719      	str	r7, [sp, #100]	; 0x64
 8008828:	7852      	ldrb	r2, [r2, #1]
 800882a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800882e:	f1be 0f09 	cmp.w	lr, #9
 8008832:	d938      	bls.n	80088a6 <_strtod_l+0x336>
 8008834:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008836:	1a7f      	subs	r7, r7, r1
 8008838:	2f08      	cmp	r7, #8
 800883a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800883e:	dc03      	bgt.n	8008848 <_strtod_l+0x2d8>
 8008840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008842:	428f      	cmp	r7, r1
 8008844:	bfa8      	it	ge
 8008846:	460f      	movge	r7, r1
 8008848:	f1bc 0f00 	cmp.w	ip, #0
 800884c:	d000      	beq.n	8008850 <_strtod_l+0x2e0>
 800884e:	427f      	negs	r7, r7
 8008850:	2e00      	cmp	r6, #0
 8008852:	d14f      	bne.n	80088f4 <_strtod_l+0x384>
 8008854:	9905      	ldr	r1, [sp, #20]
 8008856:	4301      	orrs	r1, r0
 8008858:	f47f aec3 	bne.w	80085e2 <_strtod_l+0x72>
 800885c:	2b00      	cmp	r3, #0
 800885e:	f47f aedb 	bne.w	8008618 <_strtod_l+0xa8>
 8008862:	2a69      	cmp	r2, #105	; 0x69
 8008864:	d029      	beq.n	80088ba <_strtod_l+0x34a>
 8008866:	dc26      	bgt.n	80088b6 <_strtod_l+0x346>
 8008868:	2a49      	cmp	r2, #73	; 0x49
 800886a:	d026      	beq.n	80088ba <_strtod_l+0x34a>
 800886c:	2a4e      	cmp	r2, #78	; 0x4e
 800886e:	f47f aed3 	bne.w	8008618 <_strtod_l+0xa8>
 8008872:	499a      	ldr	r1, [pc, #616]	; (8008adc <_strtod_l+0x56c>)
 8008874:	a819      	add	r0, sp, #100	; 0x64
 8008876:	f001 fa23 	bl	8009cc0 <__match>
 800887a:	2800      	cmp	r0, #0
 800887c:	f43f aecc 	beq.w	8008618 <_strtod_l+0xa8>
 8008880:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b28      	cmp	r3, #40	; 0x28
 8008886:	d12f      	bne.n	80088e8 <_strtod_l+0x378>
 8008888:	4995      	ldr	r1, [pc, #596]	; (8008ae0 <_strtod_l+0x570>)
 800888a:	aa1c      	add	r2, sp, #112	; 0x70
 800888c:	a819      	add	r0, sp, #100	; 0x64
 800888e:	f001 fa2b 	bl	8009ce8 <__hexnan>
 8008892:	2805      	cmp	r0, #5
 8008894:	d128      	bne.n	80088e8 <_strtod_l+0x378>
 8008896:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008898:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800889c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80088a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80088a4:	e69d      	b.n	80085e2 <_strtod_l+0x72>
 80088a6:	210a      	movs	r1, #10
 80088a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80088aa:	fb01 2107 	mla	r1, r1, r7, r2
 80088ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80088b2:	9209      	str	r2, [sp, #36]	; 0x24
 80088b4:	e7b5      	b.n	8008822 <_strtod_l+0x2b2>
 80088b6:	2a6e      	cmp	r2, #110	; 0x6e
 80088b8:	e7d9      	b.n	800886e <_strtod_l+0x2fe>
 80088ba:	498a      	ldr	r1, [pc, #552]	; (8008ae4 <_strtod_l+0x574>)
 80088bc:	a819      	add	r0, sp, #100	; 0x64
 80088be:	f001 f9ff 	bl	8009cc0 <__match>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f43f aea8 	beq.w	8008618 <_strtod_l+0xa8>
 80088c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088ca:	4987      	ldr	r1, [pc, #540]	; (8008ae8 <_strtod_l+0x578>)
 80088cc:	3b01      	subs	r3, #1
 80088ce:	a819      	add	r0, sp, #100	; 0x64
 80088d0:	9319      	str	r3, [sp, #100]	; 0x64
 80088d2:	f001 f9f5 	bl	8009cc0 <__match>
 80088d6:	b910      	cbnz	r0, 80088de <_strtod_l+0x36e>
 80088d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088da:	3301      	adds	r3, #1
 80088dc:	9319      	str	r3, [sp, #100]	; 0x64
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008aec <_strtod_l+0x57c>
 80088e6:	e67c      	b.n	80085e2 <_strtod_l+0x72>
 80088e8:	4881      	ldr	r0, [pc, #516]	; (8008af0 <_strtod_l+0x580>)
 80088ea:	f000 ff07 	bl	80096fc <nan>
 80088ee:	4680      	mov	r8, r0
 80088f0:	4689      	mov	r9, r1
 80088f2:	e676      	b.n	80085e2 <_strtod_l+0x72>
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	f1bb 0f00 	cmp.w	fp, #0
 80088fa:	bf08      	it	eq
 80088fc:	46b3      	moveq	fp, r6
 80088fe:	1afb      	subs	r3, r7, r3
 8008900:	2e10      	cmp	r6, #16
 8008902:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008904:	4635      	mov	r5, r6
 8008906:	9309      	str	r3, [sp, #36]	; 0x24
 8008908:	bfa8      	it	ge
 800890a:	2510      	movge	r5, #16
 800890c:	f7f7 fd74 	bl	80003f8 <__aeabi_ui2d>
 8008910:	2e09      	cmp	r6, #9
 8008912:	4680      	mov	r8, r0
 8008914:	4689      	mov	r9, r1
 8008916:	dd13      	ble.n	8008940 <_strtod_l+0x3d0>
 8008918:	4b76      	ldr	r3, [pc, #472]	; (8008af4 <_strtod_l+0x584>)
 800891a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800891e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008922:	f7f7 fde3 	bl	80004ec <__aeabi_dmul>
 8008926:	4680      	mov	r8, r0
 8008928:	4650      	mov	r0, sl
 800892a:	4689      	mov	r9, r1
 800892c:	f7f7 fd64 	bl	80003f8 <__aeabi_ui2d>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4640      	mov	r0, r8
 8008936:	4649      	mov	r1, r9
 8008938:	f7f7 fc22 	bl	8000180 <__adddf3>
 800893c:	4680      	mov	r8, r0
 800893e:	4689      	mov	r9, r1
 8008940:	2e0f      	cmp	r6, #15
 8008942:	dc36      	bgt.n	80089b2 <_strtod_l+0x442>
 8008944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	f43f ae4b 	beq.w	80085e2 <_strtod_l+0x72>
 800894c:	dd22      	ble.n	8008994 <_strtod_l+0x424>
 800894e:	2b16      	cmp	r3, #22
 8008950:	dc09      	bgt.n	8008966 <_strtod_l+0x3f6>
 8008952:	4968      	ldr	r1, [pc, #416]	; (8008af4 <_strtod_l+0x584>)
 8008954:	4642      	mov	r2, r8
 8008956:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800895a:	464b      	mov	r3, r9
 800895c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008960:	f7f7 fdc4 	bl	80004ec <__aeabi_dmul>
 8008964:	e7c3      	b.n	80088ee <_strtod_l+0x37e>
 8008966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008968:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800896c:	4293      	cmp	r3, r2
 800896e:	db20      	blt.n	80089b2 <_strtod_l+0x442>
 8008970:	4c60      	ldr	r4, [pc, #384]	; (8008af4 <_strtod_l+0x584>)
 8008972:	f1c6 060f 	rsb	r6, r6, #15
 8008976:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800897a:	4642      	mov	r2, r8
 800897c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008980:	464b      	mov	r3, r9
 8008982:	f7f7 fdb3 	bl	80004ec <__aeabi_dmul>
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	1b9e      	subs	r6, r3, r6
 800898a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800898e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008992:	e7e5      	b.n	8008960 <_strtod_l+0x3f0>
 8008994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008996:	3316      	adds	r3, #22
 8008998:	db0b      	blt.n	80089b2 <_strtod_l+0x442>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	4640      	mov	r0, r8
 800899e:	1bdf      	subs	r7, r3, r7
 80089a0:	4b54      	ldr	r3, [pc, #336]	; (8008af4 <_strtod_l+0x584>)
 80089a2:	4649      	mov	r1, r9
 80089a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80089a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ac:	f7f7 fec8 	bl	8000740 <__aeabi_ddiv>
 80089b0:	e79d      	b.n	80088ee <_strtod_l+0x37e>
 80089b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b4:	1b75      	subs	r5, r6, r5
 80089b6:	441d      	add	r5, r3
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	dd70      	ble.n	8008a9e <_strtod_l+0x52e>
 80089bc:	f015 030f 	ands.w	r3, r5, #15
 80089c0:	d00a      	beq.n	80089d8 <_strtod_l+0x468>
 80089c2:	494c      	ldr	r1, [pc, #304]	; (8008af4 <_strtod_l+0x584>)
 80089c4:	4642      	mov	r2, r8
 80089c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ce:	464b      	mov	r3, r9
 80089d0:	f7f7 fd8c 	bl	80004ec <__aeabi_dmul>
 80089d4:	4680      	mov	r8, r0
 80089d6:	4689      	mov	r9, r1
 80089d8:	f035 050f 	bics.w	r5, r5, #15
 80089dc:	d04d      	beq.n	8008a7a <_strtod_l+0x50a>
 80089de:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80089e2:	dd22      	ble.n	8008a2a <_strtod_l+0x4ba>
 80089e4:	2600      	movs	r6, #0
 80089e6:	46b3      	mov	fp, r6
 80089e8:	960b      	str	r6, [sp, #44]	; 0x2c
 80089ea:	9608      	str	r6, [sp, #32]
 80089ec:	2322      	movs	r3, #34	; 0x22
 80089ee:	f04f 0800 	mov.w	r8, #0
 80089f2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008aec <_strtod_l+0x57c>
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f43f adf1 	beq.w	80085e2 <_strtod_l+0x72>
 8008a00:	4620      	mov	r0, r4
 8008a02:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a04:	f7ff f934 	bl	8007c70 <_Bfree>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	9908      	ldr	r1, [sp, #32]
 8008a0c:	f7ff f930 	bl	8007c70 <_Bfree>
 8008a10:	4659      	mov	r1, fp
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7ff f92c 	bl	8007c70 <_Bfree>
 8008a18:	4620      	mov	r0, r4
 8008a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a1c:	f7ff f928 	bl	8007c70 <_Bfree>
 8008a20:	4631      	mov	r1, r6
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff f924 	bl	8007c70 <_Bfree>
 8008a28:	e5db      	b.n	80085e2 <_strtod_l+0x72>
 8008a2a:	4b33      	ldr	r3, [pc, #204]	; (8008af8 <_strtod_l+0x588>)
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	9305      	str	r3, [sp, #20]
 8008a30:	2300      	movs	r3, #0
 8008a32:	4649      	mov	r1, r9
 8008a34:	469a      	mov	sl, r3
 8008a36:	112d      	asrs	r5, r5, #4
 8008a38:	2d01      	cmp	r5, #1
 8008a3a:	dc21      	bgt.n	8008a80 <_strtod_l+0x510>
 8008a3c:	b10b      	cbz	r3, 8008a42 <_strtod_l+0x4d2>
 8008a3e:	4680      	mov	r8, r0
 8008a40:	4689      	mov	r9, r1
 8008a42:	492d      	ldr	r1, [pc, #180]	; (8008af8 <_strtod_l+0x588>)
 8008a44:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008a48:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a52:	464b      	mov	r3, r9
 8008a54:	f7f7 fd4a 	bl	80004ec <__aeabi_dmul>
 8008a58:	4b24      	ldr	r3, [pc, #144]	; (8008aec <_strtod_l+0x57c>)
 8008a5a:	460a      	mov	r2, r1
 8008a5c:	400b      	ands	r3, r1
 8008a5e:	4927      	ldr	r1, [pc, #156]	; (8008afc <_strtod_l+0x58c>)
 8008a60:	4680      	mov	r8, r0
 8008a62:	428b      	cmp	r3, r1
 8008a64:	d8be      	bhi.n	80089e4 <_strtod_l+0x474>
 8008a66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a6a:	428b      	cmp	r3, r1
 8008a6c:	bf86      	itte	hi
 8008a6e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008a72:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008b00 <_strtod_l+0x590>
 8008a76:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	e07b      	b.n	8008b78 <_strtod_l+0x608>
 8008a80:	07ea      	lsls	r2, r5, #31
 8008a82:	d505      	bpl.n	8008a90 <_strtod_l+0x520>
 8008a84:	9b05      	ldr	r3, [sp, #20]
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	f7f7 fd2f 	bl	80004ec <__aeabi_dmul>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	9a05      	ldr	r2, [sp, #20]
 8008a92:	f10a 0a01 	add.w	sl, sl, #1
 8008a96:	3208      	adds	r2, #8
 8008a98:	106d      	asrs	r5, r5, #1
 8008a9a:	9205      	str	r2, [sp, #20]
 8008a9c:	e7cc      	b.n	8008a38 <_strtod_l+0x4c8>
 8008a9e:	d0ec      	beq.n	8008a7a <_strtod_l+0x50a>
 8008aa0:	426d      	negs	r5, r5
 8008aa2:	f015 020f 	ands.w	r2, r5, #15
 8008aa6:	d00a      	beq.n	8008abe <_strtod_l+0x54e>
 8008aa8:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <_strtod_l+0x584>)
 8008aaa:	4640      	mov	r0, r8
 8008aac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fe43 	bl	8000740 <__aeabi_ddiv>
 8008aba:	4680      	mov	r8, r0
 8008abc:	4689      	mov	r9, r1
 8008abe:	112d      	asrs	r5, r5, #4
 8008ac0:	d0db      	beq.n	8008a7a <_strtod_l+0x50a>
 8008ac2:	2d1f      	cmp	r5, #31
 8008ac4:	dd1e      	ble.n	8008b04 <_strtod_l+0x594>
 8008ac6:	2600      	movs	r6, #0
 8008ac8:	46b3      	mov	fp, r6
 8008aca:	960b      	str	r6, [sp, #44]	; 0x2c
 8008acc:	9608      	str	r6, [sp, #32]
 8008ace:	2322      	movs	r3, #34	; 0x22
 8008ad0:	f04f 0800 	mov.w	r8, #0
 8008ad4:	f04f 0900 	mov.w	r9, #0
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	e78d      	b.n	80089f8 <_strtod_l+0x488>
 8008adc:	0800a513 	.word	0x0800a513
 8008ae0:	0800a73c 	.word	0x0800a73c
 8008ae4:	0800a50b 	.word	0x0800a50b
 8008ae8:	0800a542 	.word	0x0800a542
 8008aec:	7ff00000 	.word	0x7ff00000
 8008af0:	0800a8cd 	.word	0x0800a8cd
 8008af4:	0800a650 	.word	0x0800a650
 8008af8:	0800a628 	.word	0x0800a628
 8008afc:	7ca00000 	.word	0x7ca00000
 8008b00:	7fefffff 	.word	0x7fefffff
 8008b04:	f015 0310 	ands.w	r3, r5, #16
 8008b08:	bf18      	it	ne
 8008b0a:	236a      	movne	r3, #106	; 0x6a
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	9305      	str	r3, [sp, #20]
 8008b10:	4649      	mov	r1, r9
 8008b12:	2300      	movs	r3, #0
 8008b14:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008de0 <_strtod_l+0x870>
 8008b18:	07ea      	lsls	r2, r5, #31
 8008b1a:	d504      	bpl.n	8008b26 <_strtod_l+0x5b6>
 8008b1c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008b20:	f7f7 fce4 	bl	80004ec <__aeabi_dmul>
 8008b24:	2301      	movs	r3, #1
 8008b26:	106d      	asrs	r5, r5, #1
 8008b28:	f10a 0a08 	add.w	sl, sl, #8
 8008b2c:	d1f4      	bne.n	8008b18 <_strtod_l+0x5a8>
 8008b2e:	b10b      	cbz	r3, 8008b34 <_strtod_l+0x5c4>
 8008b30:	4680      	mov	r8, r0
 8008b32:	4689      	mov	r9, r1
 8008b34:	9b05      	ldr	r3, [sp, #20]
 8008b36:	b1bb      	cbz	r3, 8008b68 <_strtod_l+0x5f8>
 8008b38:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008b3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	4649      	mov	r1, r9
 8008b44:	dd10      	ble.n	8008b68 <_strtod_l+0x5f8>
 8008b46:	2b1f      	cmp	r3, #31
 8008b48:	f340 8128 	ble.w	8008d9c <_strtod_l+0x82c>
 8008b4c:	2b34      	cmp	r3, #52	; 0x34
 8008b4e:	bfd8      	it	le
 8008b50:	f04f 33ff 	movle.w	r3, #4294967295
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	bfcf      	iteee	gt
 8008b5a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008b5e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008b62:	4093      	lslle	r3, r2
 8008b64:	ea03 0901 	andle.w	r9, r3, r1
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 ff24 	bl	80009bc <__aeabi_dcmpeq>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d1a6      	bne.n	8008ac6 <_strtod_l+0x556>
 8008b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7a:	465a      	mov	r2, fp
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	4620      	mov	r0, r4
 8008b80:	4633      	mov	r3, r6
 8008b82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b84:	f7ff f8dc 	bl	8007d40 <__s2b>
 8008b88:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f43f af2a 	beq.w	80089e4 <_strtod_l+0x474>
 8008b90:	2600      	movs	r6, #0
 8008b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b94:	9b08      	ldr	r3, [sp, #32]
 8008b96:	2a00      	cmp	r2, #0
 8008b98:	eba3 0307 	sub.w	r3, r3, r7
 8008b9c:	bfa8      	it	ge
 8008b9e:	2300      	movge	r3, #0
 8008ba0:	46b3      	mov	fp, r6
 8008ba2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ba4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ba8:	9316      	str	r3, [sp, #88]	; 0x58
 8008baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bac:	4620      	mov	r0, r4
 8008bae:	6859      	ldr	r1, [r3, #4]
 8008bb0:	f7ff f81e 	bl	8007bf0 <_Balloc>
 8008bb4:	9008      	str	r0, [sp, #32]
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f af18 	beq.w	80089ec <_strtod_l+0x47c>
 8008bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbe:	300c      	adds	r0, #12
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	f103 010c 	add.w	r1, r3, #12
 8008bc6:	3202      	adds	r2, #2
 8008bc8:	0092      	lsls	r2, r2, #2
 8008bca:	f000 fd89 	bl	80096e0 <memcpy>
 8008bce:	ab1c      	add	r3, sp, #112	; 0x70
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	ab1b      	add	r3, sp, #108	; 0x6c
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	464b      	mov	r3, r9
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008be0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008be4:	f7ff fbd8 	bl	8008398 <__d2b>
 8008be8:	901a      	str	r0, [sp, #104]	; 0x68
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f43f aefe 	beq.w	80089ec <_strtod_l+0x47c>
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f7ff f93c 	bl	8007e70 <__i2b>
 8008bf8:	4683      	mov	fp, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f43f aef6 	beq.w	80089ec <_strtod_l+0x47c>
 8008c00:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008c02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c04:	2f00      	cmp	r7, #0
 8008c06:	bfab      	itete	ge
 8008c08:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008c0a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008c0c:	eb07 0a03 	addge.w	sl, r7, r3
 8008c10:	1bdd      	sublt	r5, r3, r7
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	bfa8      	it	ge
 8008c16:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008c18:	eba7 0703 	sub.w	r7, r7, r3
 8008c1c:	4417      	add	r7, r2
 8008c1e:	4b71      	ldr	r3, [pc, #452]	; (8008de4 <_strtod_l+0x874>)
 8008c20:	f107 37ff 	add.w	r7, r7, #4294967295
 8008c24:	bfb8      	it	lt
 8008c26:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008c2a:	429f      	cmp	r7, r3
 8008c2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c30:	f280 80c7 	bge.w	8008dc2 <_strtod_l+0x852>
 8008c34:	1bdb      	subs	r3, r3, r7
 8008c36:	2b1f      	cmp	r3, #31
 8008c38:	f04f 0101 	mov.w	r1, #1
 8008c3c:	eba2 0203 	sub.w	r2, r2, r3
 8008c40:	f300 80b3 	bgt.w	8008daa <_strtod_l+0x83a>
 8008c44:	fa01 f303 	lsl.w	r3, r1, r3
 8008c48:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9310      	str	r3, [sp, #64]	; 0x40
 8008c4e:	eb0a 0702 	add.w	r7, sl, r2
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	45ba      	cmp	sl, r7
 8008c56:	4415      	add	r5, r2
 8008c58:	441d      	add	r5, r3
 8008c5a:	4653      	mov	r3, sl
 8008c5c:	bfa8      	it	ge
 8008c5e:	463b      	movge	r3, r7
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	bfa8      	it	ge
 8008c64:	462b      	movge	r3, r5
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bfc2      	ittt	gt
 8008c6a:	1aff      	subgt	r7, r7, r3
 8008c6c:	1aed      	subgt	r5, r5, r3
 8008c6e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008c72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd17      	ble.n	8008ca8 <_strtod_l+0x738>
 8008c78:	4659      	mov	r1, fp
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7ff f9b5 	bl	8007fec <__pow5mult>
 8008c82:	4683      	mov	fp, r0
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f43f aeb1 	beq.w	80089ec <_strtod_l+0x47c>
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f7ff f904 	bl	8007e9c <__multiply>
 8008c94:	900a      	str	r0, [sp, #40]	; 0x28
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f43f aea8 	beq.w	80089ec <_strtod_l+0x47c>
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ca0:	f7fe ffe6 	bl	8007c70 <_Bfree>
 8008ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ca8:	2f00      	cmp	r7, #0
 8008caa:	f300 808f 	bgt.w	8008dcc <_strtod_l+0x85c>
 8008cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dd08      	ble.n	8008cc6 <_strtod_l+0x756>
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008cb8:	9908      	ldr	r1, [sp, #32]
 8008cba:	f7ff f997 	bl	8007fec <__pow5mult>
 8008cbe:	9008      	str	r0, [sp, #32]
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f43f ae93 	beq.w	80089ec <_strtod_l+0x47c>
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	dd08      	ble.n	8008cdc <_strtod_l+0x76c>
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4620      	mov	r0, r4
 8008cce:	9908      	ldr	r1, [sp, #32]
 8008cd0:	f7ff f9e6 	bl	80080a0 <__lshift>
 8008cd4:	9008      	str	r0, [sp, #32]
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	f43f ae88 	beq.w	80089ec <_strtod_l+0x47c>
 8008cdc:	f1ba 0f00 	cmp.w	sl, #0
 8008ce0:	dd08      	ble.n	8008cf4 <_strtod_l+0x784>
 8008ce2:	4659      	mov	r1, fp
 8008ce4:	4652      	mov	r2, sl
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7ff f9da 	bl	80080a0 <__lshift>
 8008cec:	4683      	mov	fp, r0
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f43f ae7c 	beq.w	80089ec <_strtod_l+0x47c>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	9a08      	ldr	r2, [sp, #32]
 8008cf8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008cfa:	f7ff fa59 	bl	80081b0 <__mdiff>
 8008cfe:	4606      	mov	r6, r0
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f43f ae73 	beq.w	80089ec <_strtod_l+0x47c>
 8008d06:	2500      	movs	r5, #0
 8008d08:	68c3      	ldr	r3, [r0, #12]
 8008d0a:	4659      	mov	r1, fp
 8008d0c:	60c5      	str	r5, [r0, #12]
 8008d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d10:	f7ff fa32 	bl	8008178 <__mcmp>
 8008d14:	42a8      	cmp	r0, r5
 8008d16:	da6b      	bge.n	8008df0 <_strtod_l+0x880>
 8008d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1a:	ea53 0308 	orrs.w	r3, r3, r8
 8008d1e:	f040 808f 	bne.w	8008e40 <_strtod_l+0x8d0>
 8008d22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f040 808a 	bne.w	8008e40 <_strtod_l+0x8d0>
 8008d2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d30:	0d1b      	lsrs	r3, r3, #20
 8008d32:	051b      	lsls	r3, r3, #20
 8008d34:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d38:	f240 8082 	bls.w	8008e40 <_strtod_l+0x8d0>
 8008d3c:	6973      	ldr	r3, [r6, #20]
 8008d3e:	b913      	cbnz	r3, 8008d46 <_strtod_l+0x7d6>
 8008d40:	6933      	ldr	r3, [r6, #16]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	dd7c      	ble.n	8008e40 <_strtod_l+0x8d0>
 8008d46:	4631      	mov	r1, r6
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7ff f9a8 	bl	80080a0 <__lshift>
 8008d50:	4659      	mov	r1, fp
 8008d52:	4606      	mov	r6, r0
 8008d54:	f7ff fa10 	bl	8008178 <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dd71      	ble.n	8008e40 <_strtod_l+0x8d0>
 8008d5c:	9905      	ldr	r1, [sp, #20]
 8008d5e:	464b      	mov	r3, r9
 8008d60:	4a21      	ldr	r2, [pc, #132]	; (8008de8 <_strtod_l+0x878>)
 8008d62:	2900      	cmp	r1, #0
 8008d64:	f000 808d 	beq.w	8008e82 <_strtod_l+0x912>
 8008d68:	ea02 0109 	and.w	r1, r2, r9
 8008d6c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d70:	f300 8087 	bgt.w	8008e82 <_strtod_l+0x912>
 8008d74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d78:	f77f aea9 	ble.w	8008ace <_strtod_l+0x55e>
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <_strtod_l+0x87c>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	f7f7 fbb2 	bl	80004ec <__aeabi_dmul>
 8008d88:	4b17      	ldr	r3, [pc, #92]	; (8008de8 <_strtod_l+0x878>)
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	400b      	ands	r3, r1
 8008d8e:	4689      	mov	r9, r1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f47f ae35 	bne.w	8008a00 <_strtod_l+0x490>
 8008d96:	2322      	movs	r3, #34	; 0x22
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	e631      	b.n	8008a00 <_strtod_l+0x490>
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	ea03 0808 	and.w	r8, r3, r8
 8008da8:	e6de      	b.n	8008b68 <_strtod_l+0x5f8>
 8008daa:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008dae:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008db2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008db6:	37e2      	adds	r7, #226	; 0xe2
 8008db8:	fa01 f307 	lsl.w	r3, r1, r7
 8008dbc:	9310      	str	r3, [sp, #64]	; 0x40
 8008dbe:	9113      	str	r1, [sp, #76]	; 0x4c
 8008dc0:	e745      	b.n	8008c4e <_strtod_l+0x6de>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9310      	str	r3, [sp, #64]	; 0x40
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008dca:	e740      	b.n	8008c4e <_strtod_l+0x6de>
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4620      	mov	r0, r4
 8008dd0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008dd2:	f7ff f965 	bl	80080a0 <__lshift>
 8008dd6:	901a      	str	r0, [sp, #104]	; 0x68
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f47f af68 	bne.w	8008cae <_strtod_l+0x73e>
 8008dde:	e605      	b.n	80089ec <_strtod_l+0x47c>
 8008de0:	0800a750 	.word	0x0800a750
 8008de4:	fffffc02 	.word	0xfffffc02
 8008de8:	7ff00000 	.word	0x7ff00000
 8008dec:	39500000 	.word	0x39500000
 8008df0:	46ca      	mov	sl, r9
 8008df2:	d165      	bne.n	8008ec0 <_strtod_l+0x950>
 8008df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dfa:	b352      	cbz	r2, 8008e52 <_strtod_l+0x8e2>
 8008dfc:	4a9e      	ldr	r2, [pc, #632]	; (8009078 <_strtod_l+0xb08>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d12a      	bne.n	8008e58 <_strtod_l+0x8e8>
 8008e02:	9b05      	ldr	r3, [sp, #20]
 8008e04:	4641      	mov	r1, r8
 8008e06:	b1fb      	cbz	r3, 8008e48 <_strtod_l+0x8d8>
 8008e08:	4b9c      	ldr	r3, [pc, #624]	; (800907c <_strtod_l+0xb0c>)
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	ea09 0303 	and.w	r3, r9, r3
 8008e12:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e16:	d81a      	bhi.n	8008e4e <_strtod_l+0x8de>
 8008e18:	0d1b      	lsrs	r3, r3, #20
 8008e1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e22:	4299      	cmp	r1, r3
 8008e24:	d118      	bne.n	8008e58 <_strtod_l+0x8e8>
 8008e26:	4b96      	ldr	r3, [pc, #600]	; (8009080 <_strtod_l+0xb10>)
 8008e28:	459a      	cmp	sl, r3
 8008e2a:	d102      	bne.n	8008e32 <_strtod_l+0x8c2>
 8008e2c:	3101      	adds	r1, #1
 8008e2e:	f43f addd 	beq.w	80089ec <_strtod_l+0x47c>
 8008e32:	f04f 0800 	mov.w	r8, #0
 8008e36:	4b91      	ldr	r3, [pc, #580]	; (800907c <_strtod_l+0xb0c>)
 8008e38:	ea0a 0303 	and.w	r3, sl, r3
 8008e3c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008e40:	9b05      	ldr	r3, [sp, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d19a      	bne.n	8008d7c <_strtod_l+0x80c>
 8008e46:	e5db      	b.n	8008a00 <_strtod_l+0x490>
 8008e48:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4c:	e7e9      	b.n	8008e22 <_strtod_l+0x8b2>
 8008e4e:	4613      	mov	r3, r2
 8008e50:	e7e7      	b.n	8008e22 <_strtod_l+0x8b2>
 8008e52:	ea53 0308 	orrs.w	r3, r3, r8
 8008e56:	d081      	beq.n	8008d5c <_strtod_l+0x7ec>
 8008e58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e5a:	b1e3      	cbz	r3, 8008e96 <_strtod_l+0x926>
 8008e5c:	ea13 0f0a 	tst.w	r3, sl
 8008e60:	d0ee      	beq.n	8008e40 <_strtod_l+0x8d0>
 8008e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e64:	4640      	mov	r0, r8
 8008e66:	4649      	mov	r1, r9
 8008e68:	9a05      	ldr	r2, [sp, #20]
 8008e6a:	b1c3      	cbz	r3, 8008e9e <_strtod_l+0x92e>
 8008e6c:	f7ff fb5c 	bl	8008528 <sulp>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e78:	f7f7 f982 	bl	8000180 <__adddf3>
 8008e7c:	4680      	mov	r8, r0
 8008e7e:	4689      	mov	r9, r1
 8008e80:	e7de      	b.n	8008e40 <_strtod_l+0x8d0>
 8008e82:	4013      	ands	r3, r2
 8008e84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008e8c:	f04f 38ff 	mov.w	r8, #4294967295
 8008e90:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008e94:	e7d4      	b.n	8008e40 <_strtod_l+0x8d0>
 8008e96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e98:	ea13 0f08 	tst.w	r3, r8
 8008e9c:	e7e0      	b.n	8008e60 <_strtod_l+0x8f0>
 8008e9e:	f7ff fb43 	bl	8008528 <sulp>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ea8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008eaa:	f7f7 f967 	bl	800017c <__aeabi_dsub>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	4689      	mov	r9, r1
 8008eb6:	f7f7 fd81 	bl	80009bc <__aeabi_dcmpeq>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d0c0      	beq.n	8008e40 <_strtod_l+0x8d0>
 8008ebe:	e606      	b.n	8008ace <_strtod_l+0x55e>
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7ff fabe 	bl	8008444 <__ratio>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ed6:	f7f7 fd85 	bl	80009e4 <__aeabi_dcmple>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d06f      	beq.n	8008fbe <_strtod_l+0xa4e>
 8008ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d17c      	bne.n	8008fde <_strtod_l+0xa6e>
 8008ee4:	f1b8 0f00 	cmp.w	r8, #0
 8008ee8:	d159      	bne.n	8008f9e <_strtod_l+0xa2e>
 8008eea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d17b      	bne.n	8008fea <_strtod_l+0xa7a>
 8008ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4b62      	ldr	r3, [pc, #392]	; (8009084 <_strtod_l+0xb14>)
 8008efa:	f7f7 fd69 	bl	80009d0 <__aeabi_dcmplt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d15a      	bne.n	8008fb8 <_strtod_l+0xa48>
 8008f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b5f      	ldr	r3, [pc, #380]	; (8009088 <_strtod_l+0xb18>)
 8008f0a:	f7f7 faef 	bl	80004ec <__aeabi_dmul>
 8008f0e:	4605      	mov	r5, r0
 8008f10:	460f      	mov	r7, r1
 8008f12:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008f16:	9506      	str	r5, [sp, #24]
 8008f18:	9307      	str	r3, [sp, #28]
 8008f1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f1e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008f22:	4b56      	ldr	r3, [pc, #344]	; (800907c <_strtod_l+0xb0c>)
 8008f24:	4a55      	ldr	r2, [pc, #340]	; (800907c <_strtod_l+0xb0c>)
 8008f26:	ea0a 0303 	and.w	r3, sl, r3
 8008f2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f2c:	4b57      	ldr	r3, [pc, #348]	; (800908c <_strtod_l+0xb1c>)
 8008f2e:	ea0a 0202 	and.w	r2, sl, r2
 8008f32:	429a      	cmp	r2, r3
 8008f34:	f040 80b0 	bne.w	8009098 <_strtod_l+0xb28>
 8008f38:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4649      	mov	r1, r9
 8008f40:	f7ff f9c2 	bl	80082c8 <__ulp>
 8008f44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f48:	f7f7 fad0 	bl	80004ec <__aeabi_dmul>
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	464b      	mov	r3, r9
 8008f50:	f7f7 f916 	bl	8000180 <__adddf3>
 8008f54:	f8df a124 	ldr.w	sl, [pc, #292]	; 800907c <_strtod_l+0xb0c>
 8008f58:	4a4d      	ldr	r2, [pc, #308]	; (8009090 <_strtod_l+0xb20>)
 8008f5a:	ea01 0a0a 	and.w	sl, r1, sl
 8008f5e:	4592      	cmp	sl, r2
 8008f60:	4680      	mov	r8, r0
 8008f62:	d948      	bls.n	8008ff6 <_strtod_l+0xa86>
 8008f64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f66:	4b46      	ldr	r3, [pc, #280]	; (8009080 <_strtod_l+0xb10>)
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d103      	bne.n	8008f74 <_strtod_l+0xa04>
 8008f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f6e:	3301      	adds	r3, #1
 8008f70:	f43f ad3c 	beq.w	80089ec <_strtod_l+0x47c>
 8008f74:	f04f 38ff 	mov.w	r8, #4294967295
 8008f78:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009080 <_strtod_l+0xb10>
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008f80:	f7fe fe76 	bl	8007c70 <_Bfree>
 8008f84:	4620      	mov	r0, r4
 8008f86:	9908      	ldr	r1, [sp, #32]
 8008f88:	f7fe fe72 	bl	8007c70 <_Bfree>
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7fe fe6e 	bl	8007c70 <_Bfree>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7fe fe6a 	bl	8007c70 <_Bfree>
 8008f9c:	e605      	b.n	8008baa <_strtod_l+0x63a>
 8008f9e:	f1b8 0f01 	cmp.w	r8, #1
 8008fa2:	d103      	bne.n	8008fac <_strtod_l+0xa3c>
 8008fa4:	f1b9 0f00 	cmp.w	r9, #0
 8008fa8:	f43f ad91 	beq.w	8008ace <_strtod_l+0x55e>
 8008fac:	2200      	movs	r2, #0
 8008fae:	4b39      	ldr	r3, [pc, #228]	; (8009094 <_strtod_l+0xb24>)
 8008fb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008fb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fb6:	e016      	b.n	8008fe6 <_strtod_l+0xa76>
 8008fb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008fba:	4f33      	ldr	r7, [pc, #204]	; (8009088 <_strtod_l+0xb18>)
 8008fbc:	e7a9      	b.n	8008f12 <_strtod_l+0x9a2>
 8008fbe:	4b32      	ldr	r3, [pc, #200]	; (8009088 <_strtod_l+0xb18>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fc6:	f7f7 fa91 	bl	80004ec <__aeabi_dmul>
 8008fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460f      	mov	r7, r1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d09e      	beq.n	8008f12 <_strtod_l+0x9a2>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fdc:	e79d      	b.n	8008f1a <_strtod_l+0x9aa>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4b28      	ldr	r3, [pc, #160]	; (8009084 <_strtod_l+0xb14>)
 8008fe2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fe6:	4f27      	ldr	r7, [pc, #156]	; (8009084 <_strtod_l+0xb14>)
 8008fe8:	e797      	b.n	8008f1a <_strtod_l+0x9aa>
 8008fea:	2200      	movs	r2, #0
 8008fec:	4b29      	ldr	r3, [pc, #164]	; (8009094 <_strtod_l+0xb24>)
 8008fee:	4645      	mov	r5, r8
 8008ff0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ff4:	e7f7      	b.n	8008fe6 <_strtod_l+0xa76>
 8008ff6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	46ca      	mov	sl, r9
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1bc      	bne.n	8008f7c <_strtod_l+0xa0c>
 8009002:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009006:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009008:	0d1b      	lsrs	r3, r3, #20
 800900a:	051b      	lsls	r3, r3, #20
 800900c:	429a      	cmp	r2, r3
 800900e:	d1b5      	bne.n	8008f7c <_strtod_l+0xa0c>
 8009010:	4628      	mov	r0, r5
 8009012:	4639      	mov	r1, r7
 8009014:	f7f8 f8a6 	bl	8001164 <__aeabi_d2lz>
 8009018:	f7f7 fa3a 	bl	8000490 <__aeabi_l2d>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4628      	mov	r0, r5
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 f8aa 	bl	800017c <__aeabi_dsub>
 8009028:	460b      	mov	r3, r1
 800902a:	4602      	mov	r2, r0
 800902c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009030:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009036:	ea4a 0a08 	orr.w	sl, sl, r8
 800903a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800903e:	d06c      	beq.n	800911a <_strtod_l+0xbaa>
 8009040:	a309      	add	r3, pc, #36	; (adr r3, 8009068 <_strtod_l+0xaf8>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 fcc3 	bl	80009d0 <__aeabi_dcmplt>
 800904a:	2800      	cmp	r0, #0
 800904c:	f47f acd8 	bne.w	8008a00 <_strtod_l+0x490>
 8009050:	a307      	add	r3, pc, #28	; (adr r3, 8009070 <_strtod_l+0xb00>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800905a:	f7f7 fcd7 	bl	8000a0c <__aeabi_dcmpgt>
 800905e:	2800      	cmp	r0, #0
 8009060:	d08c      	beq.n	8008f7c <_strtod_l+0xa0c>
 8009062:	e4cd      	b.n	8008a00 <_strtod_l+0x490>
 8009064:	f3af 8000 	nop.w
 8009068:	94a03595 	.word	0x94a03595
 800906c:	3fdfffff 	.word	0x3fdfffff
 8009070:	35afe535 	.word	0x35afe535
 8009074:	3fe00000 	.word	0x3fe00000
 8009078:	000fffff 	.word	0x000fffff
 800907c:	7ff00000 	.word	0x7ff00000
 8009080:	7fefffff 	.word	0x7fefffff
 8009084:	3ff00000 	.word	0x3ff00000
 8009088:	3fe00000 	.word	0x3fe00000
 800908c:	7fe00000 	.word	0x7fe00000
 8009090:	7c9fffff 	.word	0x7c9fffff
 8009094:	bff00000 	.word	0xbff00000
 8009098:	9b05      	ldr	r3, [sp, #20]
 800909a:	b333      	cbz	r3, 80090ea <_strtod_l+0xb7a>
 800909c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800909e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80090a2:	d822      	bhi.n	80090ea <_strtod_l+0xb7a>
 80090a4:	a328      	add	r3, pc, #160	; (adr r3, 8009148 <_strtod_l+0xbd8>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	4628      	mov	r0, r5
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fc99 	bl	80009e4 <__aeabi_dcmple>
 80090b2:	b1a0      	cbz	r0, 80090de <_strtod_l+0xb6e>
 80090b4:	4639      	mov	r1, r7
 80090b6:	4628      	mov	r0, r5
 80090b8:	f7f7 fcf0 	bl	8000a9c <__aeabi_d2uiz>
 80090bc:	2801      	cmp	r0, #1
 80090be:	bf38      	it	cc
 80090c0:	2001      	movcc	r0, #1
 80090c2:	f7f7 f999 	bl	80003f8 <__aeabi_ui2d>
 80090c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c8:	4605      	mov	r5, r0
 80090ca:	460f      	mov	r7, r1
 80090cc:	bb03      	cbnz	r3, 8009110 <_strtod_l+0xba0>
 80090ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090d2:	9014      	str	r0, [sp, #80]	; 0x50
 80090d4:	9315      	str	r3, [sp, #84]	; 0x54
 80090d6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80090da:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80090de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090e2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80090e6:	1a9b      	subs	r3, r3, r2
 80090e8:	9311      	str	r3, [sp, #68]	; 0x44
 80090ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80090ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090ee:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80090f2:	f7ff f8e9 	bl	80082c8 <__ulp>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4640      	mov	r0, r8
 80090fc:	4649      	mov	r1, r9
 80090fe:	f7f7 f9f5 	bl	80004ec <__aeabi_dmul>
 8009102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009106:	f7f7 f83b 	bl	8000180 <__adddf3>
 800910a:	4680      	mov	r8, r0
 800910c:	4689      	mov	r9, r1
 800910e:	e774      	b.n	8008ffa <_strtod_l+0xa8a>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009118:	e7dd      	b.n	80090d6 <_strtod_l+0xb66>
 800911a:	a30d      	add	r3, pc, #52	; (adr r3, 8009150 <_strtod_l+0xbe0>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 fc56 	bl	80009d0 <__aeabi_dcmplt>
 8009124:	e79b      	b.n	800905e <_strtod_l+0xaee>
 8009126:	2300      	movs	r3, #0
 8009128:	930e      	str	r3, [sp, #56]	; 0x38
 800912a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800912c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	f7ff ba5b 	b.w	80085ea <_strtod_l+0x7a>
 8009134:	2a65      	cmp	r2, #101	; 0x65
 8009136:	f43f ab52 	beq.w	80087de <_strtod_l+0x26e>
 800913a:	2a45      	cmp	r2, #69	; 0x45
 800913c:	f43f ab4f 	beq.w	80087de <_strtod_l+0x26e>
 8009140:	2301      	movs	r3, #1
 8009142:	f7ff bb87 	b.w	8008854 <_strtod_l+0x2e4>
 8009146:	bf00      	nop
 8009148:	ffc00000 	.word	0xffc00000
 800914c:	41dfffff 	.word	0x41dfffff
 8009150:	94a03595 	.word	0x94a03595
 8009154:	3fcfffff 	.word	0x3fcfffff

08009158 <_strtod_r>:
 8009158:	4b01      	ldr	r3, [pc, #4]	; (8009160 <_strtod_r+0x8>)
 800915a:	f7ff ba09 	b.w	8008570 <_strtod_l>
 800915e:	bf00      	nop
 8009160:	20000068 	.word	0x20000068

08009164 <_strtol_l.constprop.0>:
 8009164:	2b01      	cmp	r3, #1
 8009166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916a:	4686      	mov	lr, r0
 800916c:	4690      	mov	r8, r2
 800916e:	d001      	beq.n	8009174 <_strtol_l.constprop.0+0x10>
 8009170:	2b24      	cmp	r3, #36	; 0x24
 8009172:	d906      	bls.n	8009182 <_strtol_l.constprop.0+0x1e>
 8009174:	f7fd fd90 	bl	8006c98 <__errno>
 8009178:	2316      	movs	r3, #22
 800917a:	6003      	str	r3, [r0, #0]
 800917c:	2000      	movs	r0, #0
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	460d      	mov	r5, r1
 8009184:	4835      	ldr	r0, [pc, #212]	; (800925c <_strtol_l.constprop.0+0xf8>)
 8009186:	462a      	mov	r2, r5
 8009188:	f815 4b01 	ldrb.w	r4, [r5], #1
 800918c:	5d06      	ldrb	r6, [r0, r4]
 800918e:	f016 0608 	ands.w	r6, r6, #8
 8009192:	d1f8      	bne.n	8009186 <_strtol_l.constprop.0+0x22>
 8009194:	2c2d      	cmp	r4, #45	; 0x2d
 8009196:	d12e      	bne.n	80091f6 <_strtol_l.constprop.0+0x92>
 8009198:	2601      	movs	r6, #1
 800919a:	782c      	ldrb	r4, [r5, #0]
 800919c:	1c95      	adds	r5, r2, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d057      	beq.n	8009252 <_strtol_l.constprop.0+0xee>
 80091a2:	2b10      	cmp	r3, #16
 80091a4:	d109      	bne.n	80091ba <_strtol_l.constprop.0+0x56>
 80091a6:	2c30      	cmp	r4, #48	; 0x30
 80091a8:	d107      	bne.n	80091ba <_strtol_l.constprop.0+0x56>
 80091aa:	782a      	ldrb	r2, [r5, #0]
 80091ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80091b0:	2a58      	cmp	r2, #88	; 0x58
 80091b2:	d149      	bne.n	8009248 <_strtol_l.constprop.0+0xe4>
 80091b4:	2310      	movs	r3, #16
 80091b6:	786c      	ldrb	r4, [r5, #1]
 80091b8:	3502      	adds	r5, #2
 80091ba:	2200      	movs	r2, #0
 80091bc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80091c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091c4:	fbbc f9f3 	udiv	r9, ip, r3
 80091c8:	4610      	mov	r0, r2
 80091ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80091ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091d2:	2f09      	cmp	r7, #9
 80091d4:	d814      	bhi.n	8009200 <_strtol_l.constprop.0+0x9c>
 80091d6:	463c      	mov	r4, r7
 80091d8:	42a3      	cmp	r3, r4
 80091da:	dd20      	ble.n	800921e <_strtol_l.constprop.0+0xba>
 80091dc:	1c57      	adds	r7, r2, #1
 80091de:	d007      	beq.n	80091f0 <_strtol_l.constprop.0+0x8c>
 80091e0:	4581      	cmp	r9, r0
 80091e2:	d319      	bcc.n	8009218 <_strtol_l.constprop.0+0xb4>
 80091e4:	d101      	bne.n	80091ea <_strtol_l.constprop.0+0x86>
 80091e6:	45a2      	cmp	sl, r4
 80091e8:	db16      	blt.n	8009218 <_strtol_l.constprop.0+0xb4>
 80091ea:	2201      	movs	r2, #1
 80091ec:	fb00 4003 	mla	r0, r0, r3, r4
 80091f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091f4:	e7eb      	b.n	80091ce <_strtol_l.constprop.0+0x6a>
 80091f6:	2c2b      	cmp	r4, #43	; 0x2b
 80091f8:	bf04      	itt	eq
 80091fa:	782c      	ldrbeq	r4, [r5, #0]
 80091fc:	1c95      	addeq	r5, r2, #2
 80091fe:	e7ce      	b.n	800919e <_strtol_l.constprop.0+0x3a>
 8009200:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009204:	2f19      	cmp	r7, #25
 8009206:	d801      	bhi.n	800920c <_strtol_l.constprop.0+0xa8>
 8009208:	3c37      	subs	r4, #55	; 0x37
 800920a:	e7e5      	b.n	80091d8 <_strtol_l.constprop.0+0x74>
 800920c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009210:	2f19      	cmp	r7, #25
 8009212:	d804      	bhi.n	800921e <_strtol_l.constprop.0+0xba>
 8009214:	3c57      	subs	r4, #87	; 0x57
 8009216:	e7df      	b.n	80091d8 <_strtol_l.constprop.0+0x74>
 8009218:	f04f 32ff 	mov.w	r2, #4294967295
 800921c:	e7e8      	b.n	80091f0 <_strtol_l.constprop.0+0x8c>
 800921e:	1c53      	adds	r3, r2, #1
 8009220:	d108      	bne.n	8009234 <_strtol_l.constprop.0+0xd0>
 8009222:	2322      	movs	r3, #34	; 0x22
 8009224:	4660      	mov	r0, ip
 8009226:	f8ce 3000 	str.w	r3, [lr]
 800922a:	f1b8 0f00 	cmp.w	r8, #0
 800922e:	d0a6      	beq.n	800917e <_strtol_l.constprop.0+0x1a>
 8009230:	1e69      	subs	r1, r5, #1
 8009232:	e006      	b.n	8009242 <_strtol_l.constprop.0+0xde>
 8009234:	b106      	cbz	r6, 8009238 <_strtol_l.constprop.0+0xd4>
 8009236:	4240      	negs	r0, r0
 8009238:	f1b8 0f00 	cmp.w	r8, #0
 800923c:	d09f      	beq.n	800917e <_strtol_l.constprop.0+0x1a>
 800923e:	2a00      	cmp	r2, #0
 8009240:	d1f6      	bne.n	8009230 <_strtol_l.constprop.0+0xcc>
 8009242:	f8c8 1000 	str.w	r1, [r8]
 8009246:	e79a      	b.n	800917e <_strtol_l.constprop.0+0x1a>
 8009248:	2430      	movs	r4, #48	; 0x30
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1b5      	bne.n	80091ba <_strtol_l.constprop.0+0x56>
 800924e:	2308      	movs	r3, #8
 8009250:	e7b3      	b.n	80091ba <_strtol_l.constprop.0+0x56>
 8009252:	2c30      	cmp	r4, #48	; 0x30
 8009254:	d0a9      	beq.n	80091aa <_strtol_l.constprop.0+0x46>
 8009256:	230a      	movs	r3, #10
 8009258:	e7af      	b.n	80091ba <_strtol_l.constprop.0+0x56>
 800925a:	bf00      	nop
 800925c:	0800a779 	.word	0x0800a779

08009260 <_strtol_r>:
 8009260:	f7ff bf80 	b.w	8009164 <_strtol_l.constprop.0>

08009264 <__ssputs_r>:
 8009264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	461f      	mov	r7, r3
 800926a:	688e      	ldr	r6, [r1, #8]
 800926c:	4682      	mov	sl, r0
 800926e:	42be      	cmp	r6, r7
 8009270:	460c      	mov	r4, r1
 8009272:	4690      	mov	r8, r2
 8009274:	680b      	ldr	r3, [r1, #0]
 8009276:	d82c      	bhi.n	80092d2 <__ssputs_r+0x6e>
 8009278:	898a      	ldrh	r2, [r1, #12]
 800927a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800927e:	d026      	beq.n	80092ce <__ssputs_r+0x6a>
 8009280:	6965      	ldr	r5, [r4, #20]
 8009282:	6909      	ldr	r1, [r1, #16]
 8009284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009288:	eba3 0901 	sub.w	r9, r3, r1
 800928c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009290:	1c7b      	adds	r3, r7, #1
 8009292:	444b      	add	r3, r9
 8009294:	106d      	asrs	r5, r5, #1
 8009296:	429d      	cmp	r5, r3
 8009298:	bf38      	it	cc
 800929a:	461d      	movcc	r5, r3
 800929c:	0553      	lsls	r3, r2, #21
 800929e:	d527      	bpl.n	80092f0 <__ssputs_r+0x8c>
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7fe fc19 	bl	8007ad8 <_malloc_r>
 80092a6:	4606      	mov	r6, r0
 80092a8:	b360      	cbz	r0, 8009304 <__ssputs_r+0xa0>
 80092aa:	464a      	mov	r2, r9
 80092ac:	6921      	ldr	r1, [r4, #16]
 80092ae:	f000 fa17 	bl	80096e0 <memcpy>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092bc:	81a3      	strh	r3, [r4, #12]
 80092be:	6126      	str	r6, [r4, #16]
 80092c0:	444e      	add	r6, r9
 80092c2:	6026      	str	r6, [r4, #0]
 80092c4:	463e      	mov	r6, r7
 80092c6:	6165      	str	r5, [r4, #20]
 80092c8:	eba5 0509 	sub.w	r5, r5, r9
 80092cc:	60a5      	str	r5, [r4, #8]
 80092ce:	42be      	cmp	r6, r7
 80092d0:	d900      	bls.n	80092d4 <__ssputs_r+0x70>
 80092d2:	463e      	mov	r6, r7
 80092d4:	4632      	mov	r2, r6
 80092d6:	4641      	mov	r1, r8
 80092d8:	6820      	ldr	r0, [r4, #0]
 80092da:	f000 f9c5 	bl	8009668 <memmove>
 80092de:	2000      	movs	r0, #0
 80092e0:	68a3      	ldr	r3, [r4, #8]
 80092e2:	1b9b      	subs	r3, r3, r6
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	4433      	add	r3, r6
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f0:	462a      	mov	r2, r5
 80092f2:	f000 fda6 	bl	8009e42 <_realloc_r>
 80092f6:	4606      	mov	r6, r0
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d1e0      	bne.n	80092be <__ssputs_r+0x5a>
 80092fc:	4650      	mov	r0, sl
 80092fe:	6921      	ldr	r1, [r4, #16]
 8009300:	f7fe fb7a 	bl	80079f8 <_free_r>
 8009304:	230c      	movs	r3, #12
 8009306:	f8ca 3000 	str.w	r3, [sl]
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	e7e9      	b.n	80092ec <__ssputs_r+0x88>

08009318 <_svfiprintf_r>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	4698      	mov	r8, r3
 800931e:	898b      	ldrh	r3, [r1, #12]
 8009320:	4607      	mov	r7, r0
 8009322:	061b      	lsls	r3, r3, #24
 8009324:	460d      	mov	r5, r1
 8009326:	4614      	mov	r4, r2
 8009328:	b09d      	sub	sp, #116	; 0x74
 800932a:	d50e      	bpl.n	800934a <_svfiprintf_r+0x32>
 800932c:	690b      	ldr	r3, [r1, #16]
 800932e:	b963      	cbnz	r3, 800934a <_svfiprintf_r+0x32>
 8009330:	2140      	movs	r1, #64	; 0x40
 8009332:	f7fe fbd1 	bl	8007ad8 <_malloc_r>
 8009336:	6028      	str	r0, [r5, #0]
 8009338:	6128      	str	r0, [r5, #16]
 800933a:	b920      	cbnz	r0, 8009346 <_svfiprintf_r+0x2e>
 800933c:	230c      	movs	r3, #12
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	e0d0      	b.n	80094e8 <_svfiprintf_r+0x1d0>
 8009346:	2340      	movs	r3, #64	; 0x40
 8009348:	616b      	str	r3, [r5, #20]
 800934a:	2300      	movs	r3, #0
 800934c:	9309      	str	r3, [sp, #36]	; 0x24
 800934e:	2320      	movs	r3, #32
 8009350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009354:	2330      	movs	r3, #48	; 0x30
 8009356:	f04f 0901 	mov.w	r9, #1
 800935a:	f8cd 800c 	str.w	r8, [sp, #12]
 800935e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009500 <_svfiprintf_r+0x1e8>
 8009362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009366:	4623      	mov	r3, r4
 8009368:	469a      	mov	sl, r3
 800936a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800936e:	b10a      	cbz	r2, 8009374 <_svfiprintf_r+0x5c>
 8009370:	2a25      	cmp	r2, #37	; 0x25
 8009372:	d1f9      	bne.n	8009368 <_svfiprintf_r+0x50>
 8009374:	ebba 0b04 	subs.w	fp, sl, r4
 8009378:	d00b      	beq.n	8009392 <_svfiprintf_r+0x7a>
 800937a:	465b      	mov	r3, fp
 800937c:	4622      	mov	r2, r4
 800937e:	4629      	mov	r1, r5
 8009380:	4638      	mov	r0, r7
 8009382:	f7ff ff6f 	bl	8009264 <__ssputs_r>
 8009386:	3001      	adds	r0, #1
 8009388:	f000 80a9 	beq.w	80094de <_svfiprintf_r+0x1c6>
 800938c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800938e:	445a      	add	r2, fp
 8009390:	9209      	str	r2, [sp, #36]	; 0x24
 8009392:	f89a 3000 	ldrb.w	r3, [sl]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80a1 	beq.w	80094de <_svfiprintf_r+0x1c6>
 800939c:	2300      	movs	r3, #0
 800939e:	f04f 32ff 	mov.w	r2, #4294967295
 80093a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093a6:	f10a 0a01 	add.w	sl, sl, #1
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	9307      	str	r3, [sp, #28]
 80093ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093b2:	931a      	str	r3, [sp, #104]	; 0x68
 80093b4:	4654      	mov	r4, sl
 80093b6:	2205      	movs	r2, #5
 80093b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093bc:	4850      	ldr	r0, [pc, #320]	; (8009500 <_svfiprintf_r+0x1e8>)
 80093be:	f7fd fc98 	bl	8006cf2 <memchr>
 80093c2:	9a04      	ldr	r2, [sp, #16]
 80093c4:	b9d8      	cbnz	r0, 80093fe <_svfiprintf_r+0xe6>
 80093c6:	06d0      	lsls	r0, r2, #27
 80093c8:	bf44      	itt	mi
 80093ca:	2320      	movmi	r3, #32
 80093cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d0:	0711      	lsls	r1, r2, #28
 80093d2:	bf44      	itt	mi
 80093d4:	232b      	movmi	r3, #43	; 0x2b
 80093d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093da:	f89a 3000 	ldrb.w	r3, [sl]
 80093de:	2b2a      	cmp	r3, #42	; 0x2a
 80093e0:	d015      	beq.n	800940e <_svfiprintf_r+0xf6>
 80093e2:	4654      	mov	r4, sl
 80093e4:	2000      	movs	r0, #0
 80093e6:	f04f 0c0a 	mov.w	ip, #10
 80093ea:	9a07      	ldr	r2, [sp, #28]
 80093ec:	4621      	mov	r1, r4
 80093ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f2:	3b30      	subs	r3, #48	; 0x30
 80093f4:	2b09      	cmp	r3, #9
 80093f6:	d94d      	bls.n	8009494 <_svfiprintf_r+0x17c>
 80093f8:	b1b0      	cbz	r0, 8009428 <_svfiprintf_r+0x110>
 80093fa:	9207      	str	r2, [sp, #28]
 80093fc:	e014      	b.n	8009428 <_svfiprintf_r+0x110>
 80093fe:	eba0 0308 	sub.w	r3, r0, r8
 8009402:	fa09 f303 	lsl.w	r3, r9, r3
 8009406:	4313      	orrs	r3, r2
 8009408:	46a2      	mov	sl, r4
 800940a:	9304      	str	r3, [sp, #16]
 800940c:	e7d2      	b.n	80093b4 <_svfiprintf_r+0x9c>
 800940e:	9b03      	ldr	r3, [sp, #12]
 8009410:	1d19      	adds	r1, r3, #4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	9103      	str	r1, [sp, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfbb      	ittet	lt
 800941a:	425b      	neglt	r3, r3
 800941c:	f042 0202 	orrlt.w	r2, r2, #2
 8009420:	9307      	strge	r3, [sp, #28]
 8009422:	9307      	strlt	r3, [sp, #28]
 8009424:	bfb8      	it	lt
 8009426:	9204      	strlt	r2, [sp, #16]
 8009428:	7823      	ldrb	r3, [r4, #0]
 800942a:	2b2e      	cmp	r3, #46	; 0x2e
 800942c:	d10c      	bne.n	8009448 <_svfiprintf_r+0x130>
 800942e:	7863      	ldrb	r3, [r4, #1]
 8009430:	2b2a      	cmp	r3, #42	; 0x2a
 8009432:	d134      	bne.n	800949e <_svfiprintf_r+0x186>
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	3402      	adds	r4, #2
 8009438:	1d1a      	adds	r2, r3, #4
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	9203      	str	r2, [sp, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	bfb8      	it	lt
 8009442:	f04f 33ff 	movlt.w	r3, #4294967295
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009504 <_svfiprintf_r+0x1ec>
 800944c:	2203      	movs	r2, #3
 800944e:	4650      	mov	r0, sl
 8009450:	7821      	ldrb	r1, [r4, #0]
 8009452:	f7fd fc4e 	bl	8006cf2 <memchr>
 8009456:	b138      	cbz	r0, 8009468 <_svfiprintf_r+0x150>
 8009458:	2240      	movs	r2, #64	; 0x40
 800945a:	9b04      	ldr	r3, [sp, #16]
 800945c:	eba0 000a 	sub.w	r0, r0, sl
 8009460:	4082      	lsls	r2, r0
 8009462:	4313      	orrs	r3, r2
 8009464:	3401      	adds	r4, #1
 8009466:	9304      	str	r3, [sp, #16]
 8009468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946c:	2206      	movs	r2, #6
 800946e:	4826      	ldr	r0, [pc, #152]	; (8009508 <_svfiprintf_r+0x1f0>)
 8009470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009474:	f7fd fc3d 	bl	8006cf2 <memchr>
 8009478:	2800      	cmp	r0, #0
 800947a:	d038      	beq.n	80094ee <_svfiprintf_r+0x1d6>
 800947c:	4b23      	ldr	r3, [pc, #140]	; (800950c <_svfiprintf_r+0x1f4>)
 800947e:	bb1b      	cbnz	r3, 80094c8 <_svfiprintf_r+0x1b0>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	3307      	adds	r3, #7
 8009484:	f023 0307 	bic.w	r3, r3, #7
 8009488:	3308      	adds	r3, #8
 800948a:	9303      	str	r3, [sp, #12]
 800948c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948e:	4433      	add	r3, r6
 8009490:	9309      	str	r3, [sp, #36]	; 0x24
 8009492:	e768      	b.n	8009366 <_svfiprintf_r+0x4e>
 8009494:	460c      	mov	r4, r1
 8009496:	2001      	movs	r0, #1
 8009498:	fb0c 3202 	mla	r2, ip, r2, r3
 800949c:	e7a6      	b.n	80093ec <_svfiprintf_r+0xd4>
 800949e:	2300      	movs	r3, #0
 80094a0:	f04f 0c0a 	mov.w	ip, #10
 80094a4:	4619      	mov	r1, r3
 80094a6:	3401      	adds	r4, #1
 80094a8:	9305      	str	r3, [sp, #20]
 80094aa:	4620      	mov	r0, r4
 80094ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b0:	3a30      	subs	r2, #48	; 0x30
 80094b2:	2a09      	cmp	r2, #9
 80094b4:	d903      	bls.n	80094be <_svfiprintf_r+0x1a6>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0c6      	beq.n	8009448 <_svfiprintf_r+0x130>
 80094ba:	9105      	str	r1, [sp, #20]
 80094bc:	e7c4      	b.n	8009448 <_svfiprintf_r+0x130>
 80094be:	4604      	mov	r4, r0
 80094c0:	2301      	movs	r3, #1
 80094c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094c6:	e7f0      	b.n	80094aa <_svfiprintf_r+0x192>
 80094c8:	ab03      	add	r3, sp, #12
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	462a      	mov	r2, r5
 80094ce:	4638      	mov	r0, r7
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <_svfiprintf_r+0x1f8>)
 80094d2:	a904      	add	r1, sp, #16
 80094d4:	f7fc fc98 	bl	8005e08 <_printf_float>
 80094d8:	1c42      	adds	r2, r0, #1
 80094da:	4606      	mov	r6, r0
 80094dc:	d1d6      	bne.n	800948c <_svfiprintf_r+0x174>
 80094de:	89ab      	ldrh	r3, [r5, #12]
 80094e0:	065b      	lsls	r3, r3, #25
 80094e2:	f53f af2d 	bmi.w	8009340 <_svfiprintf_r+0x28>
 80094e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e8:	b01d      	add	sp, #116	; 0x74
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	ab03      	add	r3, sp, #12
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	462a      	mov	r2, r5
 80094f4:	4638      	mov	r0, r7
 80094f6:	4b06      	ldr	r3, [pc, #24]	; (8009510 <_svfiprintf_r+0x1f8>)
 80094f8:	a904      	add	r1, sp, #16
 80094fa:	f7fc ff25 	bl	8006348 <_printf_i>
 80094fe:	e7eb      	b.n	80094d8 <_svfiprintf_r+0x1c0>
 8009500:	0800a879 	.word	0x0800a879
 8009504:	0800a87f 	.word	0x0800a87f
 8009508:	0800a883 	.word	0x0800a883
 800950c:	08005e09 	.word	0x08005e09
 8009510:	08009265 	.word	0x08009265

08009514 <__sflush_r>:
 8009514:	898a      	ldrh	r2, [r1, #12]
 8009516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009518:	4605      	mov	r5, r0
 800951a:	0710      	lsls	r0, r2, #28
 800951c:	460c      	mov	r4, r1
 800951e:	d457      	bmi.n	80095d0 <__sflush_r+0xbc>
 8009520:	684b      	ldr	r3, [r1, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dc04      	bgt.n	8009530 <__sflush_r+0x1c>
 8009526:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	dc01      	bgt.n	8009530 <__sflush_r+0x1c>
 800952c:	2000      	movs	r0, #0
 800952e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009532:	2e00      	cmp	r6, #0
 8009534:	d0fa      	beq.n	800952c <__sflush_r+0x18>
 8009536:	2300      	movs	r3, #0
 8009538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800953c:	682f      	ldr	r7, [r5, #0]
 800953e:	6a21      	ldr	r1, [r4, #32]
 8009540:	602b      	str	r3, [r5, #0]
 8009542:	d032      	beq.n	80095aa <__sflush_r+0x96>
 8009544:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	075a      	lsls	r2, r3, #29
 800954a:	d505      	bpl.n	8009558 <__sflush_r+0x44>
 800954c:	6863      	ldr	r3, [r4, #4]
 800954e:	1ac0      	subs	r0, r0, r3
 8009550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009552:	b10b      	cbz	r3, 8009558 <__sflush_r+0x44>
 8009554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009556:	1ac0      	subs	r0, r0, r3
 8009558:	2300      	movs	r3, #0
 800955a:	4602      	mov	r2, r0
 800955c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800955e:	4628      	mov	r0, r5
 8009560:	6a21      	ldr	r1, [r4, #32]
 8009562:	47b0      	blx	r6
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	d106      	bne.n	8009578 <__sflush_r+0x64>
 800956a:	6829      	ldr	r1, [r5, #0]
 800956c:	291d      	cmp	r1, #29
 800956e:	d82b      	bhi.n	80095c8 <__sflush_r+0xb4>
 8009570:	4a28      	ldr	r2, [pc, #160]	; (8009614 <__sflush_r+0x100>)
 8009572:	410a      	asrs	r2, r1
 8009574:	07d6      	lsls	r6, r2, #31
 8009576:	d427      	bmi.n	80095c8 <__sflush_r+0xb4>
 8009578:	2200      	movs	r2, #0
 800957a:	6062      	str	r2, [r4, #4]
 800957c:	6922      	ldr	r2, [r4, #16]
 800957e:	04d9      	lsls	r1, r3, #19
 8009580:	6022      	str	r2, [r4, #0]
 8009582:	d504      	bpl.n	800958e <__sflush_r+0x7a>
 8009584:	1c42      	adds	r2, r0, #1
 8009586:	d101      	bne.n	800958c <__sflush_r+0x78>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b903      	cbnz	r3, 800958e <__sflush_r+0x7a>
 800958c:	6560      	str	r0, [r4, #84]	; 0x54
 800958e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009590:	602f      	str	r7, [r5, #0]
 8009592:	2900      	cmp	r1, #0
 8009594:	d0ca      	beq.n	800952c <__sflush_r+0x18>
 8009596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800959a:	4299      	cmp	r1, r3
 800959c:	d002      	beq.n	80095a4 <__sflush_r+0x90>
 800959e:	4628      	mov	r0, r5
 80095a0:	f7fe fa2a 	bl	80079f8 <_free_r>
 80095a4:	2000      	movs	r0, #0
 80095a6:	6360      	str	r0, [r4, #52]	; 0x34
 80095a8:	e7c1      	b.n	800952e <__sflush_r+0x1a>
 80095aa:	2301      	movs	r3, #1
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b0      	blx	r6
 80095b0:	1c41      	adds	r1, r0, #1
 80095b2:	d1c8      	bne.n	8009546 <__sflush_r+0x32>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0c5      	beq.n	8009546 <__sflush_r+0x32>
 80095ba:	2b1d      	cmp	r3, #29
 80095bc:	d001      	beq.n	80095c2 <__sflush_r+0xae>
 80095be:	2b16      	cmp	r3, #22
 80095c0:	d101      	bne.n	80095c6 <__sflush_r+0xb2>
 80095c2:	602f      	str	r7, [r5, #0]
 80095c4:	e7b2      	b.n	800952c <__sflush_r+0x18>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	e7ae      	b.n	800952e <__sflush_r+0x1a>
 80095d0:	690f      	ldr	r7, [r1, #16]
 80095d2:	2f00      	cmp	r7, #0
 80095d4:	d0aa      	beq.n	800952c <__sflush_r+0x18>
 80095d6:	0793      	lsls	r3, r2, #30
 80095d8:	bf18      	it	ne
 80095da:	2300      	movne	r3, #0
 80095dc:	680e      	ldr	r6, [r1, #0]
 80095de:	bf08      	it	eq
 80095e0:	694b      	ldreq	r3, [r1, #20]
 80095e2:	1bf6      	subs	r6, r6, r7
 80095e4:	600f      	str	r7, [r1, #0]
 80095e6:	608b      	str	r3, [r1, #8]
 80095e8:	2e00      	cmp	r6, #0
 80095ea:	dd9f      	ble.n	800952c <__sflush_r+0x18>
 80095ec:	4633      	mov	r3, r6
 80095ee:	463a      	mov	r2, r7
 80095f0:	4628      	mov	r0, r5
 80095f2:	6a21      	ldr	r1, [r4, #32]
 80095f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80095f8:	47e0      	blx	ip
 80095fa:	2800      	cmp	r0, #0
 80095fc:	dc06      	bgt.n	800960c <__sflush_r+0xf8>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009608:	81a3      	strh	r3, [r4, #12]
 800960a:	e790      	b.n	800952e <__sflush_r+0x1a>
 800960c:	4407      	add	r7, r0
 800960e:	1a36      	subs	r6, r6, r0
 8009610:	e7ea      	b.n	80095e8 <__sflush_r+0xd4>
 8009612:	bf00      	nop
 8009614:	dfbffffe 	.word	0xdfbffffe

08009618 <_fflush_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	690b      	ldr	r3, [r1, #16]
 800961c:	4605      	mov	r5, r0
 800961e:	460c      	mov	r4, r1
 8009620:	b913      	cbnz	r3, 8009628 <_fflush_r+0x10>
 8009622:	2500      	movs	r5, #0
 8009624:	4628      	mov	r0, r5
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	b118      	cbz	r0, 8009632 <_fflush_r+0x1a>
 800962a:	6a03      	ldr	r3, [r0, #32]
 800962c:	b90b      	cbnz	r3, 8009632 <_fflush_r+0x1a>
 800962e:	f7fd fa47 	bl	8006ac0 <__sinit>
 8009632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0f3      	beq.n	8009622 <_fflush_r+0xa>
 800963a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800963c:	07d0      	lsls	r0, r2, #31
 800963e:	d404      	bmi.n	800964a <_fflush_r+0x32>
 8009640:	0599      	lsls	r1, r3, #22
 8009642:	d402      	bmi.n	800964a <_fflush_r+0x32>
 8009644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009646:	f7fd fb52 	bl	8006cee <__retarget_lock_acquire_recursive>
 800964a:	4628      	mov	r0, r5
 800964c:	4621      	mov	r1, r4
 800964e:	f7ff ff61 	bl	8009514 <__sflush_r>
 8009652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009654:	4605      	mov	r5, r0
 8009656:	07da      	lsls	r2, r3, #31
 8009658:	d4e4      	bmi.n	8009624 <_fflush_r+0xc>
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	059b      	lsls	r3, r3, #22
 800965e:	d4e1      	bmi.n	8009624 <_fflush_r+0xc>
 8009660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009662:	f7fd fb45 	bl	8006cf0 <__retarget_lock_release_recursive>
 8009666:	e7dd      	b.n	8009624 <_fflush_r+0xc>

08009668 <memmove>:
 8009668:	4288      	cmp	r0, r1
 800966a:	b510      	push	{r4, lr}
 800966c:	eb01 0402 	add.w	r4, r1, r2
 8009670:	d902      	bls.n	8009678 <memmove+0x10>
 8009672:	4284      	cmp	r4, r0
 8009674:	4623      	mov	r3, r4
 8009676:	d807      	bhi.n	8009688 <memmove+0x20>
 8009678:	1e43      	subs	r3, r0, #1
 800967a:	42a1      	cmp	r1, r4
 800967c:	d008      	beq.n	8009690 <memmove+0x28>
 800967e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009686:	e7f8      	b.n	800967a <memmove+0x12>
 8009688:	4601      	mov	r1, r0
 800968a:	4402      	add	r2, r0
 800968c:	428a      	cmp	r2, r1
 800968e:	d100      	bne.n	8009692 <memmove+0x2a>
 8009690:	bd10      	pop	{r4, pc}
 8009692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800969a:	e7f7      	b.n	800968c <memmove+0x24>

0800969c <strncmp>:
 800969c:	b510      	push	{r4, lr}
 800969e:	b16a      	cbz	r2, 80096bc <strncmp+0x20>
 80096a0:	3901      	subs	r1, #1
 80096a2:	1884      	adds	r4, r0, r2
 80096a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d103      	bne.n	80096b8 <strncmp+0x1c>
 80096b0:	42a0      	cmp	r0, r4
 80096b2:	d001      	beq.n	80096b8 <strncmp+0x1c>
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	d1f5      	bne.n	80096a4 <strncmp+0x8>
 80096b8:	1ad0      	subs	r0, r2, r3
 80096ba:	bd10      	pop	{r4, pc}
 80096bc:	4610      	mov	r0, r2
 80096be:	e7fc      	b.n	80096ba <strncmp+0x1e>

080096c0 <_sbrk_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	2300      	movs	r3, #0
 80096c4:	4d05      	ldr	r5, [pc, #20]	; (80096dc <_sbrk_r+0x1c>)
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f9 f9b6 	bl	8002a3c <_sbrk>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_sbrk_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_sbrk_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	200004f0 	.word	0x200004f0

080096e0 <memcpy>:
 80096e0:	440a      	add	r2, r1
 80096e2:	4291      	cmp	r1, r2
 80096e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096e8:	d100      	bne.n	80096ec <memcpy+0xc>
 80096ea:	4770      	bx	lr
 80096ec:	b510      	push	{r4, lr}
 80096ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096f2:	4291      	cmp	r1, r2
 80096f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f8:	d1f9      	bne.n	80096ee <memcpy+0xe>
 80096fa:	bd10      	pop	{r4, pc}

080096fc <nan>:
 80096fc:	2000      	movs	r0, #0
 80096fe:	4901      	ldr	r1, [pc, #4]	; (8009704 <nan+0x8>)
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	7ff80000 	.word	0x7ff80000

08009708 <__assert_func>:
 8009708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800970a:	4614      	mov	r4, r2
 800970c:	461a      	mov	r2, r3
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <__assert_func+0x2c>)
 8009710:	4605      	mov	r5, r0
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68d8      	ldr	r0, [r3, #12]
 8009716:	b14c      	cbz	r4, 800972c <__assert_func+0x24>
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <__assert_func+0x30>)
 800971a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800971e:	9100      	str	r1, [sp, #0]
 8009720:	462b      	mov	r3, r5
 8009722:	4906      	ldr	r1, [pc, #24]	; (800973c <__assert_func+0x34>)
 8009724:	f000 fbca 	bl	8009ebc <fiprintf>
 8009728:	f000 fbda 	bl	8009ee0 <abort>
 800972c:	4b04      	ldr	r3, [pc, #16]	; (8009740 <__assert_func+0x38>)
 800972e:	461c      	mov	r4, r3
 8009730:	e7f3      	b.n	800971a <__assert_func+0x12>
 8009732:	bf00      	nop
 8009734:	20000064 	.word	0x20000064
 8009738:	0800a892 	.word	0x0800a892
 800973c:	0800a89f 	.word	0x0800a89f
 8009740:	0800a8cd 	.word	0x0800a8cd

08009744 <_calloc_r>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	fba1 5402 	umull	r5, r4, r1, r2
 800974a:	b934      	cbnz	r4, 800975a <_calloc_r+0x16>
 800974c:	4629      	mov	r1, r5
 800974e:	f7fe f9c3 	bl	8007ad8 <_malloc_r>
 8009752:	4606      	mov	r6, r0
 8009754:	b928      	cbnz	r0, 8009762 <_calloc_r+0x1e>
 8009756:	4630      	mov	r0, r6
 8009758:	bd70      	pop	{r4, r5, r6, pc}
 800975a:	220c      	movs	r2, #12
 800975c:	2600      	movs	r6, #0
 800975e:	6002      	str	r2, [r0, #0]
 8009760:	e7f9      	b.n	8009756 <_calloc_r+0x12>
 8009762:	462a      	mov	r2, r5
 8009764:	4621      	mov	r1, r4
 8009766:	f7fd fa44 	bl	8006bf2 <memset>
 800976a:	e7f4      	b.n	8009756 <_calloc_r+0x12>

0800976c <rshift>:
 800976c:	6903      	ldr	r3, [r0, #16]
 800976e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009772:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009776:	f100 0414 	add.w	r4, r0, #20
 800977a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800977e:	dd46      	ble.n	800980e <rshift+0xa2>
 8009780:	f011 011f 	ands.w	r1, r1, #31
 8009784:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009788:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800978c:	d10c      	bne.n	80097a8 <rshift+0x3c>
 800978e:	4629      	mov	r1, r5
 8009790:	f100 0710 	add.w	r7, r0, #16
 8009794:	42b1      	cmp	r1, r6
 8009796:	d335      	bcc.n	8009804 <rshift+0x98>
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	1eea      	subs	r2, r5, #3
 800979e:	4296      	cmp	r6, r2
 80097a0:	bf38      	it	cc
 80097a2:	2300      	movcc	r3, #0
 80097a4:	4423      	add	r3, r4
 80097a6:	e015      	b.n	80097d4 <rshift+0x68>
 80097a8:	46a1      	mov	r9, r4
 80097aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097ae:	f1c1 0820 	rsb	r8, r1, #32
 80097b2:	40cf      	lsrs	r7, r1
 80097b4:	f105 0e04 	add.w	lr, r5, #4
 80097b8:	4576      	cmp	r6, lr
 80097ba:	46f4      	mov	ip, lr
 80097bc:	d816      	bhi.n	80097ec <rshift+0x80>
 80097be:	1a9a      	subs	r2, r3, r2
 80097c0:	0092      	lsls	r2, r2, #2
 80097c2:	3a04      	subs	r2, #4
 80097c4:	3501      	adds	r5, #1
 80097c6:	42ae      	cmp	r6, r5
 80097c8:	bf38      	it	cc
 80097ca:	2200      	movcc	r2, #0
 80097cc:	18a3      	adds	r3, r4, r2
 80097ce:	50a7      	str	r7, [r4, r2]
 80097d0:	b107      	cbz	r7, 80097d4 <rshift+0x68>
 80097d2:	3304      	adds	r3, #4
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	eba3 0204 	sub.w	r2, r3, r4
 80097da:	bf08      	it	eq
 80097dc:	2300      	moveq	r3, #0
 80097de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097e2:	6102      	str	r2, [r0, #16]
 80097e4:	bf08      	it	eq
 80097e6:	6143      	streq	r3, [r0, #20]
 80097e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ec:	f8dc c000 	ldr.w	ip, [ip]
 80097f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80097f4:	ea4c 0707 	orr.w	r7, ip, r7
 80097f8:	f849 7b04 	str.w	r7, [r9], #4
 80097fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009800:	40cf      	lsrs	r7, r1
 8009802:	e7d9      	b.n	80097b8 <rshift+0x4c>
 8009804:	f851 cb04 	ldr.w	ip, [r1], #4
 8009808:	f847 cf04 	str.w	ip, [r7, #4]!
 800980c:	e7c2      	b.n	8009794 <rshift+0x28>
 800980e:	4623      	mov	r3, r4
 8009810:	e7e0      	b.n	80097d4 <rshift+0x68>

08009812 <__hexdig_fun>:
 8009812:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009816:	2b09      	cmp	r3, #9
 8009818:	d802      	bhi.n	8009820 <__hexdig_fun+0xe>
 800981a:	3820      	subs	r0, #32
 800981c:	b2c0      	uxtb	r0, r0
 800981e:	4770      	bx	lr
 8009820:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009824:	2b05      	cmp	r3, #5
 8009826:	d801      	bhi.n	800982c <__hexdig_fun+0x1a>
 8009828:	3847      	subs	r0, #71	; 0x47
 800982a:	e7f7      	b.n	800981c <__hexdig_fun+0xa>
 800982c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009830:	2b05      	cmp	r3, #5
 8009832:	d801      	bhi.n	8009838 <__hexdig_fun+0x26>
 8009834:	3827      	subs	r0, #39	; 0x27
 8009836:	e7f1      	b.n	800981c <__hexdig_fun+0xa>
 8009838:	2000      	movs	r0, #0
 800983a:	4770      	bx	lr

0800983c <__gethex>:
 800983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	4681      	mov	r9, r0
 8009842:	468a      	mov	sl, r1
 8009844:	4617      	mov	r7, r2
 8009846:	680a      	ldr	r2, [r1, #0]
 8009848:	b085      	sub	sp, #20
 800984a:	f102 0b02 	add.w	fp, r2, #2
 800984e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009852:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009856:	9302      	str	r3, [sp, #8]
 8009858:	32fe      	adds	r2, #254	; 0xfe
 800985a:	eb02 030b 	add.w	r3, r2, fp
 800985e:	46d8      	mov	r8, fp
 8009860:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	2830      	cmp	r0, #48	; 0x30
 8009868:	d0f7      	beq.n	800985a <__gethex+0x1e>
 800986a:	f7ff ffd2 	bl	8009812 <__hexdig_fun>
 800986e:	4604      	mov	r4, r0
 8009870:	2800      	cmp	r0, #0
 8009872:	d138      	bne.n	80098e6 <__gethex+0xaa>
 8009874:	2201      	movs	r2, #1
 8009876:	4640      	mov	r0, r8
 8009878:	49a7      	ldr	r1, [pc, #668]	; (8009b18 <__gethex+0x2dc>)
 800987a:	f7ff ff0f 	bl	800969c <strncmp>
 800987e:	4606      	mov	r6, r0
 8009880:	2800      	cmp	r0, #0
 8009882:	d169      	bne.n	8009958 <__gethex+0x11c>
 8009884:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009888:	465d      	mov	r5, fp
 800988a:	f7ff ffc2 	bl	8009812 <__hexdig_fun>
 800988e:	2800      	cmp	r0, #0
 8009890:	d064      	beq.n	800995c <__gethex+0x120>
 8009892:	465a      	mov	r2, fp
 8009894:	7810      	ldrb	r0, [r2, #0]
 8009896:	4690      	mov	r8, r2
 8009898:	2830      	cmp	r0, #48	; 0x30
 800989a:	f102 0201 	add.w	r2, r2, #1
 800989e:	d0f9      	beq.n	8009894 <__gethex+0x58>
 80098a0:	f7ff ffb7 	bl	8009812 <__hexdig_fun>
 80098a4:	2301      	movs	r3, #1
 80098a6:	fab0 f480 	clz	r4, r0
 80098aa:	465e      	mov	r6, fp
 80098ac:	0964      	lsrs	r4, r4, #5
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	4642      	mov	r2, r8
 80098b2:	4615      	mov	r5, r2
 80098b4:	7828      	ldrb	r0, [r5, #0]
 80098b6:	3201      	adds	r2, #1
 80098b8:	f7ff ffab 	bl	8009812 <__hexdig_fun>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1f8      	bne.n	80098b2 <__gethex+0x76>
 80098c0:	2201      	movs	r2, #1
 80098c2:	4628      	mov	r0, r5
 80098c4:	4994      	ldr	r1, [pc, #592]	; (8009b18 <__gethex+0x2dc>)
 80098c6:	f7ff fee9 	bl	800969c <strncmp>
 80098ca:	b978      	cbnz	r0, 80098ec <__gethex+0xb0>
 80098cc:	b946      	cbnz	r6, 80098e0 <__gethex+0xa4>
 80098ce:	1c6e      	adds	r6, r5, #1
 80098d0:	4632      	mov	r2, r6
 80098d2:	4615      	mov	r5, r2
 80098d4:	7828      	ldrb	r0, [r5, #0]
 80098d6:	3201      	adds	r2, #1
 80098d8:	f7ff ff9b 	bl	8009812 <__hexdig_fun>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d1f8      	bne.n	80098d2 <__gethex+0x96>
 80098e0:	1b73      	subs	r3, r6, r5
 80098e2:	009e      	lsls	r6, r3, #2
 80098e4:	e004      	b.n	80098f0 <__gethex+0xb4>
 80098e6:	2400      	movs	r4, #0
 80098e8:	4626      	mov	r6, r4
 80098ea:	e7e1      	b.n	80098b0 <__gethex+0x74>
 80098ec:	2e00      	cmp	r6, #0
 80098ee:	d1f7      	bne.n	80098e0 <__gethex+0xa4>
 80098f0:	782b      	ldrb	r3, [r5, #0]
 80098f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098f6:	2b50      	cmp	r3, #80	; 0x50
 80098f8:	d13d      	bne.n	8009976 <__gethex+0x13a>
 80098fa:	786b      	ldrb	r3, [r5, #1]
 80098fc:	2b2b      	cmp	r3, #43	; 0x2b
 80098fe:	d02f      	beq.n	8009960 <__gethex+0x124>
 8009900:	2b2d      	cmp	r3, #45	; 0x2d
 8009902:	d031      	beq.n	8009968 <__gethex+0x12c>
 8009904:	f04f 0b00 	mov.w	fp, #0
 8009908:	1c69      	adds	r1, r5, #1
 800990a:	7808      	ldrb	r0, [r1, #0]
 800990c:	f7ff ff81 	bl	8009812 <__hexdig_fun>
 8009910:	1e42      	subs	r2, r0, #1
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	2a18      	cmp	r2, #24
 8009916:	d82e      	bhi.n	8009976 <__gethex+0x13a>
 8009918:	f1a0 0210 	sub.w	r2, r0, #16
 800991c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009920:	f7ff ff77 	bl	8009812 <__hexdig_fun>
 8009924:	f100 3cff 	add.w	ip, r0, #4294967295
 8009928:	fa5f fc8c 	uxtb.w	ip, ip
 800992c:	f1bc 0f18 	cmp.w	ip, #24
 8009930:	d91d      	bls.n	800996e <__gethex+0x132>
 8009932:	f1bb 0f00 	cmp.w	fp, #0
 8009936:	d000      	beq.n	800993a <__gethex+0xfe>
 8009938:	4252      	negs	r2, r2
 800993a:	4416      	add	r6, r2
 800993c:	f8ca 1000 	str.w	r1, [sl]
 8009940:	b1dc      	cbz	r4, 800997a <__gethex+0x13e>
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	bf14      	ite	ne
 8009948:	f04f 0800 	movne.w	r8, #0
 800994c:	f04f 0806 	moveq.w	r8, #6
 8009950:	4640      	mov	r0, r8
 8009952:	b005      	add	sp, #20
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	4645      	mov	r5, r8
 800995a:	4626      	mov	r6, r4
 800995c:	2401      	movs	r4, #1
 800995e:	e7c7      	b.n	80098f0 <__gethex+0xb4>
 8009960:	f04f 0b00 	mov.w	fp, #0
 8009964:	1ca9      	adds	r1, r5, #2
 8009966:	e7d0      	b.n	800990a <__gethex+0xce>
 8009968:	f04f 0b01 	mov.w	fp, #1
 800996c:	e7fa      	b.n	8009964 <__gethex+0x128>
 800996e:	230a      	movs	r3, #10
 8009970:	fb03 0002 	mla	r0, r3, r2, r0
 8009974:	e7d0      	b.n	8009918 <__gethex+0xdc>
 8009976:	4629      	mov	r1, r5
 8009978:	e7e0      	b.n	800993c <__gethex+0x100>
 800997a:	4621      	mov	r1, r4
 800997c:	eba5 0308 	sub.w	r3, r5, r8
 8009980:	3b01      	subs	r3, #1
 8009982:	2b07      	cmp	r3, #7
 8009984:	dc0a      	bgt.n	800999c <__gethex+0x160>
 8009986:	4648      	mov	r0, r9
 8009988:	f7fe f932 	bl	8007bf0 <_Balloc>
 800998c:	4604      	mov	r4, r0
 800998e:	b940      	cbnz	r0, 80099a2 <__gethex+0x166>
 8009990:	4602      	mov	r2, r0
 8009992:	21e4      	movs	r1, #228	; 0xe4
 8009994:	4b61      	ldr	r3, [pc, #388]	; (8009b1c <__gethex+0x2e0>)
 8009996:	4862      	ldr	r0, [pc, #392]	; (8009b20 <__gethex+0x2e4>)
 8009998:	f7ff feb6 	bl	8009708 <__assert_func>
 800999c:	3101      	adds	r1, #1
 800999e:	105b      	asrs	r3, r3, #1
 80099a0:	e7ef      	b.n	8009982 <__gethex+0x146>
 80099a2:	2300      	movs	r3, #0
 80099a4:	469b      	mov	fp, r3
 80099a6:	f100 0a14 	add.w	sl, r0, #20
 80099aa:	f8cd a004 	str.w	sl, [sp, #4]
 80099ae:	45a8      	cmp	r8, r5
 80099b0:	d344      	bcc.n	8009a3c <__gethex+0x200>
 80099b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099b6:	4658      	mov	r0, fp
 80099b8:	f848 bb04 	str.w	fp, [r8], #4
 80099bc:	eba8 080a 	sub.w	r8, r8, sl
 80099c0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80099c4:	6122      	str	r2, [r4, #16]
 80099c6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80099ca:	f7fe fa03 	bl	8007dd4 <__hi0bits>
 80099ce:	683d      	ldr	r5, [r7, #0]
 80099d0:	eba8 0800 	sub.w	r8, r8, r0
 80099d4:	45a8      	cmp	r8, r5
 80099d6:	dd59      	ble.n	8009a8c <__gethex+0x250>
 80099d8:	eba8 0805 	sub.w	r8, r8, r5
 80099dc:	4641      	mov	r1, r8
 80099de:	4620      	mov	r0, r4
 80099e0:	f7fe fd81 	bl	80084e6 <__any_on>
 80099e4:	4683      	mov	fp, r0
 80099e6:	b1b8      	cbz	r0, 8009a18 <__gethex+0x1dc>
 80099e8:	f04f 0b01 	mov.w	fp, #1
 80099ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80099f0:	1159      	asrs	r1, r3, #5
 80099f2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80099f6:	f003 021f 	and.w	r2, r3, #31
 80099fa:	fa0b f202 	lsl.w	r2, fp, r2
 80099fe:	420a      	tst	r2, r1
 8009a00:	d00a      	beq.n	8009a18 <__gethex+0x1dc>
 8009a02:	455b      	cmp	r3, fp
 8009a04:	dd06      	ble.n	8009a14 <__gethex+0x1d8>
 8009a06:	4620      	mov	r0, r4
 8009a08:	f1a8 0102 	sub.w	r1, r8, #2
 8009a0c:	f7fe fd6b 	bl	80084e6 <__any_on>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d138      	bne.n	8009a86 <__gethex+0x24a>
 8009a14:	f04f 0b02 	mov.w	fp, #2
 8009a18:	4641      	mov	r1, r8
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7ff fea6 	bl	800976c <rshift>
 8009a20:	4446      	add	r6, r8
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	42b3      	cmp	r3, r6
 8009a26:	da41      	bge.n	8009aac <__gethex+0x270>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4648      	mov	r0, r9
 8009a2c:	f7fe f920 	bl	8007c70 <_Bfree>
 8009a30:	2300      	movs	r3, #0
 8009a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a34:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	e789      	b.n	8009950 <__gethex+0x114>
 8009a3c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009a40:	2a2e      	cmp	r2, #46	; 0x2e
 8009a42:	d014      	beq.n	8009a6e <__gethex+0x232>
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d106      	bne.n	8009a56 <__gethex+0x21a>
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	f843 bb04 	str.w	fp, [r3], #4
 8009a4e:	f04f 0b00 	mov.w	fp, #0
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	465b      	mov	r3, fp
 8009a56:	7828      	ldrb	r0, [r5, #0]
 8009a58:	9303      	str	r3, [sp, #12]
 8009a5a:	f7ff feda 	bl	8009812 <__hexdig_fun>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	f000 000f 	and.w	r0, r0, #15
 8009a64:	4098      	lsls	r0, r3
 8009a66:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	e79f      	b.n	80099ae <__gethex+0x172>
 8009a6e:	45a8      	cmp	r8, r5
 8009a70:	d8e8      	bhi.n	8009a44 <__gethex+0x208>
 8009a72:	2201      	movs	r2, #1
 8009a74:	4628      	mov	r0, r5
 8009a76:	4928      	ldr	r1, [pc, #160]	; (8009b18 <__gethex+0x2dc>)
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	f7ff fe0f 	bl	800969c <strncmp>
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d1df      	bne.n	8009a44 <__gethex+0x208>
 8009a84:	e793      	b.n	80099ae <__gethex+0x172>
 8009a86:	f04f 0b03 	mov.w	fp, #3
 8009a8a:	e7c5      	b.n	8009a18 <__gethex+0x1dc>
 8009a8c:	da0b      	bge.n	8009aa6 <__gethex+0x26a>
 8009a8e:	eba5 0808 	sub.w	r8, r5, r8
 8009a92:	4621      	mov	r1, r4
 8009a94:	4642      	mov	r2, r8
 8009a96:	4648      	mov	r0, r9
 8009a98:	f7fe fb02 	bl	80080a0 <__lshift>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	eba6 0608 	sub.w	r6, r6, r8
 8009aa2:	f100 0a14 	add.w	sl, r0, #20
 8009aa6:	f04f 0b00 	mov.w	fp, #0
 8009aaa:	e7ba      	b.n	8009a22 <__gethex+0x1e6>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	42b3      	cmp	r3, r6
 8009ab0:	dd74      	ble.n	8009b9c <__gethex+0x360>
 8009ab2:	1b9e      	subs	r6, r3, r6
 8009ab4:	42b5      	cmp	r5, r6
 8009ab6:	dc35      	bgt.n	8009b24 <__gethex+0x2e8>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d023      	beq.n	8009b06 <__gethex+0x2ca>
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d025      	beq.n	8009b0e <__gethex+0x2d2>
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d115      	bne.n	8009af2 <__gethex+0x2b6>
 8009ac6:	42b5      	cmp	r5, r6
 8009ac8:	d113      	bne.n	8009af2 <__gethex+0x2b6>
 8009aca:	2d01      	cmp	r5, #1
 8009acc:	d10b      	bne.n	8009ae6 <__gethex+0x2aa>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	9a02      	ldr	r2, [sp, #8]
 8009ad2:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	6123      	str	r3, [r4, #16]
 8009adc:	f8ca 3000 	str.w	r3, [sl]
 8009ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ae2:	601c      	str	r4, [r3, #0]
 8009ae4:	e734      	b.n	8009950 <__gethex+0x114>
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	1e69      	subs	r1, r5, #1
 8009aea:	f7fe fcfc 	bl	80084e6 <__any_on>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1ed      	bne.n	8009ace <__gethex+0x292>
 8009af2:	4621      	mov	r1, r4
 8009af4:	4648      	mov	r0, r9
 8009af6:	f7fe f8bb 	bl	8007c70 <_Bfree>
 8009afa:	2300      	movs	r3, #0
 8009afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009afe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	e724      	b.n	8009950 <__gethex+0x114>
 8009b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f2      	bne.n	8009af2 <__gethex+0x2b6>
 8009b0c:	e7df      	b.n	8009ace <__gethex+0x292>
 8009b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1dc      	bne.n	8009ace <__gethex+0x292>
 8009b14:	e7ed      	b.n	8009af2 <__gethex+0x2b6>
 8009b16:	bf00      	nop
 8009b18:	0800a724 	.word	0x0800a724
 8009b1c:	0800a5bb 	.word	0x0800a5bb
 8009b20:	0800a8ce 	.word	0x0800a8ce
 8009b24:	f106 38ff 	add.w	r8, r6, #4294967295
 8009b28:	f1bb 0f00 	cmp.w	fp, #0
 8009b2c:	d133      	bne.n	8009b96 <__gethex+0x35a>
 8009b2e:	f1b8 0f00 	cmp.w	r8, #0
 8009b32:	d004      	beq.n	8009b3e <__gethex+0x302>
 8009b34:	4641      	mov	r1, r8
 8009b36:	4620      	mov	r0, r4
 8009b38:	f7fe fcd5 	bl	80084e6 <__any_on>
 8009b3c:	4683      	mov	fp, r0
 8009b3e:	2301      	movs	r3, #1
 8009b40:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009b44:	f008 081f 	and.w	r8, r8, #31
 8009b48:	fa03 f308 	lsl.w	r3, r3, r8
 8009b4c:	f04f 0802 	mov.w	r8, #2
 8009b50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b54:	4631      	mov	r1, r6
 8009b56:	4213      	tst	r3, r2
 8009b58:	4620      	mov	r0, r4
 8009b5a:	bf18      	it	ne
 8009b5c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009b60:	1bad      	subs	r5, r5, r6
 8009b62:	f7ff fe03 	bl	800976c <rshift>
 8009b66:	687e      	ldr	r6, [r7, #4]
 8009b68:	f1bb 0f00 	cmp.w	fp, #0
 8009b6c:	d04a      	beq.n	8009c04 <__gethex+0x3c8>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d016      	beq.n	8009ba2 <__gethex+0x366>
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d018      	beq.n	8009baa <__gethex+0x36e>
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d109      	bne.n	8009b90 <__gethex+0x354>
 8009b7c:	f01b 0f02 	tst.w	fp, #2
 8009b80:	d006      	beq.n	8009b90 <__gethex+0x354>
 8009b82:	f8da 3000 	ldr.w	r3, [sl]
 8009b86:	ea4b 0b03 	orr.w	fp, fp, r3
 8009b8a:	f01b 0f01 	tst.w	fp, #1
 8009b8e:	d10f      	bne.n	8009bb0 <__gethex+0x374>
 8009b90:	f048 0810 	orr.w	r8, r8, #16
 8009b94:	e036      	b.n	8009c04 <__gethex+0x3c8>
 8009b96:	f04f 0b01 	mov.w	fp, #1
 8009b9a:	e7d0      	b.n	8009b3e <__gethex+0x302>
 8009b9c:	f04f 0801 	mov.w	r8, #1
 8009ba0:	e7e2      	b.n	8009b68 <__gethex+0x32c>
 8009ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba4:	f1c3 0301 	rsb	r3, r3, #1
 8009ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0ef      	beq.n	8009b90 <__gethex+0x354>
 8009bb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bb4:	f104 0214 	add.w	r2, r4, #20
 8009bb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009bc4:	4694      	mov	ip, r2
 8009bc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8009bca:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009bce:	d01e      	beq.n	8009c0e <__gethex+0x3d2>
 8009bd0:	3101      	adds	r1, #1
 8009bd2:	f8cc 1000 	str.w	r1, [ip]
 8009bd6:	f1b8 0f02 	cmp.w	r8, #2
 8009bda:	f104 0214 	add.w	r2, r4, #20
 8009bde:	d13d      	bne.n	8009c5c <__gethex+0x420>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	d10b      	bne.n	8009c00 <__gethex+0x3c4>
 8009be8:	2301      	movs	r3, #1
 8009bea:	1169      	asrs	r1, r5, #5
 8009bec:	f005 051f 	and.w	r5, r5, #31
 8009bf0:	fa03 f505 	lsl.w	r5, r3, r5
 8009bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bf8:	421d      	tst	r5, r3
 8009bfa:	bf18      	it	ne
 8009bfc:	f04f 0801 	movne.w	r8, #1
 8009c00:	f048 0820 	orr.w	r8, r8, #32
 8009c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c06:	601c      	str	r4, [r3, #0]
 8009c08:	9b02      	ldr	r3, [sp, #8]
 8009c0a:	601e      	str	r6, [r3, #0]
 8009c0c:	e6a0      	b.n	8009950 <__gethex+0x114>
 8009c0e:	4290      	cmp	r0, r2
 8009c10:	f842 3c04 	str.w	r3, [r2, #-4]
 8009c14:	d8d6      	bhi.n	8009bc4 <__gethex+0x388>
 8009c16:	68a2      	ldr	r2, [r4, #8]
 8009c18:	4593      	cmp	fp, r2
 8009c1a:	db17      	blt.n	8009c4c <__gethex+0x410>
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	4648      	mov	r0, r9
 8009c20:	3101      	adds	r1, #1
 8009c22:	f7fd ffe5 	bl	8007bf0 <_Balloc>
 8009c26:	4682      	mov	sl, r0
 8009c28:	b918      	cbnz	r0, 8009c32 <__gethex+0x3f6>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	2184      	movs	r1, #132	; 0x84
 8009c2e:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <__gethex+0x45c>)
 8009c30:	e6b1      	b.n	8009996 <__gethex+0x15a>
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	f104 010c 	add.w	r1, r4, #12
 8009c38:	3202      	adds	r2, #2
 8009c3a:	0092      	lsls	r2, r2, #2
 8009c3c:	300c      	adds	r0, #12
 8009c3e:	f7ff fd4f 	bl	80096e0 <memcpy>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4648      	mov	r0, r9
 8009c46:	f7fe f813 	bl	8007c70 <_Bfree>
 8009c4a:	4654      	mov	r4, sl
 8009c4c:	6922      	ldr	r2, [r4, #16]
 8009c4e:	1c51      	adds	r1, r2, #1
 8009c50:	6121      	str	r1, [r4, #16]
 8009c52:	2101      	movs	r1, #1
 8009c54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009c58:	6151      	str	r1, [r2, #20]
 8009c5a:	e7bc      	b.n	8009bd6 <__gethex+0x39a>
 8009c5c:	6921      	ldr	r1, [r4, #16]
 8009c5e:	4559      	cmp	r1, fp
 8009c60:	dd0b      	ble.n	8009c7a <__gethex+0x43e>
 8009c62:	2101      	movs	r1, #1
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7ff fd81 	bl	800976c <rshift>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3601      	adds	r6, #1
 8009c6e:	42b3      	cmp	r3, r6
 8009c70:	f6ff aeda 	blt.w	8009a28 <__gethex+0x1ec>
 8009c74:	f04f 0801 	mov.w	r8, #1
 8009c78:	e7c2      	b.n	8009c00 <__gethex+0x3c4>
 8009c7a:	f015 051f 	ands.w	r5, r5, #31
 8009c7e:	d0f9      	beq.n	8009c74 <__gethex+0x438>
 8009c80:	9b01      	ldr	r3, [sp, #4]
 8009c82:	f1c5 0520 	rsb	r5, r5, #32
 8009c86:	441a      	add	r2, r3
 8009c88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009c8c:	f7fe f8a2 	bl	8007dd4 <__hi0bits>
 8009c90:	42a8      	cmp	r0, r5
 8009c92:	dbe6      	blt.n	8009c62 <__gethex+0x426>
 8009c94:	e7ee      	b.n	8009c74 <__gethex+0x438>
 8009c96:	bf00      	nop
 8009c98:	0800a5bb 	.word	0x0800a5bb

08009c9c <L_shift>:
 8009c9c:	f1c2 0208 	rsb	r2, r2, #8
 8009ca0:	0092      	lsls	r2, r2, #2
 8009ca2:	b570      	push	{r4, r5, r6, lr}
 8009ca4:	f1c2 0620 	rsb	r6, r2, #32
 8009ca8:	6843      	ldr	r3, [r0, #4]
 8009caa:	6804      	ldr	r4, [r0, #0]
 8009cac:	fa03 f506 	lsl.w	r5, r3, r6
 8009cb0:	432c      	orrs	r4, r5
 8009cb2:	40d3      	lsrs	r3, r2
 8009cb4:	6004      	str	r4, [r0, #0]
 8009cb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cba:	4288      	cmp	r0, r1
 8009cbc:	d3f4      	bcc.n	8009ca8 <L_shift+0xc>
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}

08009cc0 <__match>:
 8009cc0:	b530      	push	{r4, r5, lr}
 8009cc2:	6803      	ldr	r3, [r0, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cca:	b914      	cbnz	r4, 8009cd2 <__match+0x12>
 8009ccc:	6003      	str	r3, [r0, #0]
 8009cce:	2001      	movs	r0, #1
 8009cd0:	bd30      	pop	{r4, r5, pc}
 8009cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009cda:	2d19      	cmp	r5, #25
 8009cdc:	bf98      	it	ls
 8009cde:	3220      	addls	r2, #32
 8009ce0:	42a2      	cmp	r2, r4
 8009ce2:	d0f0      	beq.n	8009cc6 <__match+0x6>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e7f3      	b.n	8009cd0 <__match+0x10>

08009ce8 <__hexnan>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	2500      	movs	r5, #0
 8009cee:	680b      	ldr	r3, [r1, #0]
 8009cf0:	4682      	mov	sl, r0
 8009cf2:	115e      	asrs	r6, r3, #5
 8009cf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cf8:	f013 031f 	ands.w	r3, r3, #31
 8009cfc:	bf18      	it	ne
 8009cfe:	3604      	addne	r6, #4
 8009d00:	1f37      	subs	r7, r6, #4
 8009d02:	4690      	mov	r8, r2
 8009d04:	46b9      	mov	r9, r7
 8009d06:	463c      	mov	r4, r7
 8009d08:	46ab      	mov	fp, r5
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	6801      	ldr	r1, [r0, #0]
 8009d0e:	9301      	str	r3, [sp, #4]
 8009d10:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d14:	9502      	str	r5, [sp, #8]
 8009d16:	784a      	ldrb	r2, [r1, #1]
 8009d18:	1c4b      	adds	r3, r1, #1
 8009d1a:	9303      	str	r3, [sp, #12]
 8009d1c:	b342      	cbz	r2, 8009d70 <__hexnan+0x88>
 8009d1e:	4610      	mov	r0, r2
 8009d20:	9105      	str	r1, [sp, #20]
 8009d22:	9204      	str	r2, [sp, #16]
 8009d24:	f7ff fd75 	bl	8009812 <__hexdig_fun>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d14f      	bne.n	8009dcc <__hexnan+0xe4>
 8009d2c:	9a04      	ldr	r2, [sp, #16]
 8009d2e:	9905      	ldr	r1, [sp, #20]
 8009d30:	2a20      	cmp	r2, #32
 8009d32:	d818      	bhi.n	8009d66 <__hexnan+0x7e>
 8009d34:	9b02      	ldr	r3, [sp, #8]
 8009d36:	459b      	cmp	fp, r3
 8009d38:	dd13      	ble.n	8009d62 <__hexnan+0x7a>
 8009d3a:	454c      	cmp	r4, r9
 8009d3c:	d206      	bcs.n	8009d4c <__hexnan+0x64>
 8009d3e:	2d07      	cmp	r5, #7
 8009d40:	dc04      	bgt.n	8009d4c <__hexnan+0x64>
 8009d42:	462a      	mov	r2, r5
 8009d44:	4649      	mov	r1, r9
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7ff ffa8 	bl	8009c9c <L_shift>
 8009d4c:	4544      	cmp	r4, r8
 8009d4e:	d950      	bls.n	8009df2 <__hexnan+0x10a>
 8009d50:	2300      	movs	r3, #0
 8009d52:	f1a4 0904 	sub.w	r9, r4, #4
 8009d56:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d5a:	461d      	mov	r5, r3
 8009d5c:	464c      	mov	r4, r9
 8009d5e:	f8cd b008 	str.w	fp, [sp, #8]
 8009d62:	9903      	ldr	r1, [sp, #12]
 8009d64:	e7d7      	b.n	8009d16 <__hexnan+0x2e>
 8009d66:	2a29      	cmp	r2, #41	; 0x29
 8009d68:	d155      	bne.n	8009e16 <__hexnan+0x12e>
 8009d6a:	3102      	adds	r1, #2
 8009d6c:	f8ca 1000 	str.w	r1, [sl]
 8009d70:	f1bb 0f00 	cmp.w	fp, #0
 8009d74:	d04f      	beq.n	8009e16 <__hexnan+0x12e>
 8009d76:	454c      	cmp	r4, r9
 8009d78:	d206      	bcs.n	8009d88 <__hexnan+0xa0>
 8009d7a:	2d07      	cmp	r5, #7
 8009d7c:	dc04      	bgt.n	8009d88 <__hexnan+0xa0>
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4649      	mov	r1, r9
 8009d82:	4620      	mov	r0, r4
 8009d84:	f7ff ff8a 	bl	8009c9c <L_shift>
 8009d88:	4544      	cmp	r4, r8
 8009d8a:	d934      	bls.n	8009df6 <__hexnan+0x10e>
 8009d8c:	4623      	mov	r3, r4
 8009d8e:	f1a8 0204 	sub.w	r2, r8, #4
 8009d92:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d96:	429f      	cmp	r7, r3
 8009d98:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d9c:	d2f9      	bcs.n	8009d92 <__hexnan+0xaa>
 8009d9e:	1b3b      	subs	r3, r7, r4
 8009da0:	f023 0303 	bic.w	r3, r3, #3
 8009da4:	3304      	adds	r3, #4
 8009da6:	3e03      	subs	r6, #3
 8009da8:	3401      	adds	r4, #1
 8009daa:	42a6      	cmp	r6, r4
 8009dac:	bf38      	it	cc
 8009dae:	2304      	movcc	r3, #4
 8009db0:	2200      	movs	r2, #0
 8009db2:	4443      	add	r3, r8
 8009db4:	f843 2b04 	str.w	r2, [r3], #4
 8009db8:	429f      	cmp	r7, r3
 8009dba:	d2fb      	bcs.n	8009db4 <__hexnan+0xcc>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	b91b      	cbnz	r3, 8009dc8 <__hexnan+0xe0>
 8009dc0:	4547      	cmp	r7, r8
 8009dc2:	d126      	bne.n	8009e12 <__hexnan+0x12a>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	2005      	movs	r0, #5
 8009dca:	e025      	b.n	8009e18 <__hexnan+0x130>
 8009dcc:	3501      	adds	r5, #1
 8009dce:	2d08      	cmp	r5, #8
 8009dd0:	f10b 0b01 	add.w	fp, fp, #1
 8009dd4:	dd06      	ble.n	8009de4 <__hexnan+0xfc>
 8009dd6:	4544      	cmp	r4, r8
 8009dd8:	d9c3      	bls.n	8009d62 <__hexnan+0x7a>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	2501      	movs	r5, #1
 8009dde:	f844 3c04 	str.w	r3, [r4, #-4]
 8009de2:	3c04      	subs	r4, #4
 8009de4:	6822      	ldr	r2, [r4, #0]
 8009de6:	f000 000f 	and.w	r0, r0, #15
 8009dea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009dee:	6020      	str	r0, [r4, #0]
 8009df0:	e7b7      	b.n	8009d62 <__hexnan+0x7a>
 8009df2:	2508      	movs	r5, #8
 8009df4:	e7b5      	b.n	8009d62 <__hexnan+0x7a>
 8009df6:	9b01      	ldr	r3, [sp, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0df      	beq.n	8009dbc <__hexnan+0xd4>
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	f1c3 0320 	rsb	r3, r3, #32
 8009e04:	40da      	lsrs	r2, r3
 8009e06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e10:	e7d4      	b.n	8009dbc <__hexnan+0xd4>
 8009e12:	3f04      	subs	r7, #4
 8009e14:	e7d2      	b.n	8009dbc <__hexnan+0xd4>
 8009e16:	2004      	movs	r0, #4
 8009e18:	b007      	add	sp, #28
 8009e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e1e <__ascii_mbtowc>:
 8009e1e:	b082      	sub	sp, #8
 8009e20:	b901      	cbnz	r1, 8009e24 <__ascii_mbtowc+0x6>
 8009e22:	a901      	add	r1, sp, #4
 8009e24:	b142      	cbz	r2, 8009e38 <__ascii_mbtowc+0x1a>
 8009e26:	b14b      	cbz	r3, 8009e3c <__ascii_mbtowc+0x1e>
 8009e28:	7813      	ldrb	r3, [r2, #0]
 8009e2a:	600b      	str	r3, [r1, #0]
 8009e2c:	7812      	ldrb	r2, [r2, #0]
 8009e2e:	1e10      	subs	r0, r2, #0
 8009e30:	bf18      	it	ne
 8009e32:	2001      	movne	r0, #1
 8009e34:	b002      	add	sp, #8
 8009e36:	4770      	bx	lr
 8009e38:	4610      	mov	r0, r2
 8009e3a:	e7fb      	b.n	8009e34 <__ascii_mbtowc+0x16>
 8009e3c:	f06f 0001 	mvn.w	r0, #1
 8009e40:	e7f8      	b.n	8009e34 <__ascii_mbtowc+0x16>

08009e42 <_realloc_r>:
 8009e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	4680      	mov	r8, r0
 8009e48:	4614      	mov	r4, r2
 8009e4a:	460e      	mov	r6, r1
 8009e4c:	b921      	cbnz	r1, 8009e58 <_realloc_r+0x16>
 8009e4e:	4611      	mov	r1, r2
 8009e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e54:	f7fd be40 	b.w	8007ad8 <_malloc_r>
 8009e58:	b92a      	cbnz	r2, 8009e66 <_realloc_r+0x24>
 8009e5a:	f7fd fdcd 	bl	80079f8 <_free_r>
 8009e5e:	4625      	mov	r5, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e66:	f000 f842 	bl	8009eee <_malloc_usable_size_r>
 8009e6a:	4284      	cmp	r4, r0
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	d802      	bhi.n	8009e76 <_realloc_r+0x34>
 8009e70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e74:	d812      	bhi.n	8009e9c <_realloc_r+0x5a>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4640      	mov	r0, r8
 8009e7a:	f7fd fe2d 	bl	8007ad8 <_malloc_r>
 8009e7e:	4605      	mov	r5, r0
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d0ed      	beq.n	8009e60 <_realloc_r+0x1e>
 8009e84:	42bc      	cmp	r4, r7
 8009e86:	4622      	mov	r2, r4
 8009e88:	4631      	mov	r1, r6
 8009e8a:	bf28      	it	cs
 8009e8c:	463a      	movcs	r2, r7
 8009e8e:	f7ff fc27 	bl	80096e0 <memcpy>
 8009e92:	4631      	mov	r1, r6
 8009e94:	4640      	mov	r0, r8
 8009e96:	f7fd fdaf 	bl	80079f8 <_free_r>
 8009e9a:	e7e1      	b.n	8009e60 <_realloc_r+0x1e>
 8009e9c:	4635      	mov	r5, r6
 8009e9e:	e7df      	b.n	8009e60 <_realloc_r+0x1e>

08009ea0 <__ascii_wctomb>:
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	b141      	cbz	r1, 8009eb8 <__ascii_wctomb+0x18>
 8009ea6:	2aff      	cmp	r2, #255	; 0xff
 8009ea8:	d904      	bls.n	8009eb4 <__ascii_wctomb+0x14>
 8009eaa:	228a      	movs	r2, #138	; 0x8a
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	4770      	bx	lr
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	700a      	strb	r2, [r1, #0]
 8009eb8:	4770      	bx	lr
	...

08009ebc <fiprintf>:
 8009ebc:	b40e      	push	{r1, r2, r3}
 8009ebe:	b503      	push	{r0, r1, lr}
 8009ec0:	4601      	mov	r1, r0
 8009ec2:	ab03      	add	r3, sp, #12
 8009ec4:	4805      	ldr	r0, [pc, #20]	; (8009edc <fiprintf+0x20>)
 8009ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eca:	6800      	ldr	r0, [r0, #0]
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	f000 f83d 	bl	8009f4c <_vfiprintf_r>
 8009ed2:	b002      	add	sp, #8
 8009ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed8:	b003      	add	sp, #12
 8009eda:	4770      	bx	lr
 8009edc:	20000064 	.word	0x20000064

08009ee0 <abort>:
 8009ee0:	2006      	movs	r0, #6
 8009ee2:	b508      	push	{r3, lr}
 8009ee4:	f000 fa0a 	bl	800a2fc <raise>
 8009ee8:	2001      	movs	r0, #1
 8009eea:	f7f8 fd34 	bl	8002956 <_exit>

08009eee <_malloc_usable_size_r>:
 8009eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef2:	1f18      	subs	r0, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	bfbc      	itt	lt
 8009ef8:	580b      	ldrlt	r3, [r1, r0]
 8009efa:	18c0      	addlt	r0, r0, r3
 8009efc:	4770      	bx	lr

08009efe <__sfputc_r>:
 8009efe:	6893      	ldr	r3, [r2, #8]
 8009f00:	b410      	push	{r4}
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	6093      	str	r3, [r2, #8]
 8009f08:	da07      	bge.n	8009f1a <__sfputc_r+0x1c>
 8009f0a:	6994      	ldr	r4, [r2, #24]
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	db01      	blt.n	8009f14 <__sfputc_r+0x16>
 8009f10:	290a      	cmp	r1, #10
 8009f12:	d102      	bne.n	8009f1a <__sfputc_r+0x1c>
 8009f14:	bc10      	pop	{r4}
 8009f16:	f000 b933 	b.w	800a180 <__swbuf_r>
 8009f1a:	6813      	ldr	r3, [r2, #0]
 8009f1c:	1c58      	adds	r0, r3, #1
 8009f1e:	6010      	str	r0, [r2, #0]
 8009f20:	7019      	strb	r1, [r3, #0]
 8009f22:	4608      	mov	r0, r1
 8009f24:	bc10      	pop	{r4}
 8009f26:	4770      	bx	lr

08009f28 <__sfputs_r>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	4614      	mov	r4, r2
 8009f30:	18d5      	adds	r5, r2, r3
 8009f32:	42ac      	cmp	r4, r5
 8009f34:	d101      	bne.n	8009f3a <__sfputs_r+0x12>
 8009f36:	2000      	movs	r0, #0
 8009f38:	e007      	b.n	8009f4a <__sfputs_r+0x22>
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f42:	f7ff ffdc 	bl	8009efe <__sfputc_r>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d1f3      	bne.n	8009f32 <__sfputs_r+0xa>
 8009f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f4c <_vfiprintf_r>:
 8009f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f50:	460d      	mov	r5, r1
 8009f52:	4614      	mov	r4, r2
 8009f54:	4698      	mov	r8, r3
 8009f56:	4606      	mov	r6, r0
 8009f58:	b09d      	sub	sp, #116	; 0x74
 8009f5a:	b118      	cbz	r0, 8009f64 <_vfiprintf_r+0x18>
 8009f5c:	6a03      	ldr	r3, [r0, #32]
 8009f5e:	b90b      	cbnz	r3, 8009f64 <_vfiprintf_r+0x18>
 8009f60:	f7fc fdae 	bl	8006ac0 <__sinit>
 8009f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f66:	07d9      	lsls	r1, r3, #31
 8009f68:	d405      	bmi.n	8009f76 <_vfiprintf_r+0x2a>
 8009f6a:	89ab      	ldrh	r3, [r5, #12]
 8009f6c:	059a      	lsls	r2, r3, #22
 8009f6e:	d402      	bmi.n	8009f76 <_vfiprintf_r+0x2a>
 8009f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f72:	f7fc febc 	bl	8006cee <__retarget_lock_acquire_recursive>
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	071b      	lsls	r3, r3, #28
 8009f7a:	d501      	bpl.n	8009f80 <_vfiprintf_r+0x34>
 8009f7c:	692b      	ldr	r3, [r5, #16]
 8009f7e:	b99b      	cbnz	r3, 8009fa8 <_vfiprintf_r+0x5c>
 8009f80:	4629      	mov	r1, r5
 8009f82:	4630      	mov	r0, r6
 8009f84:	f000 f93a 	bl	800a1fc <__swsetup_r>
 8009f88:	b170      	cbz	r0, 8009fa8 <_vfiprintf_r+0x5c>
 8009f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f8c:	07dc      	lsls	r4, r3, #31
 8009f8e:	d504      	bpl.n	8009f9a <_vfiprintf_r+0x4e>
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	b01d      	add	sp, #116	; 0x74
 8009f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	0598      	lsls	r0, r3, #22
 8009f9e:	d4f7      	bmi.n	8009f90 <_vfiprintf_r+0x44>
 8009fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa2:	f7fc fea5 	bl	8006cf0 <__retarget_lock_release_recursive>
 8009fa6:	e7f3      	b.n	8009f90 <_vfiprintf_r+0x44>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9309      	str	r3, [sp, #36]	; 0x24
 8009fac:	2320      	movs	r3, #32
 8009fae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb2:	2330      	movs	r3, #48	; 0x30
 8009fb4:	f04f 0901 	mov.w	r9, #1
 8009fb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a16c <_vfiprintf_r+0x220>
 8009fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc4:	4623      	mov	r3, r4
 8009fc6:	469a      	mov	sl, r3
 8009fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fcc:	b10a      	cbz	r2, 8009fd2 <_vfiprintf_r+0x86>
 8009fce:	2a25      	cmp	r2, #37	; 0x25
 8009fd0:	d1f9      	bne.n	8009fc6 <_vfiprintf_r+0x7a>
 8009fd2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd6:	d00b      	beq.n	8009ff0 <_vfiprintf_r+0xa4>
 8009fd8:	465b      	mov	r3, fp
 8009fda:	4622      	mov	r2, r4
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7ff ffa2 	bl	8009f28 <__sfputs_r>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	f000 80a9 	beq.w	800a13c <_vfiprintf_r+0x1f0>
 8009fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fec:	445a      	add	r2, fp
 8009fee:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80a1 	beq.w	800a13c <_vfiprintf_r+0x1f0>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f04f 32ff 	mov.w	r2, #4294967295
 800a000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a004:	f10a 0a01 	add.w	sl, sl, #1
 800a008:	9304      	str	r3, [sp, #16]
 800a00a:	9307      	str	r3, [sp, #28]
 800a00c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a010:	931a      	str	r3, [sp, #104]	; 0x68
 800a012:	4654      	mov	r4, sl
 800a014:	2205      	movs	r2, #5
 800a016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01a:	4854      	ldr	r0, [pc, #336]	; (800a16c <_vfiprintf_r+0x220>)
 800a01c:	f7fc fe69 	bl	8006cf2 <memchr>
 800a020:	9a04      	ldr	r2, [sp, #16]
 800a022:	b9d8      	cbnz	r0, 800a05c <_vfiprintf_r+0x110>
 800a024:	06d1      	lsls	r1, r2, #27
 800a026:	bf44      	itt	mi
 800a028:	2320      	movmi	r3, #32
 800a02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a02e:	0713      	lsls	r3, r2, #28
 800a030:	bf44      	itt	mi
 800a032:	232b      	movmi	r3, #43	; 0x2b
 800a034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a038:	f89a 3000 	ldrb.w	r3, [sl]
 800a03c:	2b2a      	cmp	r3, #42	; 0x2a
 800a03e:	d015      	beq.n	800a06c <_vfiprintf_r+0x120>
 800a040:	4654      	mov	r4, sl
 800a042:	2000      	movs	r0, #0
 800a044:	f04f 0c0a 	mov.w	ip, #10
 800a048:	9a07      	ldr	r2, [sp, #28]
 800a04a:	4621      	mov	r1, r4
 800a04c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a050:	3b30      	subs	r3, #48	; 0x30
 800a052:	2b09      	cmp	r3, #9
 800a054:	d94d      	bls.n	800a0f2 <_vfiprintf_r+0x1a6>
 800a056:	b1b0      	cbz	r0, 800a086 <_vfiprintf_r+0x13a>
 800a058:	9207      	str	r2, [sp, #28]
 800a05a:	e014      	b.n	800a086 <_vfiprintf_r+0x13a>
 800a05c:	eba0 0308 	sub.w	r3, r0, r8
 800a060:	fa09 f303 	lsl.w	r3, r9, r3
 800a064:	4313      	orrs	r3, r2
 800a066:	46a2      	mov	sl, r4
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	e7d2      	b.n	800a012 <_vfiprintf_r+0xc6>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	1d19      	adds	r1, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	9103      	str	r1, [sp, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	bfbb      	ittet	lt
 800a078:	425b      	neglt	r3, r3
 800a07a:	f042 0202 	orrlt.w	r2, r2, #2
 800a07e:	9307      	strge	r3, [sp, #28]
 800a080:	9307      	strlt	r3, [sp, #28]
 800a082:	bfb8      	it	lt
 800a084:	9204      	strlt	r2, [sp, #16]
 800a086:	7823      	ldrb	r3, [r4, #0]
 800a088:	2b2e      	cmp	r3, #46	; 0x2e
 800a08a:	d10c      	bne.n	800a0a6 <_vfiprintf_r+0x15a>
 800a08c:	7863      	ldrb	r3, [r4, #1]
 800a08e:	2b2a      	cmp	r3, #42	; 0x2a
 800a090:	d134      	bne.n	800a0fc <_vfiprintf_r+0x1b0>
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	3402      	adds	r4, #2
 800a096:	1d1a      	adds	r2, r3, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	9203      	str	r2, [sp, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfb8      	it	lt
 800a0a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a170 <_vfiprintf_r+0x224>
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	7821      	ldrb	r1, [r4, #0]
 800a0b0:	f7fc fe1f 	bl	8006cf2 <memchr>
 800a0b4:	b138      	cbz	r0, 800a0c6 <_vfiprintf_r+0x17a>
 800a0b6:	2240      	movs	r2, #64	; 0x40
 800a0b8:	9b04      	ldr	r3, [sp, #16]
 800a0ba:	eba0 000a 	sub.w	r0, r0, sl
 800a0be:	4082      	lsls	r2, r0
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	3401      	adds	r4, #1
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ca:	2206      	movs	r2, #6
 800a0cc:	4829      	ldr	r0, [pc, #164]	; (800a174 <_vfiprintf_r+0x228>)
 800a0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d2:	f7fc fe0e 	bl	8006cf2 <memchr>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d03f      	beq.n	800a15a <_vfiprintf_r+0x20e>
 800a0da:	4b27      	ldr	r3, [pc, #156]	; (800a178 <_vfiprintf_r+0x22c>)
 800a0dc:	bb1b      	cbnz	r3, 800a126 <_vfiprintf_r+0x1da>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	3307      	adds	r3, #7
 800a0e2:	f023 0307 	bic.w	r3, r3, #7
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	9303      	str	r3, [sp, #12]
 800a0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ec:	443b      	add	r3, r7
 800a0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f0:	e768      	b.n	8009fc4 <_vfiprintf_r+0x78>
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fa:	e7a6      	b.n	800a04a <_vfiprintf_r+0xfe>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	4619      	mov	r1, r3
 800a104:	3401      	adds	r4, #1
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	4620      	mov	r0, r4
 800a10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a10e:	3a30      	subs	r2, #48	; 0x30
 800a110:	2a09      	cmp	r2, #9
 800a112:	d903      	bls.n	800a11c <_vfiprintf_r+0x1d0>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0c6      	beq.n	800a0a6 <_vfiprintf_r+0x15a>
 800a118:	9105      	str	r1, [sp, #20]
 800a11a:	e7c4      	b.n	800a0a6 <_vfiprintf_r+0x15a>
 800a11c:	4604      	mov	r4, r0
 800a11e:	2301      	movs	r3, #1
 800a120:	fb0c 2101 	mla	r1, ip, r1, r2
 800a124:	e7f0      	b.n	800a108 <_vfiprintf_r+0x1bc>
 800a126:	ab03      	add	r3, sp, #12
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	462a      	mov	r2, r5
 800a12c:	4630      	mov	r0, r6
 800a12e:	4b13      	ldr	r3, [pc, #76]	; (800a17c <_vfiprintf_r+0x230>)
 800a130:	a904      	add	r1, sp, #16
 800a132:	f7fb fe69 	bl	8005e08 <_printf_float>
 800a136:	4607      	mov	r7, r0
 800a138:	1c78      	adds	r0, r7, #1
 800a13a:	d1d6      	bne.n	800a0ea <_vfiprintf_r+0x19e>
 800a13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a13e:	07d9      	lsls	r1, r3, #31
 800a140:	d405      	bmi.n	800a14e <_vfiprintf_r+0x202>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	059a      	lsls	r2, r3, #22
 800a146:	d402      	bmi.n	800a14e <_vfiprintf_r+0x202>
 800a148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a14a:	f7fc fdd1 	bl	8006cf0 <__retarget_lock_release_recursive>
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	065b      	lsls	r3, r3, #25
 800a152:	f53f af1d 	bmi.w	8009f90 <_vfiprintf_r+0x44>
 800a156:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a158:	e71c      	b.n	8009f94 <_vfiprintf_r+0x48>
 800a15a:	ab03      	add	r3, sp, #12
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	462a      	mov	r2, r5
 800a160:	4630      	mov	r0, r6
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <_vfiprintf_r+0x230>)
 800a164:	a904      	add	r1, sp, #16
 800a166:	f7fc f8ef 	bl	8006348 <_printf_i>
 800a16a:	e7e4      	b.n	800a136 <_vfiprintf_r+0x1ea>
 800a16c:	0800a879 	.word	0x0800a879
 800a170:	0800a87f 	.word	0x0800a87f
 800a174:	0800a883 	.word	0x0800a883
 800a178:	08005e09 	.word	0x08005e09
 800a17c:	08009f29 	.word	0x08009f29

0800a180 <__swbuf_r>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	460e      	mov	r6, r1
 800a184:	4614      	mov	r4, r2
 800a186:	4605      	mov	r5, r0
 800a188:	b118      	cbz	r0, 800a192 <__swbuf_r+0x12>
 800a18a:	6a03      	ldr	r3, [r0, #32]
 800a18c:	b90b      	cbnz	r3, 800a192 <__swbuf_r+0x12>
 800a18e:	f7fc fc97 	bl	8006ac0 <__sinit>
 800a192:	69a3      	ldr	r3, [r4, #24]
 800a194:	60a3      	str	r3, [r4, #8]
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	071a      	lsls	r2, r3, #28
 800a19a:	d525      	bpl.n	800a1e8 <__swbuf_r+0x68>
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	b31b      	cbz	r3, 800a1e8 <__swbuf_r+0x68>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	6922      	ldr	r2, [r4, #16]
 800a1a4:	b2f6      	uxtb	r6, r6
 800a1a6:	1a98      	subs	r0, r3, r2
 800a1a8:	6963      	ldr	r3, [r4, #20]
 800a1aa:	4637      	mov	r7, r6
 800a1ac:	4283      	cmp	r3, r0
 800a1ae:	dc04      	bgt.n	800a1ba <__swbuf_r+0x3a>
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7ff fa30 	bl	8009618 <_fflush_r>
 800a1b8:	b9e0      	cbnz	r0, 800a1f4 <__swbuf_r+0x74>
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	60a3      	str	r3, [r4, #8]
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	6022      	str	r2, [r4, #0]
 800a1c6:	701e      	strb	r6, [r3, #0]
 800a1c8:	6962      	ldr	r2, [r4, #20]
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d004      	beq.n	800a1da <__swbuf_r+0x5a>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	07db      	lsls	r3, r3, #31
 800a1d4:	d506      	bpl.n	800a1e4 <__swbuf_r+0x64>
 800a1d6:	2e0a      	cmp	r6, #10
 800a1d8:	d104      	bne.n	800a1e4 <__swbuf_r+0x64>
 800a1da:	4621      	mov	r1, r4
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f7ff fa1b 	bl	8009618 <_fflush_r>
 800a1e2:	b938      	cbnz	r0, 800a1f4 <__swbuf_r+0x74>
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f000 f806 	bl	800a1fc <__swsetup_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d0d5      	beq.n	800a1a0 <__swbuf_r+0x20>
 800a1f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a1f8:	e7f4      	b.n	800a1e4 <__swbuf_r+0x64>
	...

0800a1fc <__swsetup_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4b2a      	ldr	r3, [pc, #168]	; (800a2a8 <__swsetup_r+0xac>)
 800a200:	4605      	mov	r5, r0
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	460c      	mov	r4, r1
 800a206:	b118      	cbz	r0, 800a210 <__swsetup_r+0x14>
 800a208:	6a03      	ldr	r3, [r0, #32]
 800a20a:	b90b      	cbnz	r3, 800a210 <__swsetup_r+0x14>
 800a20c:	f7fc fc58 	bl	8006ac0 <__sinit>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a216:	0718      	lsls	r0, r3, #28
 800a218:	d422      	bmi.n	800a260 <__swsetup_r+0x64>
 800a21a:	06d9      	lsls	r1, r3, #27
 800a21c:	d407      	bmi.n	800a22e <__swsetup_r+0x32>
 800a21e:	2309      	movs	r3, #9
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a226:	f04f 30ff 	mov.w	r0, #4294967295
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	e034      	b.n	800a298 <__swsetup_r+0x9c>
 800a22e:	0758      	lsls	r0, r3, #29
 800a230:	d512      	bpl.n	800a258 <__swsetup_r+0x5c>
 800a232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a234:	b141      	cbz	r1, 800a248 <__swsetup_r+0x4c>
 800a236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a23a:	4299      	cmp	r1, r3
 800a23c:	d002      	beq.n	800a244 <__swsetup_r+0x48>
 800a23e:	4628      	mov	r0, r5
 800a240:	f7fd fbda 	bl	80079f8 <_free_r>
 800a244:	2300      	movs	r3, #0
 800a246:	6363      	str	r3, [r4, #52]	; 0x34
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	2300      	movs	r3, #0
 800a252:	6063      	str	r3, [r4, #4]
 800a254:	6923      	ldr	r3, [r4, #16]
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	f043 0308 	orr.w	r3, r3, #8
 800a25e:	81a3      	strh	r3, [r4, #12]
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	b94b      	cbnz	r3, 800a278 <__swsetup_r+0x7c>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a26a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a26e:	d003      	beq.n	800a278 <__swsetup_r+0x7c>
 800a270:	4621      	mov	r1, r4
 800a272:	4628      	mov	r0, r5
 800a274:	f000 f883 	bl	800a37e <__smakebuf_r>
 800a278:	89a0      	ldrh	r0, [r4, #12]
 800a27a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a27e:	f010 0301 	ands.w	r3, r0, #1
 800a282:	d00a      	beq.n	800a29a <__swsetup_r+0x9e>
 800a284:	2300      	movs	r3, #0
 800a286:	60a3      	str	r3, [r4, #8]
 800a288:	6963      	ldr	r3, [r4, #20]
 800a28a:	425b      	negs	r3, r3
 800a28c:	61a3      	str	r3, [r4, #24]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	b943      	cbnz	r3, 800a2a4 <__swsetup_r+0xa8>
 800a292:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a296:	d1c4      	bne.n	800a222 <__swsetup_r+0x26>
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	0781      	lsls	r1, r0, #30
 800a29c:	bf58      	it	pl
 800a29e:	6963      	ldrpl	r3, [r4, #20]
 800a2a0:	60a3      	str	r3, [r4, #8]
 800a2a2:	e7f4      	b.n	800a28e <__swsetup_r+0x92>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e7f7      	b.n	800a298 <__swsetup_r+0x9c>
 800a2a8:	20000064 	.word	0x20000064

0800a2ac <_raise_r>:
 800a2ac:	291f      	cmp	r1, #31
 800a2ae:	b538      	push	{r3, r4, r5, lr}
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	d904      	bls.n	800a2c0 <_raise_r+0x14>
 800a2b6:	2316      	movs	r3, #22
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a2c2:	b112      	cbz	r2, 800a2ca <_raise_r+0x1e>
 800a2c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2c8:	b94b      	cbnz	r3, 800a2de <_raise_r+0x32>
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 f830 	bl	800a330 <_getpid_r>
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2da:	f000 b817 	b.w	800a30c <_kill_r>
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d00a      	beq.n	800a2f8 <_raise_r+0x4c>
 800a2e2:	1c59      	adds	r1, r3, #1
 800a2e4:	d103      	bne.n	800a2ee <_raise_r+0x42>
 800a2e6:	2316      	movs	r3, #22
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	e7e7      	b.n	800a2be <_raise_r+0x12>
 800a2ee:	2400      	movs	r4, #0
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2f6:	4798      	blx	r3
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e7e0      	b.n	800a2be <_raise_r+0x12>

0800a2fc <raise>:
 800a2fc:	4b02      	ldr	r3, [pc, #8]	; (800a308 <raise+0xc>)
 800a2fe:	4601      	mov	r1, r0
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	f7ff bfd3 	b.w	800a2ac <_raise_r>
 800a306:	bf00      	nop
 800a308:	20000064 	.word	0x20000064

0800a30c <_kill_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	2300      	movs	r3, #0
 800a310:	4d06      	ldr	r5, [pc, #24]	; (800a32c <_kill_r+0x20>)
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	4611      	mov	r1, r2
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	f7f8 fb0c 	bl	8002936 <_kill>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d102      	bne.n	800a328 <_kill_r+0x1c>
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	b103      	cbz	r3, 800a328 <_kill_r+0x1c>
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	bf00      	nop
 800a32c:	200004f0 	.word	0x200004f0

0800a330 <_getpid_r>:
 800a330:	f7f8 bafa 	b.w	8002928 <_getpid>

0800a334 <__swhatbuf_r>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	460c      	mov	r4, r1
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	4615      	mov	r5, r2
 800a33e:	2900      	cmp	r1, #0
 800a340:	461e      	mov	r6, r3
 800a342:	b096      	sub	sp, #88	; 0x58
 800a344:	da0c      	bge.n	800a360 <__swhatbuf_r+0x2c>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	2100      	movs	r1, #0
 800a34a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a34e:	bf0c      	ite	eq
 800a350:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a354:	2340      	movne	r3, #64	; 0x40
 800a356:	2000      	movs	r0, #0
 800a358:	6031      	str	r1, [r6, #0]
 800a35a:	602b      	str	r3, [r5, #0]
 800a35c:	b016      	add	sp, #88	; 0x58
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	466a      	mov	r2, sp
 800a362:	f000 f849 	bl	800a3f8 <_fstat_r>
 800a366:	2800      	cmp	r0, #0
 800a368:	dbed      	blt.n	800a346 <__swhatbuf_r+0x12>
 800a36a:	9901      	ldr	r1, [sp, #4]
 800a36c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a370:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a374:	4259      	negs	r1, r3
 800a376:	4159      	adcs	r1, r3
 800a378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a37c:	e7eb      	b.n	800a356 <__swhatbuf_r+0x22>

0800a37e <__smakebuf_r>:
 800a37e:	898b      	ldrh	r3, [r1, #12]
 800a380:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a382:	079d      	lsls	r5, r3, #30
 800a384:	4606      	mov	r6, r0
 800a386:	460c      	mov	r4, r1
 800a388:	d507      	bpl.n	800a39a <__smakebuf_r+0x1c>
 800a38a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	2301      	movs	r3, #1
 800a394:	6163      	str	r3, [r4, #20]
 800a396:	b002      	add	sp, #8
 800a398:	bd70      	pop	{r4, r5, r6, pc}
 800a39a:	466a      	mov	r2, sp
 800a39c:	ab01      	add	r3, sp, #4
 800a39e:	f7ff ffc9 	bl	800a334 <__swhatbuf_r>
 800a3a2:	9900      	ldr	r1, [sp, #0]
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f7fd fb96 	bl	8007ad8 <_malloc_r>
 800a3ac:	b948      	cbnz	r0, 800a3c2 <__smakebuf_r+0x44>
 800a3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b2:	059a      	lsls	r2, r3, #22
 800a3b4:	d4ef      	bmi.n	800a396 <__smakebuf_r+0x18>
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	f043 0302 	orr.w	r3, r3, #2
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	e7e3      	b.n	800a38a <__smakebuf_r+0xc>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	6020      	str	r0, [r4, #0]
 800a3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	9b00      	ldr	r3, [sp, #0]
 800a3ce:	6120      	str	r0, [r4, #16]
 800a3d0:	6163      	str	r3, [r4, #20]
 800a3d2:	9b01      	ldr	r3, [sp, #4]
 800a3d4:	b15b      	cbz	r3, 800a3ee <__smakebuf_r+0x70>
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3dc:	f000 f81e 	bl	800a41c <_isatty_r>
 800a3e0:	b128      	cbz	r0, 800a3ee <__smakebuf_r+0x70>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	f023 0303 	bic.w	r3, r3, #3
 800a3e8:	f043 0301 	orr.w	r3, r3, #1
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	431d      	orrs	r5, r3
 800a3f2:	81a5      	strh	r5, [r4, #12]
 800a3f4:	e7cf      	b.n	800a396 <__smakebuf_r+0x18>
	...

0800a3f8 <_fstat_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4d06      	ldr	r5, [pc, #24]	; (800a418 <_fstat_r+0x20>)
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	4611      	mov	r1, r2
 800a404:	602b      	str	r3, [r5, #0]
 800a406:	f7f8 faf4 	bl	80029f2 <_fstat>
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	d102      	bne.n	800a414 <_fstat_r+0x1c>
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	b103      	cbz	r3, 800a414 <_fstat_r+0x1c>
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	bd38      	pop	{r3, r4, r5, pc}
 800a416:	bf00      	nop
 800a418:	200004f0 	.word	0x200004f0

0800a41c <_isatty_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	2300      	movs	r3, #0
 800a420:	4d05      	ldr	r5, [pc, #20]	; (800a438 <_isatty_r+0x1c>)
 800a422:	4604      	mov	r4, r0
 800a424:	4608      	mov	r0, r1
 800a426:	602b      	str	r3, [r5, #0]
 800a428:	f7f8 faf2 	bl	8002a10 <_isatty>
 800a42c:	1c43      	adds	r3, r0, #1
 800a42e:	d102      	bne.n	800a436 <_isatty_r+0x1a>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	b103      	cbz	r3, 800a436 <_isatty_r+0x1a>
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	200004f0 	.word	0x200004f0

0800a43c <_init>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	bf00      	nop
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr

0800a448 <_fini>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr
